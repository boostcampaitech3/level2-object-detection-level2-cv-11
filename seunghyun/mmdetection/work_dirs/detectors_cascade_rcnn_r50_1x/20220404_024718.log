2022-04-04 02:47:19,179 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]
CUDA available: True
GPU 0: Tesla V100-PCIE-32GB
CUDA_HOME: None
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.5.5
MMCV: 1.4.6
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.0
MMDetection: 2.22.0+
------------------------------------------------------------

2022-04-04 02:47:20,528 - mmdet - INFO - Distributed training: False
2022-04-04 02:47:21,795 - mmdet - INFO - Config:
model = dict(
    type='CascadeRCNN',
    backbone=dict(
        type='DetectoRS_ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50'),
        conv_cfg=dict(type='ConvAWS'),
        sac=dict(type='SAC', use_deform=True),
        stage_with_sac=(False, True, True, True),
        output_img=True),
    neck=dict(
        type='RFP',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5,
        rfp_steps=2,
        aspp_out_channels=64,
        aspp_dilations=(1, 3, 6, 1),
        rfp_backbone=dict(
            rfp_inplanes=256,
            type='DetectoRS_ResNet',
            depth=50,
            num_stages=4,
            out_indices=(0, 1, 2, 3),
            frozen_stages=1,
            norm_cfg=dict(type='BN', requires_grad=True),
            norm_eval=True,
            conv_cfg=dict(type='ConvAWS'),
            sac=dict(type='SAC', use_deform=True),
            stage_with_sac=(False, True, True, True),
            pretrained='torchvision://resnet50',
            style='pytorch')),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(
            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),
    roi_head=dict(
        type='CascadeRoIHead',
        num_stages=3,
        stage_loss_weights=[1, 0.5, 0.25],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.05, 0.05, 0.1, 0.1]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.033, 0.033, 0.067, 0.067]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))
        ]),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=0,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=2000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=[
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.5,
                    neg_iou_thr=0.5,
                    min_pos_iou=0.5,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.6,
                    min_pos_iou=0.6,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.7,
                    neg_iou_thr=0.7,
                    min_pos_iou=0.7,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100)))
dataset_type = 'CocoDataset'
data_root = '/opt/ml/detection/dataset/'
classes = ('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',
           'Styrofoam', 'Plastic bag', 'Battery', 'Clothing')
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
img_scale = (800, 800)
albu_train_transforms = [
    dict(
        type='OneOf',
        transforms=[
            dict(type='Flip', p=1.0),
            dict(type='RandomRotate90', p=1.0)
        ],
        p=0.5),
    dict(
        type='RandomResizedCrop',
        height=800,
        width=800,
        scale=(0.5, 1.0),
        p=0.5),
    dict(
        type='RandomBrightnessContrast',
        brightness_limit=0.1,
        contrast_limit=0.15,
        p=0.5),
    dict(
        type='HueSaturationValue',
        hue_shift_limit=15,
        sat_shift_limit=25,
        val_shift_limit=10,
        p=0.5),
    dict(type='GaussNoise', p=0.3),
    dict(
        type='OneOf',
        transforms=[
            dict(type='Blur', p=1.0),
            dict(type='GaussianBlur', p=1.0),
            dict(type='MedianBlur', blur_limit=5, p=1.0),
            dict(type='MotionBlur', p=1.0)
        ],
        p=0.1)
]
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(800, 800), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.0),
    dict(
        type='Albu',
        transforms=[
            dict(
                type='OneOf',
                transforms=[
                    dict(type='Flip', p=1.0),
                    dict(type='RandomRotate90', p=1.0)
                ],
                p=0.5),
            dict(
                type='RandomResizedCrop',
                height=800,
                width=800,
                scale=(0.5, 1.0),
                p=0.5),
            dict(
                type='RandomBrightnessContrast',
                brightness_limit=0.1,
                contrast_limit=0.15,
                p=0.5),
            dict(
                type='HueSaturationValue',
                hue_shift_limit=15,
                sat_shift_limit=25,
                val_shift_limit=10,
                p=0.5),
            dict(type='GaussNoise', p=0.3),
            dict(
                type='OneOf',
                transforms=[
                    dict(type='Blur', p=1.0),
                    dict(type='GaussianBlur', p=1.0),
                    dict(type='MedianBlur', blur_limit=5, p=1.0),
                    dict(type='MotionBlur', p=1.0)
                ],
                p=0.1)
        ],
        bbox_params=dict(
            type='BboxParams',
            format='pascal_voc',
            label_fields=['gt_labels'],
            min_visibility=0.0,
            filter_lost_elements=True),
        keymap=dict(img='image', gt_bboxes='bboxes'),
        update_pad_shape=False,
        skip_img_without_anno=True),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
val_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(800, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(800, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=8,
    workers_per_gpu=2,
    train=dict(
        type='CocoDataset',
        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),
        ann_file=
        '/opt/ml/detection/dataset/stratified_kfold/basic_v2/cv_train_3.json',
        img_prefix='/opt/ml/detection/dataset/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', img_scale=(800, 800), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.0),
            dict(
                type='Albu',
                transforms=[
                    dict(
                        type='OneOf',
                        transforms=[
                            dict(type='Flip', p=1.0),
                            dict(type='RandomRotate90', p=1.0)
                        ],
                        p=0.5),
                    dict(
                        type='RandomResizedCrop',
                        height=800,
                        width=800,
                        scale=(0.5, 1.0),
                        p=0.5),
                    dict(
                        type='RandomBrightnessContrast',
                        brightness_limit=0.1,
                        contrast_limit=0.15,
                        p=0.5),
                    dict(
                        type='HueSaturationValue',
                        hue_shift_limit=15,
                        sat_shift_limit=25,
                        val_shift_limit=10,
                        p=0.5),
                    dict(type='GaussNoise', p=0.3),
                    dict(
                        type='OneOf',
                        transforms=[
                            dict(type='Blur', p=1.0),
                            dict(type='GaussianBlur', p=1.0),
                            dict(type='MedianBlur', blur_limit=5, p=1.0),
                            dict(type='MotionBlur', p=1.0)
                        ],
                        p=0.1)
                ],
                bbox_params=dict(
                    type='BboxParams',
                    format='pascal_voc',
                    label_fields=['gt_labels'],
                    min_visibility=0.0,
                    filter_lost_elements=True),
                keymap=dict(img='image', gt_bboxes='bboxes'),
                update_pad_shape=False,
                skip_img_without_anno=True),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),
        ann_file=
        '/opt/ml/detection/dataset/stratified_kfold/basic_v2/cv_val_3.json',
        img_prefix='/opt/ml/detection/dataset/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(800, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),
        ann_file='/opt/ml/detection/dataset/test.json',
        img_prefix='/opt/ml/detection/dataset/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(800, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='bbox', classwise=True)
optimizer = dict(
    type='AdamW',
    lr=0.0001,
    betas=(0.9, 0.999),
    weight_decay=0.05,
    paramwise_cfg=dict(
        custom_keys=dict(
            absolute_pos_embed=dict(decay_mult=0.0),
            relative_position_bias_table=dict(decay_mult=0.0),
            norm=dict(decay_mult=0.0))))
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='CosineAnnealing',
    warmup='linear',
    warmup_iters=488,
    warmup_ratio=0.001,
    min_lr=1e-06)
runner = dict(type='EpochBasedRunner', max_epochs=36)
checkpoint_config = dict(max_keep_ckpts=5, interval=1)
log_config = dict(
    interval=50,
    hooks=[
        dict(type='TextLoggerHook'),
        dict(
            type='WandbLoggerHook',
            interval=1000,
            init_kwargs=dict(
                project='two-stage-model',
                entity='canvas11',
                name='LEE_DetectoRS_cascade_rcnn_r50_1x_RESUME'))
    ])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = '/opt/ml/detection/SEUNGHYUN_WORKSPACE/my_mmdetection/work_dirs/detectors_cascade_rcnn_r50_1x/epoch_24.pth'
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
work_dir = 'work_dirs/detectors_cascade_rcnn_r50_1x'
auto_resume = False
gpu_ids = [0]

2022-04-04 02:47:21,796 - mmdet - INFO - Set random seed to 1409888678, deterministic: False
2022-04-04 02:47:23,442 - mmdet - INFO - load checkpoint from torchvision path: torchvision://resnet50
2022-04-04 02:47:23,698 - mmdet - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

missing keys in source state_dict: layer2.0.conv2.weight_diff, layer2.0.conv2.switch.weight, layer2.0.conv2.switch.bias, layer2.0.conv2.pre_context.weight, layer2.0.conv2.pre_context.bias, layer2.0.conv2.post_context.weight, layer2.0.conv2.post_context.bias, layer2.0.conv2.offset_s.weight, layer2.0.conv2.offset_s.bias, layer2.0.conv2.offset_l.weight, layer2.0.conv2.offset_l.bias, layer2.1.conv2.weight_diff, layer2.1.conv2.switch.weight, layer2.1.conv2.switch.bias, layer2.1.conv2.pre_context.weight, layer2.1.conv2.pre_context.bias, layer2.1.conv2.post_context.weight, layer2.1.conv2.post_context.bias, layer2.1.conv2.offset_s.weight, layer2.1.conv2.offset_s.bias, layer2.1.conv2.offset_l.weight, layer2.1.conv2.offset_l.bias, layer2.2.conv2.weight_diff, layer2.2.conv2.switch.weight, layer2.2.conv2.switch.bias, layer2.2.conv2.pre_context.weight, layer2.2.conv2.pre_context.bias, layer2.2.conv2.post_context.weight, layer2.2.conv2.post_context.bias, layer2.2.conv2.offset_s.weight, layer2.2.conv2.offset_s.bias, layer2.2.conv2.offset_l.weight, layer2.2.conv2.offset_l.bias, layer2.3.conv2.weight_diff, layer2.3.conv2.switch.weight, layer2.3.conv2.switch.bias, layer2.3.conv2.pre_context.weight, layer2.3.conv2.pre_context.bias, layer2.3.conv2.post_context.weight, layer2.3.conv2.post_context.bias, layer2.3.conv2.offset_s.weight, layer2.3.conv2.offset_s.bias, layer2.3.conv2.offset_l.weight, layer2.3.conv2.offset_l.bias, layer3.0.conv2.weight_diff, layer3.0.conv2.switch.weight, layer3.0.conv2.switch.bias, layer3.0.conv2.pre_context.weight, layer3.0.conv2.pre_context.bias, layer3.0.conv2.post_context.weight, layer3.0.conv2.post_context.bias, layer3.0.conv2.offset_s.weight, layer3.0.conv2.offset_s.bias, layer3.0.conv2.offset_l.weight, layer3.0.conv2.offset_l.bias, layer3.1.conv2.weight_diff, layer3.1.conv2.switch.weight, layer3.1.conv2.switch.bias, layer3.1.conv2.pre_context.weight, layer3.1.conv2.pre_context.bias, layer3.1.conv2.post_context.weight, layer3.1.conv2.post_context.bias, layer3.1.conv2.offset_s.weight, layer3.1.conv2.offset_s.bias, layer3.1.conv2.offset_l.weight, layer3.1.conv2.offset_l.bias, layer3.2.conv2.weight_diff, layer3.2.conv2.switch.weight, layer3.2.conv2.switch.bias, layer3.2.conv2.pre_context.weight, layer3.2.conv2.pre_context.bias, layer3.2.conv2.post_context.weight, layer3.2.conv2.post_context.bias, layer3.2.conv2.offset_s.weight, layer3.2.conv2.offset_s.bias, layer3.2.conv2.offset_l.weight, layer3.2.conv2.offset_l.bias, layer3.3.conv2.weight_diff, layer3.3.conv2.switch.weight, layer3.3.conv2.switch.bias, layer3.3.conv2.pre_context.weight, layer3.3.conv2.pre_context.bias, layer3.3.conv2.post_context.weight, layer3.3.conv2.post_context.bias, layer3.3.conv2.offset_s.weight, layer3.3.conv2.offset_s.bias, layer3.3.conv2.offset_l.weight, layer3.3.conv2.offset_l.bias, layer3.4.conv2.weight_diff, layer3.4.conv2.switch.weight, layer3.4.conv2.switch.bias, layer3.4.conv2.pre_context.weight, layer3.4.conv2.pre_context.bias, layer3.4.conv2.post_context.weight, layer3.4.conv2.post_context.bias, layer3.4.conv2.offset_s.weight, layer3.4.conv2.offset_s.bias, layer3.4.conv2.offset_l.weight, layer3.4.conv2.offset_l.bias, layer3.5.conv2.weight_diff, layer3.5.conv2.switch.weight, layer3.5.conv2.switch.bias, layer3.5.conv2.pre_context.weight, layer3.5.conv2.pre_context.bias, layer3.5.conv2.post_context.weight, layer3.5.conv2.post_context.bias, layer3.5.conv2.offset_s.weight, layer3.5.conv2.offset_s.bias, layer3.5.conv2.offset_l.weight, layer3.5.conv2.offset_l.bias, layer4.0.conv2.weight_diff, layer4.0.conv2.switch.weight, layer4.0.conv2.switch.bias, layer4.0.conv2.pre_context.weight, layer4.0.conv2.pre_context.bias, layer4.0.conv2.post_context.weight, layer4.0.conv2.post_context.bias, layer4.0.conv2.offset_s.weight, layer4.0.conv2.offset_s.bias, layer4.0.conv2.offset_l.weight, layer4.0.conv2.offset_l.bias, layer4.1.conv2.weight_diff, layer4.1.conv2.switch.weight, layer4.1.conv2.switch.bias, layer4.1.conv2.pre_context.weight, layer4.1.conv2.pre_context.bias, layer4.1.conv2.post_context.weight, layer4.1.conv2.post_context.bias, layer4.1.conv2.offset_s.weight, layer4.1.conv2.offset_s.bias, layer4.1.conv2.offset_l.weight, layer4.1.conv2.offset_l.bias, layer4.2.conv2.weight_diff, layer4.2.conv2.switch.weight, layer4.2.conv2.switch.bias, layer4.2.conv2.pre_context.weight, layer4.2.conv2.pre_context.bias, layer4.2.conv2.post_context.weight, layer4.2.conv2.post_context.bias, layer4.2.conv2.offset_s.weight, layer4.2.conv2.offset_s.bias, layer4.2.conv2.offset_l.weight, layer4.2.conv2.offset_l.bias

2022-04-04 02:47:23,744 - mmdet - INFO - load checkpoint from torchvision path: torchvision://resnet50
2022-04-04 02:47:23,988 - mmdet - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

missing keys in source state_dict: layer2.0.conv2.weight_diff, layer2.0.conv2.switch.weight, layer2.0.conv2.switch.bias, layer2.0.conv2.pre_context.weight, layer2.0.conv2.pre_context.bias, layer2.0.conv2.post_context.weight, layer2.0.conv2.post_context.bias, layer2.0.conv2.offset_s.weight, layer2.0.conv2.offset_s.bias, layer2.0.conv2.offset_l.weight, layer2.0.conv2.offset_l.bias, layer2.0.rfp_conv.weight, layer2.0.rfp_conv.bias, layer2.1.conv2.weight_diff, layer2.1.conv2.switch.weight, layer2.1.conv2.switch.bias, layer2.1.conv2.pre_context.weight, layer2.1.conv2.pre_context.bias, layer2.1.conv2.post_context.weight, layer2.1.conv2.post_context.bias, layer2.1.conv2.offset_s.weight, layer2.1.conv2.offset_s.bias, layer2.1.conv2.offset_l.weight, layer2.1.conv2.offset_l.bias, layer2.2.conv2.weight_diff, layer2.2.conv2.switch.weight, layer2.2.conv2.switch.bias, layer2.2.conv2.pre_context.weight, layer2.2.conv2.pre_context.bias, layer2.2.conv2.post_context.weight, layer2.2.conv2.post_context.bias, layer2.2.conv2.offset_s.weight, layer2.2.conv2.offset_s.bias, layer2.2.conv2.offset_l.weight, layer2.2.conv2.offset_l.bias, layer2.3.conv2.weight_diff, layer2.3.conv2.switch.weight, layer2.3.conv2.switch.bias, layer2.3.conv2.pre_context.weight, layer2.3.conv2.pre_context.bias, layer2.3.conv2.post_context.weight, layer2.3.conv2.post_context.bias, layer2.3.conv2.offset_s.weight, layer2.3.conv2.offset_s.bias, layer2.3.conv2.offset_l.weight, layer2.3.conv2.offset_l.bias, layer3.0.conv2.weight_diff, layer3.0.conv2.switch.weight, layer3.0.conv2.switch.bias, layer3.0.conv2.pre_context.weight, layer3.0.conv2.pre_context.bias, layer3.0.conv2.post_context.weight, layer3.0.conv2.post_context.bias, layer3.0.conv2.offset_s.weight, layer3.0.conv2.offset_s.bias, layer3.0.conv2.offset_l.weight, layer3.0.conv2.offset_l.bias, layer3.0.rfp_conv.weight, layer3.0.rfp_conv.bias, layer3.1.conv2.weight_diff, layer3.1.conv2.switch.weight, layer3.1.conv2.switch.bias, layer3.1.conv2.pre_context.weight, layer3.1.conv2.pre_context.bias, layer3.1.conv2.post_context.weight, layer3.1.conv2.post_context.bias, layer3.1.conv2.offset_s.weight, layer3.1.conv2.offset_s.bias, layer3.1.conv2.offset_l.weight, layer3.1.conv2.offset_l.bias, layer3.2.conv2.weight_diff, layer3.2.conv2.switch.weight, layer3.2.conv2.switch.bias, layer3.2.conv2.pre_context.weight, layer3.2.conv2.pre_context.bias, layer3.2.conv2.post_context.weight, layer3.2.conv2.post_context.bias, layer3.2.conv2.offset_s.weight, layer3.2.conv2.offset_s.bias, layer3.2.conv2.offset_l.weight, layer3.2.conv2.offset_l.bias, layer3.3.conv2.weight_diff, layer3.3.conv2.switch.weight, layer3.3.conv2.switch.bias, layer3.3.conv2.pre_context.weight, layer3.3.conv2.pre_context.bias, layer3.3.conv2.post_context.weight, layer3.3.conv2.post_context.bias, layer3.3.conv2.offset_s.weight, layer3.3.conv2.offset_s.bias, layer3.3.conv2.offset_l.weight, layer3.3.conv2.offset_l.bias, layer3.4.conv2.weight_diff, layer3.4.conv2.switch.weight, layer3.4.conv2.switch.bias, layer3.4.conv2.pre_context.weight, layer3.4.conv2.pre_context.bias, layer3.4.conv2.post_context.weight, layer3.4.conv2.post_context.bias, layer3.4.conv2.offset_s.weight, layer3.4.conv2.offset_s.bias, layer3.4.conv2.offset_l.weight, layer3.4.conv2.offset_l.bias, layer3.5.conv2.weight_diff, layer3.5.conv2.switch.weight, layer3.5.conv2.switch.bias, layer3.5.conv2.pre_context.weight, layer3.5.conv2.pre_context.bias, layer3.5.conv2.post_context.weight, layer3.5.conv2.post_context.bias, layer3.5.conv2.offset_s.weight, layer3.5.conv2.offset_s.bias, layer3.5.conv2.offset_l.weight, layer3.5.conv2.offset_l.bias, layer4.0.conv2.weight_diff, layer4.0.conv2.switch.weight, layer4.0.conv2.switch.bias, layer4.0.conv2.pre_context.weight, layer4.0.conv2.pre_context.bias, layer4.0.conv2.post_context.weight, layer4.0.conv2.post_context.bias, layer4.0.conv2.offset_s.weight, layer4.0.conv2.offset_s.bias, layer4.0.conv2.offset_l.weight, layer4.0.conv2.offset_l.bias, layer4.0.rfp_conv.weight, layer4.0.rfp_conv.bias, layer4.1.conv2.weight_diff, layer4.1.conv2.switch.weight, layer4.1.conv2.switch.bias, layer4.1.conv2.pre_context.weight, layer4.1.conv2.pre_context.bias, layer4.1.conv2.post_context.weight, layer4.1.conv2.post_context.bias, layer4.1.conv2.offset_s.weight, layer4.1.conv2.offset_s.bias, layer4.1.conv2.offset_l.weight, layer4.1.conv2.offset_l.bias, layer4.2.conv2.weight_diff, layer4.2.conv2.switch.weight, layer4.2.conv2.switch.bias, layer4.2.conv2.pre_context.weight, layer4.2.conv2.pre_context.bias, layer4.2.conv2.post_context.weight, layer4.2.conv2.post_context.bias, layer4.2.conv2.offset_s.weight, layer4.2.conv2.offset_s.bias, layer4.2.conv2.offset_l.weight, layer4.2.conv2.offset_l.bias

2022-04-04 02:47:24,013 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2022-04-04 02:47:24,021 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2022-04-04 02:47:24,125 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2022-04-04 02:47:24,230 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.conv2.weight_diff - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.conv2.weight_diff - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.conv2.weight_diff - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.conv1.weight - torch.Size([64, 3, 7, 7]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.downsample.1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.downsample.1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.downsample.1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.downsample.1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.rfp_conv.weight - torch.Size([512, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.rfp_conv.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.downsample.1.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.downsample.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.rfp_conv.weight - torch.Size([1024, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.rfp_conv.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.conv2.weight_diff - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.downsample.1.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.downsample.1.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.rfp_conv.weight - torch.Size([2048, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.rfp_conv.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.conv2.weight_diff - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.conv2.weight_diff - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_aspp.aspp.0.weight - torch.Size([64, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_aspp.aspp.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_aspp.aspp.1.weight - torch.Size([64, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_aspp.aspp.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_aspp.aspp.2.weight - torch.Size([64, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_aspp.aspp.2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_aspp.aspp.3.weight - torch.Size([64, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_aspp.aspp.3.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_weight.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_weight.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_cls.weight - torch.Size([11, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.0.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.0.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.0.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.1.fc_cls.weight - torch.Size([11, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.1.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.1.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.1.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.1.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.1.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.2.fc_cls.weight - torch.Size([11, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.2.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.2.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.2.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.2.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.2.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2022-04-04 02:47:28,965 - mmdet - INFO - load checkpoint from local path: /opt/ml/detection/SEUNGHYUN_WORKSPACE/my_mmdetection/work_dirs/detectors_cascade_rcnn_r50_1x/epoch_24.pth
2022-04-04 02:47:30,438 - mmdet - INFO - resumed epoch 24, iter 11712
2022-04-04 02:47:30,443 - mmdet - INFO - Start running, host: root@0a25b60abdd2, work_dir: /opt/ml/detection/SEUNGHYUN_WORKSPACE/my_mmdetection/work_dirs/detectors_cascade_rcnn_r50_1x
2022-04-04 02:47:30,444 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
2022-04-04 02:47:30,444 - mmdet - INFO - workflow: [('train', 1)], max: 36 epochs
2022-04-04 02:47:30,444 - mmdet - INFO - Checkpoints will be saved to /opt/ml/detection/SEUNGHYUN_WORKSPACE/my_mmdetection/work_dirs/detectors_cascade_rcnn_r50_1x by HardDiskBackend.
2022-04-04 02:49:39,817 - mmdet - INFO - Epoch [25][50/488]	lr: 2.575e-05, eta: 3:57:10, time: 2.451, data_time: 0.071, memory: 20819, loss_rpn_cls: 0.0137, loss_rpn_bbox: 0.0120, s0.loss_cls: 0.0924, s0.acc: 96.7983, s0.loss_bbox: 0.0552, s1.loss_cls: 0.0377, s1.acc: 97.5110, s1.loss_bbox: 0.0546, s2.loss_cls: 0.0184, s2.acc: 97.5461, s2.loss_bbox: 0.0348, loss: 0.3188
2022-04-04 02:51:39,519 - mmdet - INFO - Epoch [25][100/488]	lr: 2.575e-05, eta: 3:52:24, time: 2.394, data_time: 0.016, memory: 20819, loss_rpn_cls: 0.0129, loss_rpn_bbox: 0.0119, s0.loss_cls: 0.0918, s0.acc: 96.9536, s0.loss_bbox: 0.0504, s1.loss_cls: 0.0374, s1.acc: 97.5198, s1.loss_bbox: 0.0490, s2.loss_cls: 0.0181, s2.acc: 97.5572, s2.loss_bbox: 0.0307, loss: 0.3022
2022-04-04 02:53:39,319 - mmdet - INFO - Epoch [25][150/488]	lr: 2.575e-05, eta: 3:49:32, time: 2.396, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0122, loss_rpn_bbox: 0.0120, s0.loss_cls: 0.0946, s0.acc: 96.7896, s0.loss_bbox: 0.0562, s1.loss_cls: 0.0402, s1.acc: 97.3555, s1.loss_bbox: 0.0545, s2.loss_cls: 0.0199, s2.acc: 97.3232, s2.loss_bbox: 0.0350, loss: 0.3245
2022-04-04 02:55:39,563 - mmdet - INFO - Epoch [25][200/488]	lr: 2.575e-05, eta: 3:47:19, time: 2.405, data_time: 0.016, memory: 20819, loss_rpn_cls: 0.0118, loss_rpn_bbox: 0.0112, s0.loss_cls: 0.0921, s0.acc: 96.8594, s0.loss_bbox: 0.0537, s1.loss_cls: 0.0382, s1.acc: 97.4103, s1.loss_bbox: 0.0530, s2.loss_cls: 0.0187, s2.acc: 97.4322, s2.loss_bbox: 0.0334, loss: 0.3122
2022-04-04 02:57:39,127 - mmdet - INFO - Epoch [25][250/488]	lr: 2.575e-05, eta: 3:44:56, time: 2.391, data_time: 0.016, memory: 20819, loss_rpn_cls: 0.0130, loss_rpn_bbox: 0.0118, s0.loss_cls: 0.1018, s0.acc: 96.5874, s0.loss_bbox: 0.0589, s1.loss_cls: 0.0419, s1.acc: 97.2604, s1.loss_bbox: 0.0570, s2.loss_cls: 0.0203, s2.acc: 97.3294, s2.loss_bbox: 0.0365, loss: 0.3413
2022-04-04 02:59:38,698 - mmdet - INFO - Epoch [25][300/488]	lr: 2.575e-05, eta: 3:42:40, time: 2.391, data_time: 0.016, memory: 20819, loss_rpn_cls: 0.0112, loss_rpn_bbox: 0.0120, s0.loss_cls: 0.0926, s0.acc: 96.8525, s0.loss_bbox: 0.0529, s1.loss_cls: 0.0409, s1.acc: 97.2507, s1.loss_bbox: 0.0521, s2.loss_cls: 0.0196, s2.acc: 97.3389, s2.loss_bbox: 0.0329, loss: 0.3142
2022-04-04 03:01:38,679 - mmdet - INFO - Epoch [25][350/488]	lr: 2.575e-05, eta: 3:40:36, time: 2.400, data_time: 0.016, memory: 20819, loss_rpn_cls: 0.0120, loss_rpn_bbox: 0.0134, s0.loss_cls: 0.1042, s0.acc: 96.5957, s0.loss_bbox: 0.0587, s1.loss_cls: 0.0435, s1.acc: 97.1487, s1.loss_bbox: 0.0550, s2.loss_cls: 0.0206, s2.acc: 97.2835, s2.loss_bbox: 0.0353, loss: 0.3426
2022-04-04 03:03:38,600 - mmdet - INFO - Epoch [25][400/488]	lr: 2.575e-05, eta: 3:38:32, time: 2.398, data_time: 0.016, memory: 20819, loss_rpn_cls: 0.0144, loss_rpn_bbox: 0.0134, s0.loss_cls: 0.1056, s0.acc: 96.4458, s0.loss_bbox: 0.0573, s1.loss_cls: 0.0443, s1.acc: 97.0314, s1.loss_bbox: 0.0539, s2.loss_cls: 0.0210, s2.acc: 97.2014, s2.loss_bbox: 0.0355, loss: 0.3455
2022-04-04 03:05:39,229 - mmdet - INFO - Epoch [25][450/488]	lr: 2.575e-05, eta: 3:36:37, time: 2.413, data_time: 0.016, memory: 20819, loss_rpn_cls: 0.0127, loss_rpn_bbox: 0.0127, s0.loss_cls: 0.1069, s0.acc: 96.3511, s0.loss_bbox: 0.0600, s1.loss_cls: 0.0458, s1.acc: 96.8899, s1.loss_bbox: 0.0597, s2.loss_cls: 0.0225, s2.acc: 96.9078, s2.loss_bbox: 0.0377, loss: 0.3580
2022-04-04 03:07:10,922 - mmdet - INFO - Saving checkpoint at 25 epochs
2022-04-04 03:09:42,645 - mmdet - INFO - Evaluating bbox...
2022-04-04 03:09:46,543 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.393
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.531
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.410
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.009
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.078
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.460
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.520
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.520
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.520
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.027
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.242
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.585

2022-04-04 03:09:46,544 - mmdet - INFO - 
+---------------+-------+-------------+-------+------------+-------+
| category      | AP    | category    | AP    | category   | AP    |
+---------------+-------+-------------+-------+------------+-------+
| General trash | 0.226 | Paper       | 0.303 | Paper pack | 0.396 |
| Metal         | 0.441 | Glass       | 0.401 | Plastic    | 0.332 |
| Styrofoam     | 0.353 | Plastic bag | 0.517 | Battery    | 0.601 |
| Clothing      | 0.358 | None        | None  | None       | None  |
+---------------+-------+-------------+-------+------------+-------+
2022-04-04 03:09:46,595 - mmdet - INFO - Exp name: detectors_cascade_rcnn_r50_1x_coco.py
2022-04-04 03:09:46,596 - mmdet - INFO - Epoch(val) [25][982]	bbox_mAP: 0.3930, bbox_mAP_50: 0.5310, bbox_mAP_75: 0.4100, bbox_mAP_s: 0.0090, bbox_mAP_m: 0.0780, bbox_mAP_l: 0.4600, bbox_mAP_copypaste: 0.393 0.531 0.410 0.009 0.078 0.460
2022-04-04 03:11:49,496 - mmdet - INFO - Epoch [26][50/488]	lr: 2.211e-05, eta: 3:18:29, time: 2.458, data_time: 0.073, memory: 20819, loss_rpn_cls: 0.0147, loss_rpn_bbox: 0.0131, s0.loss_cls: 0.0999, s0.acc: 96.6279, s0.loss_bbox: 0.0570, s1.loss_cls: 0.0440, s1.acc: 97.0516, s1.loss_bbox: 0.0556, s2.loss_cls: 0.0215, s2.acc: 97.0705, s2.loss_bbox: 0.0367, loss: 0.3427
2022-04-04 03:13:49,847 - mmdet - INFO - Epoch [26][100/488]	lr: 2.211e-05, eta: 3:17:52, time: 2.407, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0113, loss_rpn_bbox: 0.0113, s0.loss_cls: 0.0941, s0.acc: 96.8472, s0.loss_bbox: 0.0550, s1.loss_cls: 0.0396, s1.acc: 97.4039, s1.loss_bbox: 0.0550, s2.loss_cls: 0.0189, s2.acc: 97.4168, s2.loss_bbox: 0.0349, loss: 0.3202
2022-04-04 03:15:49,834 - mmdet - INFO - Epoch [26][150/488]	lr: 2.211e-05, eta: 3:16:59, time: 2.400, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0119, loss_rpn_bbox: 0.0119, s0.loss_cls: 0.0948, s0.acc: 96.7349, s0.loss_bbox: 0.0574, s1.loss_cls: 0.0409, s1.acc: 97.1880, s1.loss_bbox: 0.0574, s2.loss_cls: 0.0194, s2.acc: 97.4131, s2.loss_bbox: 0.0355, loss: 0.3293
2022-04-04 03:17:49,947 - mmdet - INFO - Epoch [26][200/488]	lr: 2.211e-05, eta: 3:15:57, time: 2.402, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0120, loss_rpn_bbox: 0.0125, s0.loss_cls: 0.0920, s0.acc: 96.8877, s0.loss_bbox: 0.0543, s1.loss_cls: 0.0396, s1.acc: 97.3293, s1.loss_bbox: 0.0538, s2.loss_cls: 0.0190, s2.acc: 97.4097, s2.loss_bbox: 0.0353, loss: 0.3186
2022-04-04 03:19:49,282 - mmdet - INFO - Epoch [26][250/488]	lr: 2.211e-05, eta: 3:14:42, time: 2.387, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0107, loss_rpn_bbox: 0.0121, s0.loss_cls: 0.0935, s0.acc: 96.7681, s0.loss_bbox: 0.0552, s1.loss_cls: 0.0406, s1.acc: 97.2145, s1.loss_bbox: 0.0538, s2.loss_cls: 0.0190, s2.acc: 97.3070, s2.loss_bbox: 0.0340, loss: 0.3189
2022-04-04 03:21:48,942 - mmdet - INFO - Epoch [26][300/488]	lr: 2.211e-05, eta: 3:13:24, time: 2.393, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0119, loss_rpn_bbox: 0.0124, s0.loss_cls: 0.0931, s0.acc: 96.8179, s0.loss_bbox: 0.0551, s1.loss_cls: 0.0402, s1.acc: 97.2863, s1.loss_bbox: 0.0545, s2.loss_cls: 0.0190, s2.acc: 97.4700, s2.loss_bbox: 0.0352, loss: 0.3215
2022-04-04 03:23:49,319 - mmdet - INFO - Epoch [26][350/488]	lr: 2.211e-05, eta: 3:12:04, time: 2.408, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0119, loss_rpn_bbox: 0.0122, s0.loss_cls: 0.1007, s0.acc: 96.6138, s0.loss_bbox: 0.0562, s1.loss_cls: 0.0427, s1.acc: 97.1146, s1.loss_bbox: 0.0540, s2.loss_cls: 0.0205, s2.acc: 97.2170, s2.loss_bbox: 0.0342, loss: 0.3324
2022-04-04 03:25:49,125 - mmdet - INFO - Epoch [26][400/488]	lr: 2.211e-05, eta: 3:10:37, time: 2.396, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0140, loss_rpn_bbox: 0.0139, s0.loss_cls: 0.1091, s0.acc: 96.3403, s0.loss_bbox: 0.0618, s1.loss_cls: 0.0475, s1.acc: 96.8147, s1.loss_bbox: 0.0588, s2.loss_cls: 0.0229, s2.acc: 96.9412, s2.loss_bbox: 0.0384, loss: 0.3664
2022-04-04 03:27:49,472 - mmdet - INFO - Epoch [26][450/488]	lr: 2.211e-05, eta: 3:09:10, time: 2.407, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0124, loss_rpn_bbox: 0.0117, s0.loss_cls: 0.0945, s0.acc: 96.7881, s0.loss_bbox: 0.0573, s1.loss_cls: 0.0409, s1.acc: 97.1510, s1.loss_bbox: 0.0553, s2.loss_cls: 0.0192, s2.acc: 97.3685, s2.loss_bbox: 0.0365, loss: 0.3279
2022-04-04 03:29:21,058 - mmdet - INFO - Saving checkpoint at 26 epochs
2022-04-04 03:31:53,284 - mmdet - INFO - Evaluating bbox...
2022-04-04 03:31:56,604 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.397
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.536
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.415
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.008
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.075
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.466
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.521
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.521
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.521
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.026
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.197
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.590

2022-04-04 03:31:56,605 - mmdet - INFO - 
+---------------+-------+-------------+-------+------------+-------+
| category      | AP    | category    | AP    | category   | AP    |
+---------------+-------+-------------+-------+------------+-------+
| General trash | 0.224 | Paper       | 0.302 | Paper pack | 0.423 |
| Metal         | 0.431 | Glass       | 0.393 | Plastic    | 0.332 |
| Styrofoam     | 0.384 | Plastic bag | 0.534 | Battery    | 0.578 |
| Clothing      | 0.368 | None        | None  | None       | None  |
+---------------+-------+-------------+-------+------------+-------+
2022-04-04 03:31:56,648 - mmdet - INFO - Exp name: detectors_cascade_rcnn_r50_1x_coco.py
2022-04-04 03:31:56,648 - mmdet - INFO - Epoch(val) [26][982]	bbox_mAP: 0.3970, bbox_mAP_50: 0.5360, bbox_mAP_75: 0.4150, bbox_mAP_s: 0.0080, bbox_mAP_m: 0.0750, bbox_mAP_l: 0.4660, bbox_mAP_copypaste: 0.397 0.536 0.415 0.008 0.075 0.466
2022-04-04 03:33:59,765 - mmdet - INFO - Epoch [27][50/488]	lr: 1.868e-05, eta: 2:59:30, time: 2.462, data_time: 0.073, memory: 20819, loss_rpn_cls: 0.0107, loss_rpn_bbox: 0.0123, s0.loss_cls: 0.0887, s0.acc: 96.9448, s0.loss_bbox: 0.0523, s1.loss_cls: 0.0383, s1.acc: 97.4472, s1.loss_bbox: 0.0500, s2.loss_cls: 0.0186, s2.acc: 97.4412, s2.loss_bbox: 0.0314, loss: 0.3022
2022-04-04 03:36:00,185 - mmdet - INFO - Epoch [27][100/488]	lr: 1.868e-05, eta: 2:58:18, time: 2.408, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0105, loss_rpn_bbox: 0.0114, s0.loss_cls: 0.0819, s0.acc: 97.2002, s0.loss_bbox: 0.0503, s1.loss_cls: 0.0349, s1.acc: 97.6681, s1.loss_bbox: 0.0507, s2.loss_cls: 0.0173, s2.acc: 97.5855, s2.loss_bbox: 0.0333, loss: 0.2903
2022-04-04 03:37:59,915 - mmdet - INFO - Epoch [27][150/488]	lr: 1.868e-05, eta: 2:56:59, time: 2.395, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0116, loss_rpn_bbox: 0.0112, s0.loss_cls: 0.0904, s0.acc: 96.8716, s0.loss_bbox: 0.0531, s1.loss_cls: 0.0388, s1.acc: 97.4163, s1.loss_bbox: 0.0551, s2.loss_cls: 0.0185, s2.acc: 97.4465, s2.loss_bbox: 0.0365, loss: 0.3152
2022-04-04 03:39:59,896 - mmdet - INFO - Epoch [27][200/488]	lr: 1.868e-05, eta: 2:55:38, time: 2.400, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0141, loss_rpn_bbox: 0.0127, s0.loss_cls: 0.0949, s0.acc: 96.7490, s0.loss_bbox: 0.0557, s1.loss_cls: 0.0399, s1.acc: 97.3080, s1.loss_bbox: 0.0556, s2.loss_cls: 0.0194, s2.acc: 97.3309, s2.loss_bbox: 0.0354, loss: 0.3278
2022-04-04 03:42:00,105 - mmdet - INFO - Epoch [27][250/488]	lr: 1.868e-05, eta: 2:54:14, time: 2.404, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0146, loss_rpn_bbox: 0.0139, s0.loss_cls: 0.0973, s0.acc: 96.7515, s0.loss_bbox: 0.0592, s1.loss_cls: 0.0410, s1.acc: 97.3153, s1.loss_bbox: 0.0554, s2.loss_cls: 0.0193, s2.acc: 97.4970, s2.loss_bbox: 0.0345, loss: 0.3351
2022-04-04 03:44:00,367 - mmdet - INFO - Epoch [27][300/488]	lr: 1.868e-05, eta: 2:52:47, time: 2.405, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0130, loss_rpn_bbox: 0.0112, s0.loss_cls: 0.0816, s0.acc: 97.1841, s0.loss_bbox: 0.0490, s1.loss_cls: 0.0345, s1.acc: 97.6596, s1.loss_bbox: 0.0489, s2.loss_cls: 0.0167, s2.acc: 97.7214, s2.loss_bbox: 0.0310, loss: 0.2860
2022-04-04 03:46:00,304 - mmdet - INFO - Epoch [27][350/488]	lr: 1.868e-05, eta: 2:51:17, time: 2.399, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0119, loss_rpn_bbox: 0.0114, s0.loss_cls: 0.0892, s0.acc: 96.9927, s0.loss_bbox: 0.0571, s1.loss_cls: 0.0369, s1.acc: 97.5031, s1.loss_bbox: 0.0564, s2.loss_cls: 0.0173, s2.acc: 97.6092, s2.loss_bbox: 0.0363, loss: 0.3166
2022-04-04 03:48:00,338 - mmdet - INFO - Epoch [27][400/488]	lr: 1.868e-05, eta: 2:49:45, time: 2.401, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0127, loss_rpn_bbox: 0.0118, s0.loss_cls: 0.0923, s0.acc: 96.8281, s0.loss_bbox: 0.0543, s1.loss_cls: 0.0387, s1.acc: 97.3796, s1.loss_bbox: 0.0520, s2.loss_cls: 0.0190, s2.acc: 97.4505, s2.loss_bbox: 0.0341, loss: 0.3149
2022-04-04 03:50:00,399 - mmdet - INFO - Epoch [27][450/488]	lr: 1.868e-05, eta: 2:48:11, time: 2.401, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0122, loss_rpn_bbox: 0.0118, s0.loss_cls: 0.0965, s0.acc: 96.6846, s0.loss_bbox: 0.0560, s1.loss_cls: 0.0412, s1.acc: 97.1946, s1.loss_bbox: 0.0544, s2.loss_cls: 0.0197, s2.acc: 97.2943, s2.loss_bbox: 0.0338, loss: 0.3257
2022-04-04 03:51:31,358 - mmdet - INFO - Saving checkpoint at 27 epochs
2022-04-04 03:54:02,925 - mmdet - INFO - Evaluating bbox...
2022-04-04 03:54:06,102 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.406
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.547
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.428
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.005
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.081
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.472
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.523
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.523
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.523
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.028
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.234
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.587

2022-04-04 03:54:06,103 - mmdet - INFO - 
+---------------+-------+-------------+-------+------------+-------+
| category      | AP    | category    | AP    | category   | AP    |
+---------------+-------+-------------+-------+------------+-------+
| General trash | 0.220 | Paper       | 0.308 | Paper pack | 0.419 |
| Metal         | 0.437 | Glass       | 0.414 | Plastic    | 0.337 |
| Styrofoam     | 0.392 | Plastic bag | 0.542 | Battery    | 0.649 |
| Clothing      | 0.344 | None        | None  | None       | None  |
+---------------+-------+-------------+-------+------------+-------+
2022-04-04 03:54:06,137 - mmdet - INFO - Exp name: detectors_cascade_rcnn_r50_1x_coco.py
2022-04-04 03:54:06,137 - mmdet - INFO - Epoch(val) [27][982]	bbox_mAP: 0.4060, bbox_mAP_50: 0.5470, bbox_mAP_75: 0.4280, bbox_mAP_s: 0.0050, bbox_mAP_m: 0.0810, bbox_mAP_l: 0.4720, bbox_mAP_copypaste: 0.406 0.547 0.428 0.005 0.081 0.472
2022-04-04 03:56:08,847 - mmdet - INFO - Epoch [28][50/488]	lr: 1.550e-05, eta: 2:41:08, time: 2.454, data_time: 0.072, memory: 20819, loss_rpn_cls: 0.0124, loss_rpn_bbox: 0.0127, s0.loss_cls: 0.0915, s0.acc: 96.9453, s0.loss_bbox: 0.0544, s1.loss_cls: 0.0374, s1.acc: 97.5400, s1.loss_bbox: 0.0538, s2.loss_cls: 0.0183, s2.acc: 97.6556, s2.loss_bbox: 0.0353, loss: 0.3158
2022-04-04 03:58:09,470 - mmdet - INFO - Epoch [28][100/488]	lr: 1.550e-05, eta: 2:39:42, time: 2.412, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0106, loss_rpn_bbox: 0.0116, s0.loss_cls: 0.0838, s0.acc: 97.0884, s0.loss_bbox: 0.0479, s1.loss_cls: 0.0351, s1.acc: 97.5586, s1.loss_bbox: 0.0468, s2.loss_cls: 0.0169, s2.acc: 97.6379, s2.loss_bbox: 0.0311, loss: 0.2838
2022-04-04 04:00:09,655 - mmdet - INFO - Epoch [28][150/488]	lr: 1.550e-05, eta: 2:38:13, time: 2.404, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0136, loss_rpn_bbox: 0.0111, s0.loss_cls: 0.0922, s0.acc: 96.8481, s0.loss_bbox: 0.0532, s1.loss_cls: 0.0382, s1.acc: 97.3794, s1.loss_bbox: 0.0512, s2.loss_cls: 0.0180, s2.acc: 97.4518, s2.loss_bbox: 0.0333, loss: 0.3109
2022-04-04 04:02:09,506 - mmdet - INFO - Epoch [28][200/488]	lr: 1.550e-05, eta: 2:36:41, time: 2.397, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0112, loss_rpn_bbox: 0.0126, s0.loss_cls: 0.0926, s0.acc: 96.8159, s0.loss_bbox: 0.0534, s1.loss_cls: 0.0390, s1.acc: 97.3711, s1.loss_bbox: 0.0516, s2.loss_cls: 0.0190, s2.acc: 97.5087, s2.loss_bbox: 0.0342, loss: 0.3136
2022-04-04 04:04:09,664 - mmdet - INFO - Epoch [28][250/488]	lr: 1.550e-05, eta: 2:35:08, time: 2.403, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0115, loss_rpn_bbox: 0.0114, s0.loss_cls: 0.0828, s0.acc: 97.1270, s0.loss_bbox: 0.0499, s1.loss_cls: 0.0351, s1.acc: 97.5988, s1.loss_bbox: 0.0480, s2.loss_cls: 0.0174, s2.acc: 97.6278, s2.loss_bbox: 0.0310, loss: 0.2872
2022-04-04 04:06:09,385 - mmdet - INFO - Epoch [28][300/488]	lr: 1.550e-05, eta: 2:33:33, time: 2.394, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0093, loss_rpn_bbox: 0.0108, s0.loss_cls: 0.0862, s0.acc: 97.0894, s0.loss_bbox: 0.0503, s1.loss_cls: 0.0354, s1.acc: 97.6318, s1.loss_bbox: 0.0506, s2.loss_cls: 0.0171, s2.acc: 97.6627, s2.loss_bbox: 0.0338, loss: 0.2936
2022-04-04 04:08:08,484 - mmdet - INFO - Epoch [28][350/488]	lr: 1.550e-05, eta: 2:31:55, time: 2.382, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0103, loss_rpn_bbox: 0.0115, s0.loss_cls: 0.0849, s0.acc: 97.1196, s0.loss_bbox: 0.0508, s1.loss_cls: 0.0362, s1.acc: 97.5569, s1.loss_bbox: 0.0474, s2.loss_cls: 0.0174, s2.acc: 97.5872, s2.loss_bbox: 0.0306, loss: 0.2891
2022-04-04 04:10:08,380 - mmdet - INFO - Epoch [28][400/488]	lr: 1.550e-05, eta: 2:30:17, time: 2.398, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0107, loss_rpn_bbox: 0.0103, s0.loss_cls: 0.0902, s0.acc: 96.9268, s0.loss_bbox: 0.0530, s1.loss_cls: 0.0377, s1.acc: 97.5130, s1.loss_bbox: 0.0527, s2.loss_cls: 0.0180, s2.acc: 97.5315, s2.loss_bbox: 0.0350, loss: 0.3076
2022-04-04 04:12:08,430 - mmdet - INFO - Epoch [28][450/488]	lr: 1.550e-05, eta: 2:28:39, time: 2.401, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0122, loss_rpn_bbox: 0.0115, s0.loss_cls: 0.0960, s0.acc: 96.7798, s0.loss_bbox: 0.0581, s1.loss_cls: 0.0406, s1.acc: 97.2722, s1.loss_bbox: 0.0582, s2.loss_cls: 0.0192, s2.acc: 97.4025, s2.loss_bbox: 0.0384, loss: 0.3342
2022-04-04 04:13:39,521 - mmdet - INFO - Saving checkpoint at 28 epochs
2022-04-04 04:16:11,798 - mmdet - INFO - Evaluating bbox...
2022-04-04 04:16:15,182 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.401
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.543
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.415
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.011
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.076
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.468
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.527
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.527
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.527
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.026
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.227
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.593

2022-04-04 04:16:15,183 - mmdet - INFO - 
+---------------+-------+-------------+-------+------------+-------+
| category      | AP    | category    | AP    | category   | AP    |
+---------------+-------+-------------+-------+------------+-------+
| General trash | 0.220 | Paper       | 0.307 | Paper pack | 0.417 |
| Metal         | 0.416 | Glass       | 0.406 | Plastic    | 0.347 |
| Styrofoam     | 0.388 | Plastic bag | 0.542 | Battery    | 0.624 |
| Clothing      | 0.340 | None        | None  | None       | None  |
+---------------+-------+-------------+-------+------------+-------+
2022-04-04 04:16:15,219 - mmdet - INFO - Exp name: detectors_cascade_rcnn_r50_1x_coco.py
2022-04-04 04:16:15,219 - mmdet - INFO - Epoch(val) [28][982]	bbox_mAP: 0.4010, bbox_mAP_50: 0.5430, bbox_mAP_75: 0.4150, bbox_mAP_s: 0.0110, bbox_mAP_m: 0.0760, bbox_mAP_l: 0.4680, bbox_mAP_copypaste: 0.401 0.543 0.415 0.011 0.076 0.468
2022-04-04 04:18:18,249 - mmdet - INFO - Epoch [29][50/488]	lr: 1.258e-05, eta: 2:22:53, time: 2.460, data_time: 0.073, memory: 20819, loss_rpn_cls: 0.0128, loss_rpn_bbox: 0.0121, s0.loss_cls: 0.0902, s0.acc: 96.9619, s0.loss_bbox: 0.0528, s1.loss_cls: 0.0378, s1.acc: 97.5015, s1.loss_bbox: 0.0535, s2.loss_cls: 0.0178, s2.acc: 97.6475, s2.loss_bbox: 0.0340, loss: 0.3109
2022-04-04 04:20:19,087 - mmdet - INFO - Epoch [29][100/488]	lr: 1.258e-05, eta: 2:21:20, time: 2.417, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0095, loss_rpn_bbox: 0.0105, s0.loss_cls: 0.0812, s0.acc: 97.2285, s0.loss_bbox: 0.0496, s1.loss_cls: 0.0331, s1.acc: 97.7840, s1.loss_bbox: 0.0502, s2.loss_cls: 0.0160, s2.acc: 97.8166, s2.loss_bbox: 0.0340, loss: 0.2840
2022-04-04 04:22:18,230 - mmdet - INFO - Epoch [29][150/488]	lr: 1.258e-05, eta: 2:19:42, time: 2.383, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0087, loss_rpn_bbox: 0.0101, s0.loss_cls: 0.0847, s0.acc: 97.0518, s0.loss_bbox: 0.0495, s1.loss_cls: 0.0346, s1.acc: 97.6778, s1.loss_bbox: 0.0483, s2.loss_cls: 0.0163, s2.acc: 97.7868, s2.loss_bbox: 0.0321, loss: 0.2842
2022-04-04 04:24:18,228 - mmdet - INFO - Epoch [29][200/488]	lr: 1.258e-05, eta: 2:18:05, time: 2.400, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0116, loss_rpn_bbox: 0.0108, s0.loss_cls: 0.0881, s0.acc: 96.9590, s0.loss_bbox: 0.0540, s1.loss_cls: 0.0369, s1.acc: 97.4872, s1.loss_bbox: 0.0540, s2.loss_cls: 0.0176, s2.acc: 97.6224, s2.loss_bbox: 0.0344, loss: 0.3075
2022-04-04 04:26:17,697 - mmdet - INFO - Epoch [29][250/488]	lr: 1.258e-05, eta: 2:16:26, time: 2.389, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0112, loss_rpn_bbox: 0.0115, s0.loss_cls: 0.0824, s0.acc: 97.1465, s0.loss_bbox: 0.0509, s1.loss_cls: 0.0337, s1.acc: 97.7477, s1.loss_bbox: 0.0491, s2.loss_cls: 0.0161, s2.acc: 97.8128, s2.loss_bbox: 0.0325, loss: 0.2873
2022-04-04 04:28:17,017 - mmdet - INFO - Epoch [29][300/488]	lr: 1.258e-05, eta: 2:14:45, time: 2.386, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0089, loss_rpn_bbox: 0.0108, s0.loss_cls: 0.0809, s0.acc: 97.2314, s0.loss_bbox: 0.0495, s1.loss_cls: 0.0331, s1.acc: 97.8026, s1.loss_bbox: 0.0486, s2.loss_cls: 0.0157, s2.acc: 97.8415, s2.loss_bbox: 0.0330, loss: 0.2806
2022-04-04 04:30:17,290 - mmdet - INFO - Epoch [29][350/488]	lr: 1.258e-05, eta: 2:13:06, time: 2.405, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0116, loss_rpn_bbox: 0.0130, s0.loss_cls: 0.0893, s0.acc: 96.9932, s0.loss_bbox: 0.0512, s1.loss_cls: 0.0378, s1.acc: 97.4898, s1.loss_bbox: 0.0507, s2.loss_cls: 0.0182, s2.acc: 97.5484, s2.loss_bbox: 0.0334, loss: 0.3052
2022-04-04 04:32:16,499 - mmdet - INFO - Epoch [29][400/488]	lr: 1.258e-05, eta: 2:11:24, time: 2.384, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0107, loss_rpn_bbox: 0.0116, s0.loss_cls: 0.0846, s0.acc: 97.0488, s0.loss_bbox: 0.0499, s1.loss_cls: 0.0346, s1.acc: 97.6258, s1.loss_bbox: 0.0501, s2.loss_cls: 0.0166, s2.acc: 97.7539, s2.loss_bbox: 0.0343, loss: 0.2924
2022-04-04 04:34:16,803 - mmdet - INFO - Epoch [29][450/488]	lr: 1.258e-05, eta: 2:09:42, time: 2.406, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0106, loss_rpn_bbox: 0.0103, s0.loss_cls: 0.0872, s0.acc: 96.9556, s0.loss_bbox: 0.0512, s1.loss_cls: 0.0364, s1.acc: 97.4879, s1.loss_bbox: 0.0516, s2.loss_cls: 0.0177, s2.acc: 97.4873, s2.loss_bbox: 0.0338, loss: 0.2988
2022-04-04 04:35:47,842 - mmdet - INFO - Saving checkpoint at 29 epochs
2022-04-04 04:38:20,470 - mmdet - INFO - Evaluating bbox...
2022-04-04 04:38:23,818 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.401
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.538
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.424
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.009
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.106
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.468
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.519
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.519
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.519
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.029
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.219
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.585

2022-04-04 04:38:23,819 - mmdet - INFO - 
+---------------+-------+-------------+-------+------------+-------+
| category      | AP    | category    | AP    | category   | AP    |
+---------------+-------+-------------+-------+------------+-------+
| General trash | 0.221 | Paper       | 0.313 | Paper pack | 0.420 |
| Metal         | 0.436 | Glass       | 0.400 | Plastic    | 0.343 |
| Styrofoam     | 0.376 | Plastic bag | 0.531 | Battery    | 0.631 |
| Clothing      | 0.342 | None        | None  | None       | None  |
+---------------+-------+-------------+-------+------------+-------+
2022-04-04 04:38:23,861 - mmdet - INFO - Exp name: detectors_cascade_rcnn_r50_1x_coco.py
2022-04-04 04:38:23,861 - mmdet - INFO - Epoch(val) [29][982]	bbox_mAP: 0.4010, bbox_mAP_50: 0.5380, bbox_mAP_75: 0.4240, bbox_mAP_s: 0.0090, bbox_mAP_m: 0.1060, bbox_mAP_l: 0.4680, bbox_mAP_copypaste: 0.401 0.538 0.424 0.009 0.106 0.468
2022-04-04 04:40:27,135 - mmdet - INFO - Epoch [30][50/488]	lr: 9.952e-06, eta: 2:04:43, time: 2.465, data_time: 0.073, memory: 20819, loss_rpn_cls: 0.0105, loss_rpn_bbox: 0.0125, s0.loss_cls: 0.0940, s0.acc: 96.8096, s0.loss_bbox: 0.0574, s1.loss_cls: 0.0385, s1.acc: 97.4636, s1.loss_bbox: 0.0567, s2.loss_cls: 0.0185, s2.acc: 97.5241, s2.loss_bbox: 0.0369, loss: 0.3250
2022-04-04 04:42:28,226 - mmdet - INFO - Epoch [30][100/488]	lr: 9.952e-06, eta: 2:03:04, time: 2.422, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0112, loss_rpn_bbox: 0.0116, s0.loss_cls: 0.0831, s0.acc: 97.0952, s0.loss_bbox: 0.0518, s1.loss_cls: 0.0336, s1.acc: 97.6794, s1.loss_bbox: 0.0513, s2.loss_cls: 0.0159, s2.acc: 97.7336, s2.loss_bbox: 0.0339, loss: 0.2925
2022-04-04 04:44:28,103 - mmdet - INFO - Epoch [30][150/488]	lr: 9.952e-06, eta: 2:01:24, time: 2.397, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0088, loss_rpn_bbox: 0.0101, s0.loss_cls: 0.0721, s0.acc: 97.4448, s0.loss_bbox: 0.0432, s1.loss_cls: 0.0285, s1.acc: 98.0089, s1.loss_bbox: 0.0422, s2.loss_cls: 0.0140, s2.acc: 98.0847, s2.loss_bbox: 0.0280, loss: 0.2470
2022-04-04 04:46:27,818 - mmdet - INFO - Epoch [30][200/488]	lr: 9.952e-06, eta: 1:59:42, time: 2.394, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0094, loss_rpn_bbox: 0.0094, s0.loss_cls: 0.0774, s0.acc: 97.3311, s0.loss_bbox: 0.0461, s1.loss_cls: 0.0323, s1.acc: 97.8074, s1.loss_bbox: 0.0466, s2.loss_cls: 0.0153, s2.acc: 97.9158, s2.loss_bbox: 0.0321, loss: 0.2686
2022-04-04 04:48:27,465 - mmdet - INFO - Epoch [30][250/488]	lr: 9.952e-06, eta: 1:58:00, time: 2.393, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0107, loss_rpn_bbox: 0.0125, s0.loss_cls: 0.0902, s0.acc: 96.8535, s0.loss_bbox: 0.0555, s1.loss_cls: 0.0368, s1.acc: 97.5326, s1.loss_bbox: 0.0550, s2.loss_cls: 0.0171, s2.acc: 97.7029, s2.loss_bbox: 0.0358, loss: 0.3136
2022-04-04 04:50:28,075 - mmdet - INFO - Epoch [30][300/488]	lr: 9.952e-06, eta: 1:56:18, time: 2.412, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0102, loss_rpn_bbox: 0.0123, s0.loss_cls: 0.0831, s0.acc: 97.1045, s0.loss_bbox: 0.0510, s1.loss_cls: 0.0351, s1.acc: 97.6256, s1.loss_bbox: 0.0510, s2.loss_cls: 0.0170, s2.acc: 97.6657, s2.loss_bbox: 0.0323, loss: 0.2919
2022-04-04 04:52:27,962 - mmdet - INFO - Epoch [30][350/488]	lr: 9.952e-06, eta: 1:54:35, time: 2.398, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0123, loss_rpn_bbox: 0.0111, s0.loss_cls: 0.0854, s0.acc: 97.0396, s0.loss_bbox: 0.0502, s1.loss_cls: 0.0366, s1.acc: 97.5342, s1.loss_bbox: 0.0497, s2.loss_cls: 0.0172, s2.acc: 97.6554, s2.loss_bbox: 0.0328, loss: 0.2952
2022-04-04 04:54:28,584 - mmdet - INFO - Epoch [30][400/488]	lr: 9.952e-06, eta: 1:52:52, time: 2.412, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0107, loss_rpn_bbox: 0.0105, s0.loss_cls: 0.0803, s0.acc: 97.2607, s0.loss_bbox: 0.0470, s1.loss_cls: 0.0335, s1.acc: 97.7171, s1.loss_bbox: 0.0477, s2.loss_cls: 0.0160, s2.acc: 97.7983, s2.loss_bbox: 0.0315, loss: 0.2773
2022-04-04 04:56:28,478 - mmdet - INFO - Epoch [30][450/488]	lr: 9.952e-06, eta: 1:51:07, time: 2.398, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0111, loss_rpn_bbox: 0.0114, s0.loss_cls: 0.0854, s0.acc: 97.0479, s0.loss_bbox: 0.0530, s1.loss_cls: 0.0355, s1.acc: 97.5743, s1.loss_bbox: 0.0516, s2.loss_cls: 0.0167, s2.acc: 97.7153, s2.loss_bbox: 0.0323, loss: 0.2971
2022-04-04 04:57:59,799 - mmdet - INFO - Saving checkpoint at 30 epochs
2022-04-04 05:00:31,114 - mmdet - INFO - Evaluating bbox...
2022-04-04 05:00:34,321 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.408
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.549
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.431
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.006
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.107
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.476
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.524
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.524
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.524
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.032
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.230
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.591

2022-04-04 05:00:34,323 - mmdet - INFO - 
+---------------+-------+-------------+-------+------------+-------+
| category      | AP    | category    | AP    | category   | AP    |
+---------------+-------+-------------+-------+------------+-------+
| General trash | 0.221 | Paper       | 0.303 | Paper pack | 0.431 |
| Metal         | 0.436 | Glass       | 0.412 | Plastic    | 0.350 |
| Styrofoam     | 0.394 | Plastic bag | 0.528 | Battery    | 0.658 |
| Clothing      | 0.347 | None        | None  | None       | None  |
+---------------+-------+-------------+-------+------------+-------+
2022-04-04 05:00:34,367 - mmdet - INFO - Exp name: detectors_cascade_rcnn_r50_1x_coco.py
2022-04-04 05:00:34,367 - mmdet - INFO - Epoch(val) [30][982]	bbox_mAP: 0.4080, bbox_mAP_50: 0.5490, bbox_mAP_75: 0.4310, bbox_mAP_s: 0.0060, bbox_mAP_m: 0.1070, bbox_mAP_l: 0.4760, bbox_mAP_copypaste: 0.408 0.549 0.431 0.006 0.107 0.476
2022-04-04 05:02:37,422 - mmdet - INFO - Epoch [31][50/488]	lr: 7.632e-06, eta: 1:46:37, time: 2.461, data_time: 0.073, memory: 20819, loss_rpn_cls: 0.0115, loss_rpn_bbox: 0.0122, s0.loss_cls: 0.0862, s0.acc: 97.0083, s0.loss_bbox: 0.0539, s1.loss_cls: 0.0357, s1.acc: 97.5375, s1.loss_bbox: 0.0541, s2.loss_cls: 0.0172, s2.acc: 97.5657, s2.loss_bbox: 0.0352, loss: 0.3060
2022-04-04 05:04:37,185 - mmdet - INFO - Epoch [31][100/488]	lr: 7.632e-06, eta: 1:44:54, time: 2.395, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0111, loss_rpn_bbox: 0.0118, s0.loss_cls: 0.0856, s0.acc: 97.0151, s0.loss_bbox: 0.0509, s1.loss_cls: 0.0349, s1.acc: 97.6672, s1.loss_bbox: 0.0497, s2.loss_cls: 0.0163, s2.acc: 97.6838, s2.loss_bbox: 0.0319, loss: 0.2921
2022-04-04 05:06:37,887 - mmdet - INFO - Epoch [31][150/488]	lr: 7.632e-06, eta: 1:43:11, time: 2.414, data_time: 0.019, memory: 20819, loss_rpn_cls: 0.0110, loss_rpn_bbox: 0.0112, s0.loss_cls: 0.0869, s0.acc: 97.0083, s0.loss_bbox: 0.0529, s1.loss_cls: 0.0360, s1.acc: 97.6062, s1.loss_bbox: 0.0500, s2.loss_cls: 0.0175, s2.acc: 97.6944, s2.loss_bbox: 0.0327, loss: 0.2982
2022-04-04 05:08:38,211 - mmdet - INFO - Epoch [31][200/488]	lr: 7.632e-06, eta: 1:41:28, time: 2.406, data_time: 0.019, memory: 20819, loss_rpn_cls: 0.0111, loss_rpn_bbox: 0.0119, s0.loss_cls: 0.0818, s0.acc: 97.1899, s0.loss_bbox: 0.0518, s1.loss_cls: 0.0335, s1.acc: 97.7215, s1.loss_bbox: 0.0529, s2.loss_cls: 0.0157, s2.acc: 97.8668, s2.loss_bbox: 0.0346, loss: 0.2933
2022-04-04 05:10:39,003 - mmdet - INFO - Epoch [31][250/488]	lr: 7.632e-06, eta: 1:39:44, time: 2.416, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0107, loss_rpn_bbox: 0.0104, s0.loss_cls: 0.0774, s0.acc: 97.3169, s0.loss_bbox: 0.0472, s1.loss_cls: 0.0330, s1.acc: 97.7592, s1.loss_bbox: 0.0471, s2.loss_cls: 0.0158, s2.acc: 97.8190, s2.loss_bbox: 0.0319, loss: 0.2736
2022-04-04 05:12:39,332 - mmdet - INFO - Epoch [31][300/488]	lr: 7.632e-06, eta: 1:37:59, time: 2.407, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0093, loss_rpn_bbox: 0.0112, s0.loss_cls: 0.0834, s0.acc: 97.1538, s0.loss_bbox: 0.0477, s1.loss_cls: 0.0344, s1.acc: 97.7196, s1.loss_bbox: 0.0444, s2.loss_cls: 0.0166, s2.acc: 97.7930, s2.loss_bbox: 0.0292, loss: 0.2761
2022-04-04 05:14:39,140 - mmdet - INFO - Epoch [31][350/488]	lr: 7.632e-06, eta: 1:36:13, time: 2.396, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0094, loss_rpn_bbox: 0.0116, s0.loss_cls: 0.0762, s0.acc: 97.3550, s0.loss_bbox: 0.0479, s1.loss_cls: 0.0299, s1.acc: 97.9575, s1.loss_bbox: 0.0458, s2.loss_cls: 0.0137, s2.acc: 98.0889, s2.loss_bbox: 0.0300, loss: 0.2646
2022-04-04 05:16:39,410 - mmdet - INFO - Epoch [31][400/488]	lr: 7.632e-06, eta: 1:34:28, time: 2.405, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0091, loss_rpn_bbox: 0.0100, s0.loss_cls: 0.0764, s0.acc: 97.3164, s0.loss_bbox: 0.0483, s1.loss_cls: 0.0308, s1.acc: 97.9009, s1.loss_bbox: 0.0492, s2.loss_cls: 0.0146, s2.acc: 98.0347, s2.loss_bbox: 0.0327, loss: 0.2711
2022-04-04 05:18:38,969 - mmdet - INFO - Epoch [31][450/488]	lr: 7.632e-06, eta: 1:32:41, time: 2.391, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0098, loss_rpn_bbox: 0.0090, s0.loss_cls: 0.0694, s0.acc: 97.6445, s0.loss_bbox: 0.0409, s1.loss_cls: 0.0294, s1.acc: 98.0268, s1.loss_bbox: 0.0423, s2.loss_cls: 0.0142, s2.acc: 98.1230, s2.loss_bbox: 0.0279, loss: 0.2428
2022-04-04 05:20:10,047 - mmdet - INFO - Saving checkpoint at 31 epochs
2022-04-04 05:22:42,148 - mmdet - INFO - Evaluating bbox...
2022-04-04 05:22:45,606 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.412
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.550
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.435
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.009
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.106
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.480
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.531
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.531
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.531
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.031
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.222
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.600

2022-04-04 05:22:45,607 - mmdet - INFO - 
+---------------+-------+-------------+-------+------------+-------+
| category      | AP    | category    | AP    | category   | AP    |
+---------------+-------+-------------+-------+------------+-------+
| General trash | 0.227 | Paper       | 0.309 | Paper pack | 0.444 |
| Metal         | 0.446 | Glass       | 0.415 | Plastic    | 0.340 |
| Styrofoam     | 0.383 | Plastic bag | 0.537 | Battery    | 0.671 |
| Clothing      | 0.349 | None        | None  | None       | None  |
+---------------+-------+-------------+-------+------------+-------+
2022-04-04 05:22:45,644 - mmdet - INFO - Exp name: detectors_cascade_rcnn_r50_1x_coco.py
2022-04-04 05:22:45,645 - mmdet - INFO - Epoch(val) [31][982]	bbox_mAP: 0.4120, bbox_mAP_50: 0.5500, bbox_mAP_75: 0.4350, bbox_mAP_s: 0.0090, bbox_mAP_m: 0.1060, bbox_mAP_l: 0.4800, bbox_mAP_copypaste: 0.412 0.550 0.435 0.009 0.106 0.480
2022-04-04 05:24:48,500 - mmdet - INFO - Epoch [32][50/488]	lr: 5.638e-06, eta: 1:28:32, time: 2.457, data_time: 0.073, memory: 20819, loss_rpn_cls: 0.0101, loss_rpn_bbox: 0.0091, s0.loss_cls: 0.0724, s0.acc: 97.5020, s0.loss_bbox: 0.0454, s1.loss_cls: 0.0292, s1.acc: 97.9980, s1.loss_bbox: 0.0456, s2.loss_cls: 0.0138, s2.acc: 98.0483, s2.loss_bbox: 0.0304, loss: 0.2560
2022-04-04 05:26:49,161 - mmdet - INFO - Epoch [32][100/488]	lr: 5.638e-06, eta: 1:26:47, time: 2.413, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0106, loss_rpn_bbox: 0.0111, s0.loss_cls: 0.0863, s0.acc: 97.0576, s0.loss_bbox: 0.0530, s1.loss_cls: 0.0356, s1.acc: 97.6434, s1.loss_bbox: 0.0528, s2.loss_cls: 0.0174, s2.acc: 97.7023, s2.loss_bbox: 0.0336, loss: 0.3004
2022-04-04 05:28:49,093 - mmdet - INFO - Epoch [32][150/488]	lr: 5.638e-06, eta: 1:25:02, time: 2.399, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0099, loss_rpn_bbox: 0.0101, s0.loss_cls: 0.0763, s0.acc: 97.3354, s0.loss_bbox: 0.0481, s1.loss_cls: 0.0310, s1.acc: 97.8869, s1.loss_bbox: 0.0501, s2.loss_cls: 0.0146, s2.acc: 97.9470, s2.loss_bbox: 0.0322, loss: 0.2724
2022-04-04 05:30:48,790 - mmdet - INFO - Epoch [32][200/488]	lr: 5.638e-06, eta: 1:23:15, time: 2.394, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0105, loss_rpn_bbox: 0.0100, s0.loss_cls: 0.0728, s0.acc: 97.4922, s0.loss_bbox: 0.0448, s1.loss_cls: 0.0290, s1.acc: 98.0776, s1.loss_bbox: 0.0421, s2.loss_cls: 0.0140, s2.acc: 98.1648, s2.loss_bbox: 0.0269, loss: 0.2501
2022-04-04 05:32:48,693 - mmdet - INFO - Epoch [32][250/488]	lr: 5.638e-06, eta: 1:21:29, time: 2.398, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0104, loss_rpn_bbox: 0.0118, s0.loss_cls: 0.0841, s0.acc: 97.1450, s0.loss_bbox: 0.0508, s1.loss_cls: 0.0343, s1.acc: 97.7280, s1.loss_bbox: 0.0515, s2.loss_cls: 0.0161, s2.acc: 97.8086, s2.loss_bbox: 0.0328, loss: 0.2919
2022-04-04 05:34:48,363 - mmdet - INFO - Epoch [32][300/488]	lr: 5.638e-06, eta: 1:19:42, time: 2.393, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0107, loss_rpn_bbox: 0.0114, s0.loss_cls: 0.0863, s0.acc: 96.9985, s0.loss_bbox: 0.0533, s1.loss_cls: 0.0346, s1.acc: 97.6758, s1.loss_bbox: 0.0516, s2.loss_cls: 0.0166, s2.acc: 97.7475, s2.loss_bbox: 0.0334, loss: 0.2977
2022-04-04 05:36:48,570 - mmdet - INFO - Epoch [32][350/488]	lr: 5.638e-06, eta: 1:17:55, time: 2.404, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0102, loss_rpn_bbox: 0.0103, s0.loss_cls: 0.0756, s0.acc: 97.3931, s0.loss_bbox: 0.0461, s1.loss_cls: 0.0308, s1.acc: 97.8782, s1.loss_bbox: 0.0462, s2.loss_cls: 0.0146, s2.acc: 98.0058, s2.loss_bbox: 0.0315, loss: 0.2653
2022-04-04 05:38:48,273 - mmdet - INFO - Epoch [32][400/488]	lr: 5.638e-06, eta: 1:16:07, time: 2.394, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0092, loss_rpn_bbox: 0.0107, s0.loss_cls: 0.0768, s0.acc: 97.3975, s0.loss_bbox: 0.0464, s1.loss_cls: 0.0307, s1.acc: 97.9530, s1.loss_bbox: 0.0454, s2.loss_cls: 0.0146, s2.acc: 97.9956, s2.loss_bbox: 0.0284, loss: 0.2622
2022-04-04 05:40:48,405 - mmdet - INFO - Epoch [32][450/488]	lr: 5.638e-06, eta: 1:14:19, time: 2.403, data_time: 0.019, memory: 20819, loss_rpn_cls: 0.0100, loss_rpn_bbox: 0.0099, s0.loss_cls: 0.0769, s0.acc: 97.3125, s0.loss_bbox: 0.0457, s1.loss_cls: 0.0313, s1.acc: 97.8424, s1.loss_bbox: 0.0455, s2.loss_cls: 0.0153, s2.acc: 97.9028, s2.loss_bbox: 0.0296, loss: 0.2642
2022-04-04 05:42:19,989 - mmdet - INFO - Saving checkpoint at 32 epochs
2022-04-04 05:44:53,124 - mmdet - INFO - Evaluating bbox...
2022-04-04 05:44:56,233 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.410
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.549
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.428
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.009
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.101
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.477
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.521
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.521
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.521
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.027
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.208
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.590

2022-04-04 05:44:56,234 - mmdet - INFO - 
+---------------+-------+-------------+-------+------------+-------+
| category      | AP    | category    | AP    | category   | AP    |
+---------------+-------+-------------+-------+------------+-------+
| General trash | 0.229 | Paper       | 0.307 | Paper pack | 0.436 |
| Metal         | 0.442 | Glass       | 0.406 | Plastic    | 0.342 |
| Styrofoam     | 0.387 | Plastic bag | 0.533 | Battery    | 0.661 |
| Clothing      | 0.358 | None        | None  | None       | None  |
+---------------+-------+-------------+-------+------------+-------+
2022-04-04 05:44:56,270 - mmdet - INFO - Exp name: detectors_cascade_rcnn_r50_1x_coco.py
2022-04-04 05:44:56,270 - mmdet - INFO - Epoch(val) [32][982]	bbox_mAP: 0.4100, bbox_mAP_50: 0.5490, bbox_mAP_75: 0.4280, bbox_mAP_s: 0.0090, bbox_mAP_m: 0.1010, bbox_mAP_l: 0.4770, bbox_mAP_copypaste: 0.410 0.549 0.428 0.009 0.101 0.477
2022-04-04 05:46:58,897 - mmdet - INFO - Epoch [33][50/488]	lr: 3.985e-06, eta: 1:10:26, time: 2.452, data_time: 0.074, memory: 20819, loss_rpn_cls: 0.0089, loss_rpn_bbox: 0.0104, s0.loss_cls: 0.0786, s0.acc: 97.2729, s0.loss_bbox: 0.0486, s1.loss_cls: 0.0323, s1.acc: 97.7686, s1.loss_bbox: 0.0488, s2.loss_cls: 0.0152, s2.acc: 97.9201, s2.loss_bbox: 0.0322, loss: 0.2750
2022-04-04 05:48:59,275 - mmdet - INFO - Epoch [33][100/488]	lr: 3.985e-06, eta: 1:08:39, time: 2.408, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0093, loss_rpn_bbox: 0.0107, s0.loss_cls: 0.0691, s0.acc: 97.6211, s0.loss_bbox: 0.0468, s1.loss_cls: 0.0274, s1.acc: 98.0956, s1.loss_bbox: 0.0468, s2.loss_cls: 0.0138, s2.acc: 98.0534, s2.loss_bbox: 0.0299, loss: 0.2538
2022-04-04 05:50:59,184 - mmdet - INFO - Epoch [33][150/488]	lr: 3.985e-06, eta: 1:06:52, time: 2.398, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0083, loss_rpn_bbox: 0.0095, s0.loss_cls: 0.0696, s0.acc: 97.6016, s0.loss_bbox: 0.0454, s1.loss_cls: 0.0282, s1.acc: 98.1401, s1.loss_bbox: 0.0438, s2.loss_cls: 0.0136, s2.acc: 98.2116, s2.loss_bbox: 0.0296, loss: 0.2479
2022-04-04 05:52:59,121 - mmdet - INFO - Epoch [33][200/488]	lr: 3.985e-06, eta: 1:05:04, time: 2.399, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0092, loss_rpn_bbox: 0.0122, s0.loss_cls: 0.0767, s0.acc: 97.3477, s0.loss_bbox: 0.0488, s1.loss_cls: 0.0330, s1.acc: 97.7495, s1.loss_bbox: 0.0456, s2.loss_cls: 0.0159, s2.acc: 97.8102, s2.loss_bbox: 0.0282, loss: 0.2695
2022-04-04 05:54:59,207 - mmdet - INFO - Epoch [33][250/488]	lr: 3.985e-06, eta: 1:03:16, time: 2.402, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0097, loss_rpn_bbox: 0.0089, s0.loss_cls: 0.0717, s0.acc: 97.5210, s0.loss_bbox: 0.0423, s1.loss_cls: 0.0276, s1.acc: 98.1928, s1.loss_bbox: 0.0422, s2.loss_cls: 0.0131, s2.acc: 98.2840, s2.loss_bbox: 0.0277, loss: 0.2432
2022-04-04 05:56:58,863 - mmdet - INFO - Epoch [33][300/488]	lr: 3.985e-06, eta: 1:01:28, time: 2.393, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0102, loss_rpn_bbox: 0.0111, s0.loss_cls: 0.0774, s0.acc: 97.3159, s0.loss_bbox: 0.0460, s1.loss_cls: 0.0308, s1.acc: 97.9245, s1.loss_bbox: 0.0457, s2.loss_cls: 0.0144, s2.acc: 98.0622, s2.loss_bbox: 0.0303, loss: 0.2657
2022-04-04 05:58:59,646 - mmdet - INFO - Epoch [33][350/488]	lr: 3.985e-06, eta: 0:59:40, time: 2.416, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0103, loss_rpn_bbox: 0.0105, s0.loss_cls: 0.0767, s0.acc: 97.3237, s0.loss_bbox: 0.0474, s1.loss_cls: 0.0313, s1.acc: 97.8232, s1.loss_bbox: 0.0487, s2.loss_cls: 0.0156, s2.acc: 97.8072, s2.loss_bbox: 0.0309, loss: 0.2713
2022-04-04 06:01:00,778 - mmdet - INFO - Epoch [33][400/488]	lr: 3.985e-06, eta: 0:57:52, time: 2.423, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0094, loss_rpn_bbox: 0.0103, s0.loss_cls: 0.0800, s0.acc: 97.2324, s0.loss_bbox: 0.0513, s1.loss_cls: 0.0332, s1.acc: 97.8028, s1.loss_bbox: 0.0495, s2.loss_cls: 0.0155, s2.acc: 97.9238, s2.loss_bbox: 0.0307, loss: 0.2799
2022-04-04 06:03:00,525 - mmdet - INFO - Epoch [33][450/488]	lr: 3.985e-06, eta: 0:56:02, time: 2.395, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0110, loss_rpn_bbox: 0.0116, s0.loss_cls: 0.0798, s0.acc: 97.2661, s0.loss_bbox: 0.0485, s1.loss_cls: 0.0321, s1.acc: 97.8420, s1.loss_bbox: 0.0481, s2.loss_cls: 0.0156, s2.acc: 97.8786, s2.loss_bbox: 0.0303, loss: 0.2770
2022-04-04 06:04:31,567 - mmdet - INFO - Saving checkpoint at 33 epochs
2022-04-04 06:07:04,593 - mmdet - INFO - Evaluating bbox...
2022-04-04 06:07:07,643 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.410
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.550
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.430
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.007
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.101
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.478
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.520
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.520
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.520
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.029
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.201
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.591

2022-04-04 06:07:07,645 - mmdet - INFO - 
+---------------+-------+-------------+-------+------------+-------+
| category      | AP    | category    | AP    | category   | AP    |
+---------------+-------+-------------+-------+------------+-------+
| General trash | 0.224 | Paper       | 0.310 | Paper pack | 0.441 |
| Metal         | 0.441 | Glass       | 0.413 | Plastic    | 0.343 |
| Styrofoam     | 0.392 | Plastic bag | 0.536 | Battery    | 0.657 |
| Clothing      | 0.343 | None        | None  | None       | None  |
+---------------+-------+-------------+-------+------------+-------+
2022-04-04 06:07:07,683 - mmdet - INFO - Exp name: detectors_cascade_rcnn_r50_1x_coco.py
2022-04-04 06:07:07,684 - mmdet - INFO - Epoch(val) [33][982]	bbox_mAP: 0.4100, bbox_mAP_50: 0.5500, bbox_mAP_75: 0.4300, bbox_mAP_s: 0.0070, bbox_mAP_m: 0.1010, bbox_mAP_l: 0.4780, bbox_mAP_copypaste: 0.410 0.550 0.430 0.007 0.101 0.478
2022-04-04 06:09:10,023 - mmdet - INFO - Epoch [34][50/488]	lr: 2.687e-06, eta: 0:52:22, time: 2.446, data_time: 0.073, memory: 20819, loss_rpn_cls: 0.0088, loss_rpn_bbox: 0.0106, s0.loss_cls: 0.0783, s0.acc: 97.3022, s0.loss_bbox: 0.0485, s1.loss_cls: 0.0318, s1.acc: 97.8542, s1.loss_bbox: 0.0494, s2.loss_cls: 0.0155, s2.acc: 97.9269, s2.loss_bbox: 0.0327, loss: 0.2756
2022-04-04 06:11:10,011 - mmdet - INFO - Epoch [34][100/488]	lr: 2.687e-06, eta: 0:50:33, time: 2.400, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0072, loss_rpn_bbox: 0.0103, s0.loss_cls: 0.0704, s0.acc: 97.5723, s0.loss_bbox: 0.0427, s1.loss_cls: 0.0271, s1.acc: 98.2000, s1.loss_bbox: 0.0416, s2.loss_cls: 0.0127, s2.acc: 98.2964, s2.loss_bbox: 0.0280, loss: 0.2400
2022-04-04 06:13:10,469 - mmdet - INFO - Epoch [34][150/488]	lr: 2.687e-06, eta: 0:48:45, time: 2.409, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0080, loss_rpn_bbox: 0.0106, s0.loss_cls: 0.0792, s0.acc: 97.2358, s0.loss_bbox: 0.0519, s1.loss_cls: 0.0312, s1.acc: 97.8781, s1.loss_bbox: 0.0506, s2.loss_cls: 0.0150, s2.acc: 97.9600, s2.loss_bbox: 0.0339, loss: 0.2805
2022-04-04 06:15:10,347 - mmdet - INFO - Epoch [34][200/488]	lr: 2.687e-06, eta: 0:46:56, time: 2.398, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0094, loss_rpn_bbox: 0.0112, s0.loss_cls: 0.0755, s0.acc: 97.3716, s0.loss_bbox: 0.0476, s1.loss_cls: 0.0310, s1.acc: 97.9325, s1.loss_bbox: 0.0467, s2.loss_cls: 0.0150, s2.acc: 97.9342, s2.loss_bbox: 0.0303, loss: 0.2668
2022-04-04 06:17:10,192 - mmdet - INFO - Epoch [34][250/488]	lr: 2.687e-06, eta: 0:45:07, time: 2.397, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0120, loss_rpn_bbox: 0.0099, s0.loss_cls: 0.0746, s0.acc: 97.5635, s0.loss_bbox: 0.0451, s1.loss_cls: 0.0299, s1.acc: 98.0428, s1.loss_bbox: 0.0442, s2.loss_cls: 0.0141, s2.acc: 98.1244, s2.loss_bbox: 0.0292, loss: 0.2591
2022-04-04 06:19:10,177 - mmdet - INFO - Epoch [34][300/488]	lr: 2.687e-06, eta: 0:43:17, time: 2.400, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0077, loss_rpn_bbox: 0.0107, s0.loss_cls: 0.0763, s0.acc: 97.3491, s0.loss_bbox: 0.0463, s1.loss_cls: 0.0298, s1.acc: 98.0200, s1.loss_bbox: 0.0474, s2.loss_cls: 0.0143, s2.acc: 98.1311, s2.loss_bbox: 0.0306, loss: 0.2631
2022-04-04 06:21:10,366 - mmdet - INFO - Epoch [34][350/488]	lr: 2.687e-06, eta: 0:41:28, time: 2.404, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0086, loss_rpn_bbox: 0.0105, s0.loss_cls: 0.0801, s0.acc: 97.2124, s0.loss_bbox: 0.0500, s1.loss_cls: 0.0308, s1.acc: 97.8864, s1.loss_bbox: 0.0484, s2.loss_cls: 0.0148, s2.acc: 97.9109, s2.loss_bbox: 0.0325, loss: 0.2758
2022-04-04 06:23:10,046 - mmdet - INFO - Epoch [34][400/488]	lr: 2.687e-06, eta: 0:39:38, time: 2.394, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0095, loss_rpn_bbox: 0.0101, s0.loss_cls: 0.0697, s0.acc: 97.5454, s0.loss_bbox: 0.0445, s1.loss_cls: 0.0282, s1.acc: 98.0902, s1.loss_bbox: 0.0442, s2.loss_cls: 0.0136, s2.acc: 98.1339, s2.loss_bbox: 0.0294, loss: 0.2492
2022-04-04 06:25:10,228 - mmdet - INFO - Epoch [34][450/488]	lr: 2.687e-06, eta: 0:37:48, time: 2.404, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0104, loss_rpn_bbox: 0.0119, s0.loss_cls: 0.0805, s0.acc: 97.2646, s0.loss_bbox: 0.0495, s1.loss_cls: 0.0327, s1.acc: 97.8147, s1.loss_bbox: 0.0479, s2.loss_cls: 0.0152, s2.acc: 97.9447, s2.loss_bbox: 0.0312, loss: 0.2794
2022-04-04 06:26:41,684 - mmdet - INFO - Saving checkpoint at 34 epochs
2022-04-04 06:29:14,931 - mmdet - INFO - Evaluating bbox...
2022-04-04 06:29:18,164 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.410
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.550
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.427
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.005
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.108
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.478
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.523
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.523
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.523
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.026
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.207
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.593

2022-04-04 06:29:18,166 - mmdet - INFO - 
+---------------+-------+-------------+-------+------------+-------+
| category      | AP    | category    | AP    | category   | AP    |
+---------------+-------+-------------+-------+------------+-------+
| General trash | 0.229 | Paper       | 0.309 | Paper pack | 0.442 |
| Metal         | 0.451 | Glass       | 0.411 | Plastic    | 0.346 |
| Styrofoam     | 0.388 | Plastic bag | 0.537 | Battery    | 0.626 |
| Clothing      | 0.358 | None        | None  | None       | None  |
+---------------+-------+-------------+-------+------------+-------+
2022-04-04 06:29:18,206 - mmdet - INFO - Exp name: detectors_cascade_rcnn_r50_1x_coco.py
2022-04-04 06:29:18,207 - mmdet - INFO - Epoch(val) [34][982]	bbox_mAP: 0.4100, bbox_mAP_50: 0.5500, bbox_mAP_75: 0.4270, bbox_mAP_s: 0.0050, bbox_mAP_m: 0.1080, bbox_mAP_l: 0.4780, bbox_mAP_copypaste: 0.410 0.550 0.427 0.005 0.108 0.478
2022-04-04 06:31:21,314 - mmdet - INFO - Epoch [35][50/488]	lr: 1.752e-06, eta: 0:34:17, time: 2.462, data_time: 0.073, memory: 20819, loss_rpn_cls: 0.0097, loss_rpn_bbox: 0.0098, s0.loss_cls: 0.0787, s0.acc: 97.2739, s0.loss_bbox: 0.0497, s1.loss_cls: 0.0326, s1.acc: 97.7880, s1.loss_bbox: 0.0494, s2.loss_cls: 0.0156, s2.acc: 97.9708, s2.loss_bbox: 0.0329, loss: 0.2784
2022-04-04 06:33:21,259 - mmdet - INFO - Epoch [35][100/488]	lr: 1.752e-06, eta: 0:32:27, time: 2.399, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0106, loss_rpn_bbox: 0.0121, s0.loss_cls: 0.0844, s0.acc: 97.1143, s0.loss_bbox: 0.0527, s1.loss_cls: 0.0352, s1.acc: 97.6079, s1.loss_bbox: 0.0514, s2.loss_cls: 0.0170, s2.acc: 97.6884, s2.loss_bbox: 0.0341, loss: 0.2977
2022-04-04 06:35:20,950 - mmdet - INFO - Epoch [35][150/488]	lr: 1.752e-06, eta: 0:30:38, time: 2.394, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0084, loss_rpn_bbox: 0.0108, s0.loss_cls: 0.0768, s0.acc: 97.3193, s0.loss_bbox: 0.0497, s1.loss_cls: 0.0304, s1.acc: 97.9264, s1.loss_bbox: 0.0472, s2.loss_cls: 0.0146, s2.acc: 97.9985, s2.loss_bbox: 0.0302, loss: 0.2680
2022-04-04 06:37:21,544 - mmdet - INFO - Epoch [35][200/488]	lr: 1.752e-06, eta: 0:28:48, time: 2.412, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0101, loss_rpn_bbox: 0.0110, s0.loss_cls: 0.0792, s0.acc: 97.2891, s0.loss_bbox: 0.0496, s1.loss_cls: 0.0318, s1.acc: 97.8742, s1.loss_bbox: 0.0476, s2.loss_cls: 0.0152, s2.acc: 97.9628, s2.loss_bbox: 0.0309, loss: 0.2754
2022-04-04 06:39:21,525 - mmdet - INFO - Epoch [35][250/488]	lr: 1.752e-06, eta: 0:26:58, time: 2.400, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0091, loss_rpn_bbox: 0.0097, s0.loss_cls: 0.0680, s0.acc: 97.6670, s0.loss_bbox: 0.0425, s1.loss_cls: 0.0268, s1.acc: 98.1720, s1.loss_bbox: 0.0434, s2.loss_cls: 0.0128, s2.acc: 98.2292, s2.loss_bbox: 0.0293, loss: 0.2416
2022-04-04 06:41:21,432 - mmdet - INFO - Epoch [35][300/488]	lr: 1.752e-06, eta: 0:25:07, time: 2.398, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0088, loss_rpn_bbox: 0.0093, s0.loss_cls: 0.0608, s0.acc: 97.8179, s0.loss_bbox: 0.0414, s1.loss_cls: 0.0230, s1.acc: 98.3650, s1.loss_bbox: 0.0402, s2.loss_cls: 0.0107, s2.acc: 98.4989, s2.loss_bbox: 0.0271, loss: 0.2214
2022-04-04 06:43:21,121 - mmdet - INFO - Epoch [35][350/488]	lr: 1.752e-06, eta: 0:23:17, time: 2.394, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0079, loss_rpn_bbox: 0.0103, s0.loss_cls: 0.0684, s0.acc: 97.6660, s0.loss_bbox: 0.0420, s1.loss_cls: 0.0268, s1.acc: 98.1806, s1.loss_bbox: 0.0438, s2.loss_cls: 0.0130, s2.acc: 98.1740, s2.loss_bbox: 0.0293, loss: 0.2415
2022-04-04 06:45:21,163 - mmdet - INFO - Epoch [35][400/488]	lr: 1.752e-06, eta: 0:21:26, time: 2.401, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0098, loss_rpn_bbox: 0.0119, s0.loss_cls: 0.0893, s0.acc: 96.9424, s0.loss_bbox: 0.0543, s1.loss_cls: 0.0361, s1.acc: 97.6092, s1.loss_bbox: 0.0514, s2.loss_cls: 0.0172, s2.acc: 97.8271, s2.loss_bbox: 0.0341, loss: 0.3042
2022-04-04 06:47:20,933 - mmdet - INFO - Epoch [35][450/488]	lr: 1.752e-06, eta: 0:19:35, time: 2.395, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0094, loss_rpn_bbox: 0.0089, s0.loss_cls: 0.0683, s0.acc: 97.6646, s0.loss_bbox: 0.0409, s1.loss_cls: 0.0275, s1.acc: 98.1676, s1.loss_bbox: 0.0428, s2.loss_cls: 0.0126, s2.acc: 98.2773, s2.loss_bbox: 0.0291, loss: 0.2394
2022-04-04 06:48:52,168 - mmdet - INFO - Saving checkpoint at 35 epochs
2022-04-04 06:51:23,270 - mmdet - INFO - Evaluating bbox...
2022-04-04 06:51:26,284 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.410
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.549
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.428
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.006
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.107
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.477
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.520
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.520
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.520
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.027
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.214
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.589

2022-04-04 06:51:26,285 - mmdet - INFO - 
+---------------+-------+-------------+-------+------------+-------+
| category      | AP    | category    | AP    | category   | AP    |
+---------------+-------+-------------+-------+------------+-------+
| General trash | 0.225 | Paper       | 0.310 | Paper pack | 0.445 |
| Metal         | 0.444 | Glass       | 0.410 | Plastic    | 0.350 |
| Styrofoam     | 0.389 | Plastic bag | 0.540 | Battery    | 0.637 |
| Clothing      | 0.349 | None        | None  | None       | None  |
+---------------+-------+-------------+-------+------------+-------+
2022-04-04 06:51:26,319 - mmdet - INFO - Exp name: detectors_cascade_rcnn_r50_1x_coco.py
2022-04-04 06:51:26,320 - mmdet - INFO - Epoch(val) [35][982]	bbox_mAP: 0.4100, bbox_mAP_50: 0.5490, bbox_mAP_75: 0.4280, bbox_mAP_s: 0.0060, bbox_mAP_m: 0.1070, bbox_mAP_l: 0.4770, bbox_mAP_copypaste: 0.410 0.549 0.428 0.006 0.107 0.477
2022-04-04 06:53:28,771 - mmdet - INFO - Epoch [36][50/488]	lr: 1.188e-06, eta: 0:16:13, time: 2.449, data_time: 0.073, memory: 20819, loss_rpn_cls: 0.0097, loss_rpn_bbox: 0.0118, s0.loss_cls: 0.0792, s0.acc: 97.3428, s0.loss_bbox: 0.0484, s1.loss_cls: 0.0310, s1.acc: 97.8833, s1.loss_bbox: 0.0484, s2.loss_cls: 0.0147, s2.acc: 97.9149, s2.loss_bbox: 0.0329, loss: 0.2761
2022-04-04 06:55:29,007 - mmdet - INFO - Epoch [36][100/488]	lr: 1.188e-06, eta: 0:14:22, time: 2.405, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0100, loss_rpn_bbox: 0.0104, s0.loss_cls: 0.0646, s0.acc: 97.7129, s0.loss_bbox: 0.0421, s1.loss_cls: 0.0257, s1.acc: 98.2074, s1.loss_bbox: 0.0415, s2.loss_cls: 0.0126, s2.acc: 98.2183, s2.loss_bbox: 0.0283, loss: 0.2353
2022-04-04 06:57:29,141 - mmdet - INFO - Epoch [36][150/488]	lr: 1.188e-06, eta: 0:12:31, time: 2.403, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0086, loss_rpn_bbox: 0.0097, s0.loss_cls: 0.0719, s0.acc: 97.5005, s0.loss_bbox: 0.0448, s1.loss_cls: 0.0283, s1.acc: 98.0158, s1.loss_bbox: 0.0438, s2.loss_cls: 0.0138, s2.acc: 98.0561, s2.loss_bbox: 0.0277, loss: 0.2487
2022-04-04 06:59:29,565 - mmdet - INFO - Epoch [36][200/488]	lr: 1.188e-06, eta: 0:10:41, time: 2.408, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0079, loss_rpn_bbox: 0.0110, s0.loss_cls: 0.0751, s0.acc: 97.3867, s0.loss_bbox: 0.0467, s1.loss_cls: 0.0293, s1.acc: 98.0351, s1.loss_bbox: 0.0463, s2.loss_cls: 0.0141, s2.acc: 98.0668, s2.loss_bbox: 0.0299, loss: 0.2602
2022-04-04 07:01:29,224 - mmdet - INFO - Epoch [36][250/488]	lr: 1.188e-06, eta: 0:08:50, time: 2.393, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0087, loss_rpn_bbox: 0.0107, s0.loss_cls: 0.0783, s0.acc: 97.3335, s0.loss_bbox: 0.0500, s1.loss_cls: 0.0304, s1.acc: 97.9525, s1.loss_bbox: 0.0485, s2.loss_cls: 0.0144, s2.acc: 98.0745, s2.loss_bbox: 0.0310, loss: 0.2719
2022-04-04 07:03:28,592 - mmdet - INFO - Epoch [36][300/488]	lr: 1.188e-06, eta: 0:06:59, time: 2.387, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0076, loss_rpn_bbox: 0.0089, s0.loss_cls: 0.0724, s0.acc: 97.4619, s0.loss_bbox: 0.0461, s1.loss_cls: 0.0305, s1.acc: 97.9380, s1.loss_bbox: 0.0455, s2.loss_cls: 0.0148, s2.acc: 97.9785, s2.loss_bbox: 0.0309, loss: 0.2567
2022-04-04 07:05:27,810 - mmdet - INFO - Epoch [36][350/488]	lr: 1.188e-06, eta: 0:05:07, time: 2.384, data_time: 0.017, memory: 20819, loss_rpn_cls: 0.0095, loss_rpn_bbox: 0.0094, s0.loss_cls: 0.0687, s0.acc: 97.6479, s0.loss_bbox: 0.0401, s1.loss_cls: 0.0278, s1.acc: 98.1090, s1.loss_bbox: 0.0397, s2.loss_cls: 0.0130, s2.acc: 98.2025, s2.loss_bbox: 0.0266, loss: 0.2350
2022-04-04 07:07:28,058 - mmdet - INFO - Epoch [36][400/488]	lr: 1.188e-06, eta: 0:03:16, time: 2.405, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0105, loss_rpn_bbox: 0.0122, s0.loss_cls: 0.0760, s0.acc: 97.3892, s0.loss_bbox: 0.0479, s1.loss_cls: 0.0302, s1.acc: 97.9351, s1.loss_bbox: 0.0457, s2.loss_cls: 0.0142, s2.acc: 98.0201, s2.loss_bbox: 0.0302, loss: 0.2670
2022-04-04 07:09:28,526 - mmdet - INFO - Epoch [36][450/488]	lr: 1.188e-06, eta: 0:01:24, time: 2.409, data_time: 0.018, memory: 20819, loss_rpn_cls: 0.0104, loss_rpn_bbox: 0.0111, s0.loss_cls: 0.0866, s0.acc: 97.0269, s0.loss_bbox: 0.0530, s1.loss_cls: 0.0345, s1.acc: 97.7064, s1.loss_bbox: 0.0496, s2.loss_cls: 0.0161, s2.acc: 97.8646, s2.loss_bbox: 0.0319, loss: 0.2932
2022-04-04 07:11:00,146 - mmdet - INFO - Saving checkpoint at 36 epochs
2022-04-04 07:13:31,366 - mmdet - INFO - Evaluating bbox...
2022-04-04 07:13:34,302 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.409
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.548
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.427
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.007
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.106
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.477
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.520
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.520
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.520
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.027
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.209
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.588

2022-04-04 07:13:34,303 - mmdet - INFO - 
+---------------+-------+-------------+-------+------------+-------+
| category      | AP    | category    | AP    | category   | AP    |
+---------------+-------+-------------+-------+------------+-------+
| General trash | 0.228 | Paper       | 0.310 | Paper pack | 0.433 |
| Metal         | 0.446 | Glass       | 0.410 | Plastic    | 0.344 |
| Styrofoam     | 0.390 | Plastic bag | 0.537 | Battery    | 0.633 |
| Clothing      | 0.364 | None        | None  | None       | None  |
+---------------+-------+-------------+-------+------------+-------+
2022-04-04 07:13:34,343 - mmdet - INFO - Exp name: detectors_cascade_rcnn_r50_1x_coco.py
2022-04-04 07:13:34,344 - mmdet - INFO - Epoch(val) [36][982]	bbox_mAP: 0.4090, bbox_mAP_50: 0.5480, bbox_mAP_75: 0.4270, bbox_mAP_s: 0.0070, bbox_mAP_m: 0.1060, bbox_mAP_l: 0.4770, bbox_mAP_copypaste: 0.409 0.548 0.427 0.007 0.106 0.477
