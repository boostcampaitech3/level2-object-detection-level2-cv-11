{"mmdet_version": "2.22.0", "CLASSES": ["General trash", "Paper", "Paper pack", "Metal", "Glass", "Plastic", "Styrofoam", "Plastic bag", "Battery", "Clothing"], "env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-PCIE-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.5\nMMCV: 1.4.6\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.22.0+", "config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='DetectoRS_ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50'),\n        conv_cfg=dict(type='ConvAWS'),\n        sac=dict(type='SAC', use_deform=True),\n        stage_with_sac=(False, True, True, True),\n        output_img=True),\n    neck=dict(\n        type='RFP',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5,\n        rfp_steps=2,\n        aspp_out_channels=64,\n        aspp_dilations=(1, 3, 6, 1),\n        rfp_backbone=dict(\n            rfp_inplanes=256,\n            type='DetectoRS_ResNet',\n            depth=50,\n            num_stages=4,\n            out_indices=(0, 1, 2, 3),\n            frozen_stages=1,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            norm_eval=True,\n            conv_cfg=dict(type='ConvAWS'),\n            sac=dict(type='SAC', use_deform=True),\n            stage_with_sac=(False, True, True, True),\n            pretrained='torchvision://resnet50',\n            style='pytorch')),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = '/opt/ml/detection/dataset/'\nclasses = ('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n           'Styrofoam', 'Plastic bag', 'Battery', 'Clothing')\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\nimg_scale = (800, 800)\nalbu_train_transforms = [\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Flip', p=1.0),\n            dict(type='RandomRotate90', p=1.0)\n        ],\n        p=0.5),\n    dict(\n        type='RandomResizedCrop',\n        height=800,\n        width=800,\n        scale=(0.5, 1.0),\n        p=0.5),\n    dict(\n        type='RandomBrightnessContrast',\n        brightness_limit=0.1,\n        contrast_limit=0.15,\n        p=0.5),\n    dict(\n        type='HueSaturationValue',\n        hue_shift_limit=15,\n        sat_shift_limit=25,\n        val_shift_limit=10,\n        p=0.5),\n    dict(type='GaussNoise', p=0.3),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Blur', p=1.0),\n            dict(type='GaussianBlur', p=1.0),\n            dict(type='MedianBlur', blur_limit=5, p=1.0),\n            dict(type='MotionBlur', p=1.0)\n        ],\n        p=0.1)\n]\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(800, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.0),\n    dict(\n        type='Albu',\n        transforms=[\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Flip', p=1.0),\n                    dict(type='RandomRotate90', p=1.0)\n                ],\n                p=0.5),\n            dict(\n                type='RandomResizedCrop',\n                height=800,\n                width=800,\n                scale=(0.5, 1.0),\n                p=0.5),\n            dict(\n                type='RandomBrightnessContrast',\n                brightness_limit=0.1,\n                contrast_limit=0.15,\n                p=0.5),\n            dict(\n                type='HueSaturationValue',\n                hue_shift_limit=15,\n                sat_shift_limit=25,\n                val_shift_limit=10,\n                p=0.5),\n            dict(type='GaussNoise', p=0.3),\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Blur', p=1.0),\n                    dict(type='GaussianBlur', p=1.0),\n                    dict(type='MedianBlur', blur_limit=5, p=1.0),\n                    dict(type='MotionBlur', p=1.0)\n                ],\n                p=0.1)\n        ],\n        bbox_params=dict(\n            type='BboxParams',\n            format='pascal_voc',\n            label_fields=['gt_labels'],\n            min_visibility=0.0,\n            filter_lost_elements=True),\n        keymap=dict(img='image', gt_bboxes='bboxes'),\n        update_pad_shape=False,\n        skip_img_without_anno=True),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\nval_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(800, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(800, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        ann_file=\n        '/opt/ml/detection/dataset/stratified_kfold/basic_v2/cv_train_3.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(800, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Flip', p=1.0),\n                            dict(type='RandomRotate90', p=1.0)\n                        ],\n                        p=0.5),\n                    dict(\n                        type='RandomResizedCrop',\n                        height=800,\n                        width=800,\n                        scale=(0.5, 1.0),\n                        p=0.5),\n                    dict(\n                        type='RandomBrightnessContrast',\n                        brightness_limit=0.1,\n                        contrast_limit=0.15,\n                        p=0.5),\n                    dict(\n                        type='HueSaturationValue',\n                        hue_shift_limit=15,\n                        sat_shift_limit=25,\n                        val_shift_limit=10,\n                        p=0.5),\n                    dict(type='GaussNoise', p=0.3),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Blur', p=1.0),\n                            dict(type='GaussianBlur', p=1.0),\n                            dict(type='MedianBlur', blur_limit=5, p=1.0),\n                            dict(type='MotionBlur', p=1.0)\n                        ],\n                        p=0.1)\n                ],\n                bbox_params=dict(\n                    type='BboxParams',\n                    format='pascal_voc',\n                    label_fields=['gt_labels'],\n                    min_visibility=0.0,\n                    filter_lost_elements=True),\n                keymap=dict(img='image', gt_bboxes='bboxes'),\n                update_pad_shape=False,\n                skip_img_without_anno=True),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        ann_file=\n        '/opt/ml/detection/dataset/stratified_kfold/basic_v2/cv_val_3.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(800, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        ann_file='/opt/ml/detection/dataset/test.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(800, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox', classwise=True)\noptimizer = dict(\n    type='AdamW',\n    lr=0.0001,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='CosineAnnealing',\n    warmup='linear',\n    warmup_iters=488,\n    warmup_ratio=0.001,\n    min_lr=1e-06)\nrunner = dict(type='EpochBasedRunner', max_epochs=24)\ncheckpoint_config = dict(max_keep_ckpts=5, interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(\n            type='WandbLoggerHook',\n            interval=1000,\n            init_kwargs=dict(\n                project='two-stage-model',\n                entity='canvas11',\n                name='LEE_DetectoRS_cascade_rcnn_r50_1x'))\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nwork_dir = 'work_dirs/detectors_cascade_rcnn_r50_1x'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1644164417, "exp_name": "detectors_cascade_rcnn_r50_1x_coco.py", "epoch": 24, "iter": 11712, "mmcv_version": "1.4.6", "time": "Thu Mar 31 14:16:39 2022", "hook_msgs": {"last_ckpt": "/opt/ml/detection/SEUNGHYUN_WORKSPACE/my_mmdetection/work_dirs/detectors_cascade_rcnn_r50_1x/epoch_23.pth"}}
{"mode": "train", "epoch": 25, "iter": 50, "lr": 3e-05, "memory": 20819, "data_time": 0.07128, "loss_rpn_cls": 0.01373, "loss_rpn_bbox": 0.01196, "s0.loss_cls": 0.09241, "s0.acc": 96.79834, "s0.loss_bbox": 0.05521, "s1.loss_cls": 0.03775, "s1.acc": 97.511, "s1.loss_bbox": 0.05461, "s2.loss_cls": 0.01836, "s2.acc": 97.54609, "s2.loss_bbox": 0.03476, "loss": 0.31879, "time": 2.45105}
{"mode": "train", "epoch": 25, "iter": 100, "lr": 3e-05, "memory": 20819, "data_time": 0.01592, "loss_rpn_cls": 0.01286, "loss_rpn_bbox": 0.01187, "s0.loss_cls": 0.09183, "s0.acc": 96.95361, "s0.loss_bbox": 0.05037, "s1.loss_cls": 0.03744, "s1.acc": 97.51979, "s1.loss_bbox": 0.04903, "s2.loss_cls": 0.01807, "s2.acc": 97.55719, "s2.loss_bbox": 0.03074, "loss": 0.3022, "time": 2.39403}
{"mode": "train", "epoch": 25, "iter": 150, "lr": 3e-05, "memory": 20819, "data_time": 0.01678, "loss_rpn_cls": 0.01223, "loss_rpn_bbox": 0.01199, "s0.loss_cls": 0.09456, "s0.acc": 96.78955, "s0.loss_bbox": 0.0562, "s1.loss_cls": 0.04017, "s1.acc": 97.35548, "s1.loss_bbox": 0.05447, "s2.loss_cls": 0.01989, "s2.acc": 97.32324, "s2.loss_bbox": 0.03497, "loss": 0.32447, "time": 2.39597}
{"mode": "train", "epoch": 25, "iter": 200, "lr": 3e-05, "memory": 20819, "data_time": 0.01615, "loss_rpn_cls": 0.01181, "loss_rpn_bbox": 0.01116, "s0.loss_cls": 0.09206, "s0.acc": 96.85938, "s0.loss_bbox": 0.05375, "s1.loss_cls": 0.03824, "s1.acc": 97.4103, "s1.loss_bbox": 0.053, "s2.loss_cls": 0.01874, "s2.acc": 97.43218, "s2.loss_bbox": 0.03343, "loss": 0.31218, "time": 2.40485}
{"mode": "train", "epoch": 25, "iter": 250, "lr": 3e-05, "memory": 20819, "data_time": 0.01575, "loss_rpn_cls": 0.01301, "loss_rpn_bbox": 0.01184, "s0.loss_cls": 0.10183, "s0.acc": 96.5874, "s0.loss_bbox": 0.05886, "s1.loss_cls": 0.04191, "s1.acc": 97.26036, "s1.loss_bbox": 0.05699, "s2.loss_cls": 0.02028, "s2.acc": 97.32941, "s2.loss_bbox": 0.03654, "loss": 0.34126, "time": 2.39126}
{"mode": "train", "epoch": 25, "iter": 300, "lr": 3e-05, "memory": 20819, "data_time": 0.0162, "loss_rpn_cls": 0.01121, "loss_rpn_bbox": 0.01203, "s0.loss_cls": 0.0926, "s0.acc": 96.85254, "s0.loss_bbox": 0.05292, "s1.loss_cls": 0.04086, "s1.acc": 97.25072, "s1.loss_bbox": 0.05209, "s2.loss_cls": 0.01961, "s2.acc": 97.33895, "s2.loss_bbox": 0.03293, "loss": 0.31424, "time": 2.39139}
{"mode": "train", "epoch": 25, "iter": 350, "lr": 3e-05, "memory": 20819, "data_time": 0.01577, "loss_rpn_cls": 0.01196, "loss_rpn_bbox": 0.01344, "s0.loss_cls": 0.10424, "s0.acc": 96.5957, "s0.loss_bbox": 0.05867, "s1.loss_cls": 0.04345, "s1.acc": 97.14867, "s1.loss_bbox": 0.05497, "s2.loss_cls": 0.02058, "s2.acc": 97.28348, "s2.loss_bbox": 0.03527, "loss": 0.34259, "time": 2.39961}
{"mode": "train", "epoch": 25, "iter": 400, "lr": 3e-05, "memory": 20819, "data_time": 0.01636, "loss_rpn_cls": 0.01441, "loss_rpn_bbox": 0.0134, "s0.loss_cls": 0.10563, "s0.acc": 96.4458, "s0.loss_bbox": 0.05733, "s1.loss_cls": 0.04429, "s1.acc": 97.03136, "s1.loss_bbox": 0.05394, "s2.loss_cls": 0.02099, "s2.acc": 97.20142, "s2.loss_bbox": 0.03552, "loss": 0.34551, "time": 2.3984}
{"mode": "train", "epoch": 25, "iter": 450, "lr": 3e-05, "memory": 20819, "data_time": 0.01609, "loss_rpn_cls": 0.01274, "loss_rpn_bbox": 0.01268, "s0.loss_cls": 0.10686, "s0.acc": 96.35107, "s0.loss_bbox": 0.05996, "s1.loss_cls": 0.04581, "s1.acc": 96.88991, "s1.loss_bbox": 0.05973, "s2.loss_cls": 0.02254, "s2.acc": 96.90783, "s2.loss_bbox": 0.03771, "loss": 0.35803, "time": 2.41256}
{"mode": "val", "epoch": 25, "iter": 982, "lr": 3e-05, "bbox_mAP": 0.393, "bbox_mAP_50": 0.531, "bbox_mAP_75": 0.41, "bbox_mAP_s": 0.009, "bbox_mAP_m": 0.078, "bbox_mAP_l": 0.46, "bbox_mAP_copypaste": "0.393 0.531 0.410 0.009 0.078 0.460"}
{"mode": "train", "epoch": 26, "iter": 50, "lr": 2e-05, "memory": 20819, "data_time": 0.07299, "loss_rpn_cls": 0.01473, "loss_rpn_bbox": 0.01312, "s0.loss_cls": 0.09993, "s0.acc": 96.62793, "s0.loss_bbox": 0.05699, "s1.loss_cls": 0.04403, "s1.acc": 97.05156, "s1.loss_bbox": 0.05564, "s2.loss_cls": 0.02154, "s2.acc": 97.07054, "s2.loss_bbox": 0.03668, "loss": 0.34266, "time": 2.45754}
{"mode": "train", "epoch": 26, "iter": 100, "lr": 2e-05, "memory": 20819, "data_time": 0.01805, "loss_rpn_cls": 0.01134, "loss_rpn_bbox": 0.01133, "s0.loss_cls": 0.09409, "s0.acc": 96.84717, "s0.loss_bbox": 0.05503, "s1.loss_cls": 0.03957, "s1.acc": 97.40392, "s1.loss_bbox": 0.05502, "s2.loss_cls": 0.01895, "s2.acc": 97.41675, "s2.loss_bbox": 0.03491, "loss": 0.32025, "time": 2.40702}
{"mode": "train", "epoch": 26, "iter": 150, "lr": 2e-05, "memory": 20819, "data_time": 0.0174, "loss_rpn_cls": 0.0119, "loss_rpn_bbox": 0.01194, "s0.loss_cls": 0.09477, "s0.acc": 96.73486, "s0.loss_bbox": 0.05743, "s1.loss_cls": 0.04093, "s1.acc": 97.18799, "s1.loss_bbox": 0.05743, "s2.loss_cls": 0.01942, "s2.acc": 97.41314, "s2.loss_bbox": 0.03551, "loss": 0.32931, "time": 2.39963}
{"mode": "train", "epoch": 26, "iter": 200, "lr": 2e-05, "memory": 20819, "data_time": 0.01745, "loss_rpn_cls": 0.01204, "loss_rpn_bbox": 0.01251, "s0.loss_cls": 0.09203, "s0.acc": 96.8877, "s0.loss_bbox": 0.05432, "s1.loss_cls": 0.03956, "s1.acc": 97.32933, "s1.loss_bbox": 0.05381, "s2.loss_cls": 0.01901, "s2.acc": 97.40967, "s2.loss_bbox": 0.03534, "loss": 0.31862, "time": 2.40223}
{"mode": "train", "epoch": 26, "iter": 250, "lr": 2e-05, "memory": 20819, "data_time": 0.01693, "loss_rpn_cls": 0.01068, "loss_rpn_bbox": 0.01213, "s0.loss_cls": 0.09354, "s0.acc": 96.76807, "s0.loss_bbox": 0.05518, "s1.loss_cls": 0.04059, "s1.acc": 97.21454, "s1.loss_bbox": 0.0538, "s2.loss_cls": 0.019, "s2.acc": 97.30697, "s2.loss_bbox": 0.03398, "loss": 0.31889, "time": 2.38663}
{"mode": "train", "epoch": 26, "iter": 300, "lr": 2e-05, "memory": 20819, "data_time": 0.01747, "loss_rpn_cls": 0.01193, "loss_rpn_bbox": 0.01237, "s0.loss_cls": 0.09314, "s0.acc": 96.81787, "s0.loss_bbox": 0.05514, "s1.loss_cls": 0.04021, "s1.acc": 97.28631, "s1.loss_bbox": 0.05446, "s2.loss_cls": 0.01902, "s2.acc": 97.46997, "s2.loss_bbox": 0.03524, "loss": 0.3215, "time": 2.39318}
{"mode": "train", "epoch": 26, "iter": 350, "lr": 2e-05, "memory": 20819, "data_time": 0.01769, "loss_rpn_cls": 0.0119, "loss_rpn_bbox": 0.01223, "s0.loss_cls": 0.10069, "s0.acc": 96.61377, "s0.loss_bbox": 0.05623, "s1.loss_cls": 0.04271, "s1.acc": 97.11457, "s1.loss_bbox": 0.054, "s2.loss_cls": 0.02049, "s2.acc": 97.21702, "s2.loss_bbox": 0.03417, "loss": 0.33242, "time": 2.40751}
{"mode": "train", "epoch": 26, "iter": 400, "lr": 2e-05, "memory": 20819, "data_time": 0.01725, "loss_rpn_cls": 0.014, "loss_rpn_bbox": 0.01386, "s0.loss_cls": 0.10912, "s0.acc": 96.34033, "s0.loss_bbox": 0.0618, "s1.loss_cls": 0.04755, "s1.acc": 96.81473, "s1.loss_bbox": 0.0588, "s2.loss_cls": 0.02286, "s2.acc": 96.94125, "s2.loss_bbox": 0.03837, "loss": 0.36636, "time": 2.39608}
{"mode": "train", "epoch": 26, "iter": 450, "lr": 2e-05, "memory": 20819, "data_time": 0.0178, "loss_rpn_cls": 0.01241, "loss_rpn_bbox": 0.01173, "s0.loss_cls": 0.09454, "s0.acc": 96.78809, "s0.loss_bbox": 0.05729, "s1.loss_cls": 0.04091, "s1.acc": 97.15095, "s1.loss_bbox": 0.05534, "s2.loss_cls": 0.01916, "s2.acc": 97.36851, "s2.loss_bbox": 0.03651, "loss": 0.3279, "time": 2.40691}
{"mode": "val", "epoch": 26, "iter": 982, "lr": 2e-05, "bbox_mAP": 0.397, "bbox_mAP_50": 0.536, "bbox_mAP_75": 0.415, "bbox_mAP_s": 0.008, "bbox_mAP_m": 0.075, "bbox_mAP_l": 0.466, "bbox_mAP_copypaste": "0.397 0.536 0.415 0.008 0.075 0.466"}
{"mode": "train", "epoch": 27, "iter": 50, "lr": 2e-05, "memory": 20819, "data_time": 0.07314, "loss_rpn_cls": 0.01066, "loss_rpn_bbox": 0.01227, "s0.loss_cls": 0.08872, "s0.acc": 96.94482, "s0.loss_bbox": 0.05231, "s1.loss_cls": 0.03826, "s1.acc": 97.4472, "s1.loss_bbox": 0.05001, "s2.loss_cls": 0.01858, "s2.acc": 97.44121, "s2.loss_bbox": 0.03136, "loss": 0.30219, "time": 2.46191}
{"mode": "train", "epoch": 27, "iter": 100, "lr": 2e-05, "memory": 20819, "data_time": 0.01799, "loss_rpn_cls": 0.01048, "loss_rpn_bbox": 0.01139, "s0.loss_cls": 0.08188, "s0.acc": 97.2002, "s0.loss_bbox": 0.05032, "s1.loss_cls": 0.03491, "s1.acc": 97.66809, "s1.loss_bbox": 0.05065, "s2.loss_cls": 0.01733, "s2.acc": 97.58554, "s2.loss_bbox": 0.03331, "loss": 0.29028, "time": 2.4084}
{"mode": "train", "epoch": 27, "iter": 150, "lr": 2e-05, "memory": 20819, "data_time": 0.01715, "loss_rpn_cls": 0.01156, "loss_rpn_bbox": 0.01121, "s0.loss_cls": 0.09045, "s0.acc": 96.87158, "s0.loss_bbox": 0.05314, "s1.loss_cls": 0.03877, "s1.acc": 97.41626, "s1.loss_bbox": 0.0551, "s2.loss_cls": 0.0185, "s2.acc": 97.44647, "s2.loss_bbox": 0.03647, "loss": 0.3152, "time": 2.39451}
{"mode": "train", "epoch": 27, "iter": 200, "lr": 2e-05, "memory": 20819, "data_time": 0.01765, "loss_rpn_cls": 0.01409, "loss_rpn_bbox": 0.01266, "s0.loss_cls": 0.09487, "s0.acc": 96.74902, "s0.loss_bbox": 0.05574, "s1.loss_cls": 0.03994, "s1.acc": 97.308, "s1.loss_bbox": 0.05565, "s2.loss_cls": 0.0194, "s2.acc": 97.33093, "s2.loss_bbox": 0.03542, "loss": 0.32777, "time": 2.39959}
{"mode": "train", "epoch": 27, "iter": 250, "lr": 2e-05, "memory": 20819, "data_time": 0.01788, "loss_rpn_cls": 0.01461, "loss_rpn_bbox": 0.01393, "s0.loss_cls": 0.09726, "s0.acc": 96.75146, "s0.loss_bbox": 0.05923, "s1.loss_cls": 0.04095, "s1.acc": 97.3153, "s1.loss_bbox": 0.05541, "s2.loss_cls": 0.01927, "s2.acc": 97.49703, "s2.loss_bbox": 0.03448, "loss": 0.33513, "time": 2.40411}
{"mode": "train", "epoch": 27, "iter": 300, "lr": 2e-05, "memory": 20819, "data_time": 0.01778, "loss_rpn_cls": 0.01303, "loss_rpn_bbox": 0.01119, "s0.loss_cls": 0.08158, "s0.acc": 97.18408, "s0.loss_bbox": 0.04905, "s1.loss_cls": 0.0345, "s1.acc": 97.65963, "s1.loss_bbox": 0.04893, "s2.loss_cls": 0.01673, "s2.acc": 97.72141, "s2.loss_bbox": 0.03097, "loss": 0.28598, "time": 2.40519}
{"mode": "train", "epoch": 27, "iter": 350, "lr": 2e-05, "memory": 20819, "data_time": 0.01776, "loss_rpn_cls": 0.01186, "loss_rpn_bbox": 0.01141, "s0.loss_cls": 0.08922, "s0.acc": 96.99268, "s0.loss_bbox": 0.05712, "s1.loss_cls": 0.03686, "s1.acc": 97.5031, "s1.loss_bbox": 0.05644, "s2.loss_cls": 0.01734, "s2.acc": 97.60924, "s2.loss_bbox": 0.03631, "loss": 0.31656, "time": 2.39869}
{"mode": "train", "epoch": 27, "iter": 400, "lr": 2e-05, "memory": 20819, "data_time": 0.01783, "loss_rpn_cls": 0.01269, "loss_rpn_bbox": 0.0118, "s0.loss_cls": 0.09234, "s0.acc": 96.82812, "s0.loss_bbox": 0.05426, "s1.loss_cls": 0.03871, "s1.acc": 97.37962, "s1.loss_bbox": 0.05199, "s2.loss_cls": 0.01903, "s2.acc": 97.45052, "s2.loss_bbox": 0.03412, "loss": 0.31495, "time": 2.40064}
{"mode": "train", "epoch": 27, "iter": 450, "lr": 2e-05, "memory": 20819, "data_time": 0.01811, "loss_rpn_cls": 0.01219, "loss_rpn_bbox": 0.01184, "s0.loss_cls": 0.09653, "s0.acc": 96.68457, "s0.loss_bbox": 0.05596, "s1.loss_cls": 0.0412, "s1.acc": 97.19459, "s1.loss_bbox": 0.05442, "s2.loss_cls": 0.01969, "s2.acc": 97.29434, "s2.loss_bbox": 0.03384, "loss": 0.32565, "time": 2.40119}
{"mode": "val", "epoch": 27, "iter": 982, "lr": 2e-05, "bbox_mAP": 0.406, "bbox_mAP_50": 0.547, "bbox_mAP_75": 0.428, "bbox_mAP_s": 0.005, "bbox_mAP_m": 0.081, "bbox_mAP_l": 0.472, "bbox_mAP_copypaste": "0.406 0.547 0.428 0.005 0.081 0.472"}
{"mode": "train", "epoch": 28, "iter": 50, "lr": 2e-05, "memory": 20819, "data_time": 0.07236, "loss_rpn_cls": 0.01245, "loss_rpn_bbox": 0.0127, "s0.loss_cls": 0.09147, "s0.acc": 96.94531, "s0.loss_bbox": 0.05439, "s1.loss_cls": 0.03745, "s1.acc": 97.53997, "s1.loss_bbox": 0.05377, "s2.loss_cls": 0.01826, "s2.acc": 97.65559, "s2.loss_bbox": 0.03528, "loss": 0.31576, "time": 2.45378}
{"mode": "train", "epoch": 28, "iter": 100, "lr": 2e-05, "memory": 20819, "data_time": 0.01786, "loss_rpn_cls": 0.01059, "loss_rpn_bbox": 0.01161, "s0.loss_cls": 0.0838, "s0.acc": 97.08838, "s0.loss_bbox": 0.04794, "s1.loss_cls": 0.03507, "s1.acc": 97.55856, "s1.loss_bbox": 0.04676, "s2.loss_cls": 0.01691, "s2.acc": 97.63789, "s2.loss_bbox": 0.03108, "loss": 0.28376, "time": 2.41246}
{"mode": "train", "epoch": 28, "iter": 150, "lr": 2e-05, "memory": 20819, "data_time": 0.01747, "loss_rpn_cls": 0.01361, "loss_rpn_bbox": 0.01114, "s0.loss_cls": 0.09224, "s0.acc": 96.84814, "s0.loss_bbox": 0.05316, "s1.loss_cls": 0.03824, "s1.acc": 97.37937, "s1.loss_bbox": 0.05123, "s2.loss_cls": 0.01804, "s2.acc": 97.45184, "s2.loss_bbox": 0.03329, "loss": 0.31094, "time": 2.4036}
{"mode": "train", "epoch": 28, "iter": 200, "lr": 2e-05, "memory": 20819, "data_time": 0.01748, "loss_rpn_cls": 0.01118, "loss_rpn_bbox": 0.01263, "s0.loss_cls": 0.09258, "s0.acc": 96.81592, "s0.loss_bbox": 0.05345, "s1.loss_cls": 0.03901, "s1.acc": 97.37109, "s1.loss_bbox": 0.05163, "s2.loss_cls": 0.01897, "s2.acc": 97.50872, "s2.loss_bbox": 0.03421, "loss": 0.31364, "time": 2.39699}
{"mode": "train", "epoch": 28, "iter": 250, "lr": 2e-05, "memory": 20819, "data_time": 0.01763, "loss_rpn_cls": 0.01152, "loss_rpn_bbox": 0.01138, "s0.loss_cls": 0.08284, "s0.acc": 97.12695, "s0.loss_bbox": 0.04994, "s1.loss_cls": 0.03514, "s1.acc": 97.59881, "s1.loss_bbox": 0.04796, "s2.loss_cls": 0.01743, "s2.acc": 97.62779, "s2.loss_bbox": 0.03096, "loss": 0.28716, "time": 2.4031}
{"mode": "train", "epoch": 28, "iter": 300, "lr": 2e-05, "memory": 20819, "data_time": 0.01786, "loss_rpn_cls": 0.0093, "loss_rpn_bbox": 0.0108, "s0.loss_cls": 0.08616, "s0.acc": 97.08936, "s0.loss_bbox": 0.05033, "s1.loss_cls": 0.03544, "s1.acc": 97.63177, "s1.loss_bbox": 0.05065, "s2.loss_cls": 0.01715, "s2.acc": 97.66267, "s2.loss_bbox": 0.03382, "loss": 0.29365, "time": 2.39438}
{"mode": "train", "epoch": 28, "iter": 350, "lr": 2e-05, "memory": 20819, "data_time": 0.01795, "loss_rpn_cls": 0.01025, "loss_rpn_bbox": 0.01151, "s0.loss_cls": 0.08495, "s0.acc": 97.11963, "s0.loss_bbox": 0.05077, "s1.loss_cls": 0.0362, "s1.acc": 97.55691, "s1.loss_bbox": 0.04737, "s2.loss_cls": 0.01742, "s2.acc": 97.58723, "s2.loss_bbox": 0.0306, "loss": 0.28907, "time": 2.38193}
{"mode": "train", "epoch": 28, "iter": 400, "lr": 2e-05, "memory": 20819, "data_time": 0.01814, "loss_rpn_cls": 0.01073, "loss_rpn_bbox": 0.01032, "s0.loss_cls": 0.09024, "s0.acc": 96.92676, "s0.loss_bbox": 0.05296, "s1.loss_cls": 0.03775, "s1.acc": 97.51304, "s1.loss_bbox": 0.05267, "s2.loss_cls": 0.01799, "s2.acc": 97.53145, "s2.loss_bbox": 0.03495, "loss": 0.30761, "time": 2.39789}
{"mode": "train", "epoch": 28, "iter": 450, "lr": 2e-05, "memory": 20819, "data_time": 0.01766, "loss_rpn_cls": 0.01223, "loss_rpn_bbox": 0.01152, "s0.loss_cls": 0.09603, "s0.acc": 96.77979, "s0.loss_bbox": 0.05806, "s1.loss_cls": 0.0406, "s1.acc": 97.27216, "s1.loss_bbox": 0.05817, "s2.loss_cls": 0.0192, "s2.acc": 97.40247, "s2.loss_bbox": 0.03843, "loss": 0.33424, "time": 2.40097}
{"mode": "val", "epoch": 28, "iter": 982, "lr": 2e-05, "bbox_mAP": 0.401, "bbox_mAP_50": 0.543, "bbox_mAP_75": 0.415, "bbox_mAP_s": 0.011, "bbox_mAP_m": 0.076, "bbox_mAP_l": 0.468, "bbox_mAP_copypaste": "0.401 0.543 0.415 0.011 0.076 0.468"}
{"mode": "train", "epoch": 29, "iter": 50, "lr": 1e-05, "memory": 20819, "data_time": 0.07304, "loss_rpn_cls": 0.01276, "loss_rpn_bbox": 0.01208, "s0.loss_cls": 0.09019, "s0.acc": 96.96191, "s0.loss_bbox": 0.0528, "s1.loss_cls": 0.03778, "s1.acc": 97.50152, "s1.loss_bbox": 0.05347, "s2.loss_cls": 0.0178, "s2.acc": 97.64753, "s2.loss_bbox": 0.03402, "loss": 0.3109, "time": 2.4602}
{"mode": "train", "epoch": 29, "iter": 100, "lr": 1e-05, "memory": 20819, "data_time": 0.01844, "loss_rpn_cls": 0.00949, "loss_rpn_bbox": 0.01045, "s0.loss_cls": 0.08123, "s0.acc": 97.22852, "s0.loss_bbox": 0.0496, "s1.loss_cls": 0.03315, "s1.acc": 97.78396, "s1.loss_bbox": 0.05015, "s2.loss_cls": 0.01596, "s2.acc": 97.81662, "s2.loss_bbox": 0.03398, "loss": 0.28401, "time": 2.41677}
{"mode": "train", "epoch": 29, "iter": 150, "lr": 1e-05, "memory": 20819, "data_time": 0.01737, "loss_rpn_cls": 0.0087, "loss_rpn_bbox": 0.01006, "s0.loss_cls": 0.08465, "s0.acc": 97.05176, "s0.loss_bbox": 0.04946, "s1.loss_cls": 0.03462, "s1.acc": 97.67779, "s1.loss_bbox": 0.04827, "s2.loss_cls": 0.01628, "s2.acc": 97.78683, "s2.loss_bbox": 0.03212, "loss": 0.28415, "time": 2.3828}
{"mode": "train", "epoch": 29, "iter": 200, "lr": 1e-05, "memory": 20819, "data_time": 0.01764, "loss_rpn_cls": 0.01156, "loss_rpn_bbox": 0.01081, "s0.loss_cls": 0.08814, "s0.acc": 96.95898, "s0.loss_bbox": 0.05399, "s1.loss_cls": 0.03694, "s1.acc": 97.48723, "s1.loss_bbox": 0.05403, "s2.loss_cls": 0.01764, "s2.acc": 97.62242, "s2.loss_bbox": 0.03439, "loss": 0.30748, "time": 2.39993}
{"mode": "train", "epoch": 29, "iter": 250, "lr": 1e-05, "memory": 20819, "data_time": 0.01776, "loss_rpn_cls": 0.01116, "loss_rpn_bbox": 0.0115, "s0.loss_cls": 0.08241, "s0.acc": 97.14648, "s0.loss_bbox": 0.05092, "s1.loss_cls": 0.03369, "s1.acc": 97.74767, "s1.loss_bbox": 0.0491, "s2.loss_cls": 0.0161, "s2.acc": 97.8128, "s2.loss_bbox": 0.03246, "loss": 0.28734, "time": 2.38932}
{"mode": "train", "epoch": 29, "iter": 300, "lr": 1e-05, "memory": 20819, "data_time": 0.01739, "loss_rpn_cls": 0.00891, "loss_rpn_bbox": 0.0108, "s0.loss_cls": 0.08093, "s0.acc": 97.23145, "s0.loss_bbox": 0.04953, "s1.loss_cls": 0.0331, "s1.acc": 97.80257, "s1.loss_bbox": 0.04862, "s2.loss_cls": 0.01574, "s2.acc": 97.84145, "s2.loss_bbox": 0.03301, "loss": 0.28064, "time": 2.38638}
{"mode": "train", "epoch": 29, "iter": 350, "lr": 1e-05, "memory": 20819, "data_time": 0.0185, "loss_rpn_cls": 0.01161, "loss_rpn_bbox": 0.01295, "s0.loss_cls": 0.08933, "s0.acc": 96.99316, "s0.loss_bbox": 0.05125, "s1.loss_cls": 0.03776, "s1.acc": 97.48983, "s1.loss_bbox": 0.05074, "s2.loss_cls": 0.01816, "s2.acc": 97.54845, "s2.loss_bbox": 0.0334, "loss": 0.3052, "time": 2.40541}
{"mode": "train", "epoch": 29, "iter": 400, "lr": 1e-05, "memory": 20819, "data_time": 0.01757, "loss_rpn_cls": 0.01066, "loss_rpn_bbox": 0.01157, "s0.loss_cls": 0.08461, "s0.acc": 97.04883, "s0.loss_bbox": 0.0499, "s1.loss_cls": 0.03463, "s1.acc": 97.62577, "s1.loss_bbox": 0.05013, "s2.loss_cls": 0.01658, "s2.acc": 97.75392, "s2.loss_bbox": 0.03427, "loss": 0.29235, "time": 2.38415}
{"mode": "train", "epoch": 29, "iter": 450, "lr": 1e-05, "memory": 20819, "data_time": 0.01847, "loss_rpn_cls": 0.01055, "loss_rpn_bbox": 0.01033, "s0.loss_cls": 0.08721, "s0.acc": 96.95557, "s0.loss_bbox": 0.0512, "s1.loss_cls": 0.03641, "s1.acc": 97.48788, "s1.loss_bbox": 0.0516, "s2.loss_cls": 0.01768, "s2.acc": 97.48733, "s2.loss_bbox": 0.03383, "loss": 0.29881, "time": 2.40604}
{"mode": "val", "epoch": 29, "iter": 982, "lr": 1e-05, "bbox_mAP": 0.401, "bbox_mAP_50": 0.538, "bbox_mAP_75": 0.424, "bbox_mAP_s": 0.009, "bbox_mAP_m": 0.106, "bbox_mAP_l": 0.468, "bbox_mAP_copypaste": "0.401 0.538 0.424 0.009 0.106 0.468"}
{"mode": "train", "epoch": 30, "iter": 50, "lr": 1e-05, "memory": 20819, "data_time": 0.07285, "loss_rpn_cls": 0.0105, "loss_rpn_bbox": 0.01249, "s0.loss_cls": 0.09401, "s0.acc": 96.80957, "s0.loss_bbox": 0.0574, "s1.loss_cls": 0.03853, "s1.acc": 97.46355, "s1.loss_bbox": 0.05672, "s2.loss_cls": 0.01848, "s2.acc": 97.52415, "s2.loss_bbox": 0.0369, "loss": 0.32503, "time": 2.46503}
{"mode": "train", "epoch": 30, "iter": 100, "lr": 1e-05, "memory": 20819, "data_time": 0.01763, "loss_rpn_cls": 0.01123, "loss_rpn_bbox": 0.01158, "s0.loss_cls": 0.08307, "s0.acc": 97.09521, "s0.loss_bbox": 0.05179, "s1.loss_cls": 0.03363, "s1.acc": 97.67941, "s1.loss_bbox": 0.05133, "s2.loss_cls": 0.01594, "s2.acc": 97.73356, "s2.loss_bbox": 0.03391, "loss": 0.29249, "time": 2.42182}
{"mode": "train", "epoch": 30, "iter": 150, "lr": 1e-05, "memory": 20819, "data_time": 0.01758, "loss_rpn_cls": 0.00884, "loss_rpn_bbox": 0.01013, "s0.loss_cls": 0.07211, "s0.acc": 97.44482, "s0.loss_bbox": 0.04317, "s1.loss_cls": 0.02851, "s1.acc": 98.00887, "s1.loss_bbox": 0.04221, "s2.loss_cls": 0.01396, "s2.acc": 98.0847, "s2.loss_bbox": 0.02802, "loss": 0.24695, "time": 2.39744}
{"mode": "train", "epoch": 30, "iter": 200, "lr": 1e-05, "memory": 20819, "data_time": 0.01761, "loss_rpn_cls": 0.0094, "loss_rpn_bbox": 0.00937, "s0.loss_cls": 0.07742, "s0.acc": 97.33105, "s0.loss_bbox": 0.04613, "s1.loss_cls": 0.03228, "s1.acc": 97.8074, "s1.loss_bbox": 0.0466, "s2.loss_cls": 0.01533, "s2.acc": 97.91578, "s2.loss_bbox": 0.03208, "loss": 0.26861, "time": 2.39426}
{"mode": "train", "epoch": 30, "iter": 250, "lr": 1e-05, "memory": 20819, "data_time": 0.01739, "loss_rpn_cls": 0.01068, "loss_rpn_bbox": 0.01251, "s0.loss_cls": 0.09021, "s0.acc": 96.85352, "s0.loss_bbox": 0.05549, "s1.loss_cls": 0.03682, "s1.acc": 97.53257, "s1.loss_bbox": 0.055, "s2.loss_cls": 0.01707, "s2.acc": 97.70293, "s2.loss_bbox": 0.03578, "loss": 0.31356, "time": 2.39287}
{"mode": "train", "epoch": 30, "iter": 300, "lr": 1e-05, "memory": 20819, "data_time": 0.01781, "loss_rpn_cls": 0.01017, "loss_rpn_bbox": 0.01225, "s0.loss_cls": 0.08308, "s0.acc": 97.10449, "s0.loss_bbox": 0.05105, "s1.loss_cls": 0.03508, "s1.acc": 97.6256, "s1.loss_bbox": 0.05097, "s2.loss_cls": 0.017, "s2.acc": 97.66567, "s2.loss_bbox": 0.03231, "loss": 0.29191, "time": 2.41217}
{"mode": "train", "epoch": 30, "iter": 350, "lr": 1e-05, "memory": 20819, "data_time": 0.01779, "loss_rpn_cls": 0.01231, "loss_rpn_bbox": 0.01108, "s0.loss_cls": 0.08537, "s0.acc": 97.03955, "s0.loss_bbox": 0.0502, "s1.loss_cls": 0.03655, "s1.acc": 97.53421, "s1.loss_bbox": 0.04968, "s2.loss_cls": 0.01724, "s2.acc": 97.65536, "s2.loss_bbox": 0.0328, "loss": 0.29524, "time": 2.39771}
{"mode": "train", "epoch": 30, "iter": 400, "lr": 1e-05, "memory": 20819, "data_time": 0.01783, "loss_rpn_cls": 0.01074, "loss_rpn_bbox": 0.01053, "s0.loss_cls": 0.08027, "s0.acc": 97.26074, "s0.loss_bbox": 0.04698, "s1.loss_cls": 0.03347, "s1.acc": 97.71708, "s1.loss_bbox": 0.04775, "s2.loss_cls": 0.01602, "s2.acc": 97.79834, "s2.loss_bbox": 0.03151, "loss": 0.27726, "time": 2.41241}
{"mode": "train", "epoch": 30, "iter": 450, "lr": 1e-05, "memory": 20819, "data_time": 0.01719, "loss_rpn_cls": 0.01115, "loss_rpn_bbox": 0.01145, "s0.loss_cls": 0.08539, "s0.acc": 97.04785, "s0.loss_bbox": 0.053, "s1.loss_cls": 0.03549, "s1.acc": 97.57429, "s1.loss_bbox": 0.05156, "s2.loss_cls": 0.01673, "s2.acc": 97.71526, "s2.loss_bbox": 0.03231, "loss": 0.29707, "time": 2.39784}
{"mode": "val", "epoch": 30, "iter": 982, "lr": 1e-05, "bbox_mAP": 0.408, "bbox_mAP_50": 0.549, "bbox_mAP_75": 0.431, "bbox_mAP_s": 0.006, "bbox_mAP_m": 0.107, "bbox_mAP_l": 0.476, "bbox_mAP_copypaste": "0.408 0.549 0.431 0.006 0.107 0.476"}
{"mode": "train", "epoch": 31, "iter": 50, "lr": 1e-05, "memory": 20819, "data_time": 0.07334, "loss_rpn_cls": 0.01152, "loss_rpn_bbox": 0.01223, "s0.loss_cls": 0.08619, "s0.acc": 97.0083, "s0.loss_bbox": 0.05385, "s1.loss_cls": 0.03573, "s1.acc": 97.53747, "s1.loss_bbox": 0.0541, "s2.loss_cls": 0.01719, "s2.acc": 97.56567, "s2.loss_bbox": 0.03521, "loss": 0.30603, "time": 2.46067}
{"mode": "train", "epoch": 31, "iter": 100, "lr": 1e-05, "memory": 20819, "data_time": 0.01752, "loss_rpn_cls": 0.0111, "loss_rpn_bbox": 0.01183, "s0.loss_cls": 0.08558, "s0.acc": 97.01514, "s0.loss_bbox": 0.05095, "s1.loss_cls": 0.03486, "s1.acc": 97.66719, "s1.loss_bbox": 0.04966, "s2.loss_cls": 0.01631, "s2.acc": 97.68376, "s2.loss_bbox": 0.03185, "loss": 0.29214, "time": 2.39526}
{"mode": "train", "epoch": 31, "iter": 150, "lr": 1e-05, "memory": 20819, "data_time": 0.01855, "loss_rpn_cls": 0.01102, "loss_rpn_bbox": 0.01116, "s0.loss_cls": 0.08692, "s0.acc": 97.0083, "s0.loss_bbox": 0.0529, "s1.loss_cls": 0.036, "s1.acc": 97.60617, "s1.loss_bbox": 0.05001, "s2.loss_cls": 0.0175, "s2.acc": 97.69441, "s2.loss_bbox": 0.03271, "loss": 0.2982, "time": 2.41395}
{"mode": "train", "epoch": 31, "iter": 200, "lr": 1e-05, "memory": 20819, "data_time": 0.01865, "loss_rpn_cls": 0.01106, "loss_rpn_bbox": 0.01191, "s0.loss_cls": 0.08182, "s0.acc": 97.18994, "s0.loss_bbox": 0.05181, "s1.loss_cls": 0.03348, "s1.acc": 97.72153, "s1.loss_bbox": 0.0529, "s2.loss_cls": 0.01574, "s2.acc": 97.86684, "s2.loss_bbox": 0.03463, "loss": 0.29335, "time": 2.40643}
{"mode": "train", "epoch": 31, "iter": 250, "lr": 1e-05, "memory": 20819, "data_time": 0.01658, "loss_rpn_cls": 0.01069, "loss_rpn_bbox": 0.01041, "s0.loss_cls": 0.07743, "s0.acc": 97.31689, "s0.loss_bbox": 0.04718, "s1.loss_cls": 0.03305, "s1.acc": 97.75924, "s1.loss_bbox": 0.04705, "s2.loss_cls": 0.01581, "s2.acc": 97.81904, "s2.loss_bbox": 0.03195, "loss": 0.27357, "time": 2.41575}
{"mode": "train", "epoch": 31, "iter": 300, "lr": 1e-05, "memory": 20819, "data_time": 0.01765, "loss_rpn_cls": 0.00926, "loss_rpn_bbox": 0.01121, "s0.loss_cls": 0.0834, "s0.acc": 97.15381, "s0.loss_bbox": 0.04766, "s1.loss_cls": 0.03438, "s1.acc": 97.71964, "s1.loss_bbox": 0.04442, "s2.loss_cls": 0.01662, "s2.acc": 97.79301, "s2.loss_bbox": 0.02915, "loss": 0.2761, "time": 2.40658}
{"mode": "train", "epoch": 31, "iter": 350, "lr": 1e-05, "memory": 20819, "data_time": 0.0166, "loss_rpn_cls": 0.0094, "loss_rpn_bbox": 0.01159, "s0.loss_cls": 0.07617, "s0.acc": 97.35498, "s0.loss_bbox": 0.04794, "s1.loss_cls": 0.02993, "s1.acc": 97.9575, "s1.loss_bbox": 0.04584, "s2.loss_cls": 0.01372, "s2.acc": 98.0889, "s2.loss_bbox": 0.03, "loss": 0.26461, "time": 2.39614}
{"mode": "train", "epoch": 31, "iter": 400, "lr": 1e-05, "memory": 20819, "data_time": 0.01736, "loss_rpn_cls": 0.00906, "loss_rpn_bbox": 0.01002, "s0.loss_cls": 0.0764, "s0.acc": 97.31641, "s0.loss_bbox": 0.04832, "s1.loss_cls": 0.03079, "s1.acc": 97.90086, "s1.loss_bbox": 0.04918, "s2.loss_cls": 0.01458, "s2.acc": 98.03466, "s2.loss_bbox": 0.03274, "loss": 0.27109, "time": 2.4054}
{"mode": "train", "epoch": 31, "iter": 450, "lr": 1e-05, "memory": 20819, "data_time": 0.01666, "loss_rpn_cls": 0.00978, "loss_rpn_bbox": 0.00902, "s0.loss_cls": 0.06937, "s0.acc": 97.64453, "s0.loss_bbox": 0.04087, "s1.loss_cls": 0.02938, "s1.acc": 98.02675, "s1.loss_bbox": 0.04227, "s2.loss_cls": 0.0142, "s2.acc": 98.12298, "s2.loss_bbox": 0.02788, "loss": 0.24277, "time": 2.39114}
{"mode": "val", "epoch": 31, "iter": 982, "lr": 1e-05, "bbox_mAP": 0.412, "bbox_mAP_50": 0.55, "bbox_mAP_75": 0.435, "bbox_mAP_s": 0.009, "bbox_mAP_m": 0.106, "bbox_mAP_l": 0.48, "bbox_mAP_copypaste": "0.412 0.550 0.435 0.009 0.106 0.480"}
{"mode": "train", "epoch": 32, "iter": 50, "lr": 1e-05, "memory": 20819, "data_time": 0.07304, "loss_rpn_cls": 0.01012, "loss_rpn_bbox": 0.00911, "s0.loss_cls": 0.07237, "s0.acc": 97.50195, "s0.loss_bbox": 0.0454, "s1.loss_cls": 0.02921, "s1.acc": 97.99799, "s1.loss_bbox": 0.04557, "s2.loss_cls": 0.01381, "s2.acc": 98.04827, "s2.loss_bbox": 0.0304, "loss": 0.25599, "time": 2.45669}
{"mode": "train", "epoch": 32, "iter": 100, "lr": 1e-05, "memory": 20819, "data_time": 0.01695, "loss_rpn_cls": 0.01059, "loss_rpn_bbox": 0.01113, "s0.loss_cls": 0.08625, "s0.acc": 97.05762, "s0.loss_bbox": 0.05297, "s1.loss_cls": 0.03559, "s1.acc": 97.6434, "s1.loss_bbox": 0.05281, "s2.loss_cls": 0.01741, "s2.acc": 97.70227, "s2.loss_bbox": 0.03362, "loss": 0.30037, "time": 2.4132}
{"mode": "train", "epoch": 32, "iter": 150, "lr": 1e-05, "memory": 20819, "data_time": 0.01711, "loss_rpn_cls": 0.00993, "loss_rpn_bbox": 0.01011, "s0.loss_cls": 0.07631, "s0.acc": 97.33545, "s0.loss_bbox": 0.0481, "s1.loss_cls": 0.03102, "s1.acc": 97.8869, "s1.loss_bbox": 0.05008, "s2.loss_cls": 0.01463, "s2.acc": 97.94699, "s2.loss_bbox": 0.03221, "loss": 0.27238, "time": 2.39854}
{"mode": "train", "epoch": 32, "iter": 200, "lr": 1e-05, "memory": 20819, "data_time": 0.01677, "loss_rpn_cls": 0.01046, "loss_rpn_bbox": 0.01002, "s0.loss_cls": 0.07285, "s0.acc": 97.49219, "s0.loss_bbox": 0.04484, "s1.loss_cls": 0.02898, "s1.acc": 98.07759, "s1.loss_bbox": 0.04209, "s2.loss_cls": 0.01397, "s2.acc": 98.1648, "s2.loss_bbox": 0.0269, "loss": 0.25012, "time": 2.39392}
{"mode": "train", "epoch": 32, "iter": 250, "lr": 1e-05, "memory": 20819, "data_time": 0.01746, "loss_rpn_cls": 0.01037, "loss_rpn_bbox": 0.01185, "s0.loss_cls": 0.08409, "s0.acc": 97.14502, "s0.loss_bbox": 0.05084, "s1.loss_cls": 0.03432, "s1.acc": 97.728, "s1.loss_bbox": 0.0515, "s2.loss_cls": 0.01615, "s2.acc": 97.80857, "s2.loss_bbox": 0.03283, "loss": 0.29195, "time": 2.39798}
{"mode": "train", "epoch": 32, "iter": 300, "lr": 1e-05, "memory": 20819, "data_time": 0.01784, "loss_rpn_cls": 0.0107, "loss_rpn_bbox": 0.01137, "s0.loss_cls": 0.08633, "s0.acc": 96.99854, "s0.loss_bbox": 0.05326, "s1.loss_cls": 0.03456, "s1.acc": 97.67576, "s1.loss_bbox": 0.05157, "s2.loss_cls": 0.01656, "s2.acc": 97.74749, "s2.loss_bbox": 0.03336, "loss": 0.2977, "time": 2.39338}
{"mode": "train", "epoch": 32, "iter": 350, "lr": 1e-05, "memory": 20819, "data_time": 0.01817, "loss_rpn_cls": 0.01023, "loss_rpn_bbox": 0.01027, "s0.loss_cls": 0.07559, "s0.acc": 97.39307, "s0.loss_bbox": 0.04612, "s1.loss_cls": 0.03079, "s1.acc": 97.87821, "s1.loss_bbox": 0.04621, "s2.loss_cls": 0.01459, "s2.acc": 98.00577, "s2.loss_bbox": 0.03147, "loss": 0.26525, "time": 2.4041}
{"mode": "train", "epoch": 32, "iter": 400, "lr": 1e-05, "memory": 20819, "data_time": 0.01764, "loss_rpn_cls": 0.00924, "loss_rpn_bbox": 0.01069, "s0.loss_cls": 0.07684, "s0.acc": 97.39746, "s0.loss_bbox": 0.04636, "s1.loss_cls": 0.03066, "s1.acc": 97.95299, "s1.loss_bbox": 0.04539, "s2.loss_cls": 0.01463, "s2.acc": 97.99565, "s2.loss_bbox": 0.02837, "loss": 0.26218, "time": 2.39401}
{"mode": "train", "epoch": 32, "iter": 450, "lr": 1e-05, "memory": 20819, "data_time": 0.01906, "loss_rpn_cls": 0.00997, "loss_rpn_bbox": 0.00991, "s0.loss_cls": 0.07687, "s0.acc": 97.3125, "s0.loss_bbox": 0.04566, "s1.loss_cls": 0.03133, "s1.acc": 97.84239, "s1.loss_bbox": 0.04551, "s2.loss_cls": 0.01535, "s2.acc": 97.90278, "s2.loss_bbox": 0.02964, "loss": 0.26424, "time": 2.40261}
{"mode": "val", "epoch": 32, "iter": 982, "lr": 1e-05, "bbox_mAP": 0.41, "bbox_mAP_50": 0.549, "bbox_mAP_75": 0.428, "bbox_mAP_s": 0.009, "bbox_mAP_m": 0.101, "bbox_mAP_l": 0.477, "bbox_mAP_copypaste": "0.410 0.549 0.428 0.009 0.101 0.477"}
{"mode": "train", "epoch": 33, "iter": 50, "lr": 0.0, "memory": 20819, "data_time": 0.07377, "loss_rpn_cls": 0.00894, "loss_rpn_bbox": 0.01041, "s0.loss_cls": 0.07865, "s0.acc": 97.27295, "s0.loss_bbox": 0.04861, "s1.loss_cls": 0.03228, "s1.acc": 97.76861, "s1.loss_bbox": 0.0488, "s2.loss_cls": 0.01518, "s2.acc": 97.92006, "s2.loss_bbox": 0.03216, "loss": 0.27502, "time": 2.45212}
{"mode": "train", "epoch": 33, "iter": 100, "lr": 0.0, "memory": 20819, "data_time": 0.01727, "loss_rpn_cls": 0.00931, "loss_rpn_bbox": 0.01065, "s0.loss_cls": 0.06911, "s0.acc": 97.62109, "s0.loss_bbox": 0.04682, "s1.loss_cls": 0.02742, "s1.acc": 98.09559, "s1.loss_bbox": 0.04681, "s2.loss_cls": 0.01375, "s2.acc": 98.0534, "s2.loss_bbox": 0.02993, "loss": 0.2538, "time": 2.40755}
{"mode": "train", "epoch": 33, "iter": 150, "lr": 0.0, "memory": 20819, "data_time": 0.01669, "loss_rpn_cls": 0.00826, "loss_rpn_bbox": 0.00949, "s0.loss_cls": 0.06958, "s0.acc": 97.60156, "s0.loss_bbox": 0.04539, "s1.loss_cls": 0.02818, "s1.acc": 98.14008, "s1.loss_bbox": 0.04377, "s2.loss_cls": 0.01359, "s2.acc": 98.21164, "s2.loss_bbox": 0.02963, "loss": 0.24789, "time": 2.3981}
{"mode": "train", "epoch": 33, "iter": 200, "lr": 0.0, "memory": 20819, "data_time": 0.01676, "loss_rpn_cls": 0.00919, "loss_rpn_bbox": 0.01218, "s0.loss_cls": 0.07672, "s0.acc": 97.34766, "s0.loss_bbox": 0.04876, "s1.loss_cls": 0.03296, "s1.acc": 97.74948, "s1.loss_bbox": 0.04559, "s2.loss_cls": 0.01586, "s2.acc": 97.81018, "s2.loss_bbox": 0.02822, "loss": 0.26948, "time": 2.3987}
{"mode": "train", "epoch": 33, "iter": 250, "lr": 0.0, "memory": 20819, "data_time": 0.01736, "loss_rpn_cls": 0.00969, "loss_rpn_bbox": 0.00894, "s0.loss_cls": 0.07168, "s0.acc": 97.521, "s0.loss_bbox": 0.0423, "s1.loss_cls": 0.02757, "s1.acc": 98.19277, "s1.loss_bbox": 0.04221, "s2.loss_cls": 0.01311, "s2.acc": 98.28404, "s2.loss_bbox": 0.0277, "loss": 0.2432, "time": 2.40166}
{"mode": "train", "epoch": 33, "iter": 300, "lr": 0.0, "memory": 20819, "data_time": 0.01729, "loss_rpn_cls": 0.01015, "loss_rpn_bbox": 0.01112, "s0.loss_cls": 0.07735, "s0.acc": 97.31592, "s0.loss_bbox": 0.04598, "s1.loss_cls": 0.03083, "s1.acc": 97.92453, "s1.loss_bbox": 0.04567, "s2.loss_cls": 0.01436, "s2.acc": 98.0622, "s2.loss_bbox": 0.03025, "loss": 0.26573, "time": 2.39309}
{"mode": "train", "epoch": 33, "iter": 350, "lr": 0.0, "memory": 20819, "data_time": 0.01773, "loss_rpn_cls": 0.01031, "loss_rpn_bbox": 0.01054, "s0.loss_cls": 0.07672, "s0.acc": 97.32373, "s0.loss_bbox": 0.04736, "s1.loss_cls": 0.03125, "s1.acc": 97.82322, "s1.loss_bbox": 0.04867, "s2.loss_cls": 0.01562, "s2.acc": 97.80723, "s2.loss_bbox": 0.03086, "loss": 0.27133, "time": 2.41561}
{"mode": "train", "epoch": 33, "iter": 400, "lr": 0.0, "memory": 20819, "data_time": 0.01746, "loss_rpn_cls": 0.00943, "loss_rpn_bbox": 0.01031, "s0.loss_cls": 0.08002, "s0.acc": 97.23242, "s0.loss_bbox": 0.05126, "s1.loss_cls": 0.03317, "s1.acc": 97.80283, "s1.loss_bbox": 0.04953, "s2.loss_cls": 0.0155, "s2.acc": 97.92383, "s2.loss_bbox": 0.03067, "loss": 0.27988, "time": 2.42261}
{"mode": "train", "epoch": 33, "iter": 450, "lr": 0.0, "memory": 20819, "data_time": 0.01682, "loss_rpn_cls": 0.01097, "loss_rpn_bbox": 0.0116, "s0.loss_cls": 0.07985, "s0.acc": 97.26611, "s0.loss_bbox": 0.04849, "s1.loss_cls": 0.03212, "s1.acc": 97.84196, "s1.loss_bbox": 0.04811, "s2.loss_cls": 0.01563, "s2.acc": 97.87861, "s2.loss_bbox": 0.03026, "loss": 0.27703, "time": 2.39489}
{"mode": "val", "epoch": 33, "iter": 982, "lr": 0.0, "bbox_mAP": 0.41, "bbox_mAP_50": 0.55, "bbox_mAP_75": 0.43, "bbox_mAP_s": 0.007, "bbox_mAP_m": 0.101, "bbox_mAP_l": 0.478, "bbox_mAP_copypaste": "0.410 0.550 0.430 0.007 0.101 0.478"}
{"mode": "train", "epoch": 34, "iter": 50, "lr": 0.0, "memory": 20819, "data_time": 0.07279, "loss_rpn_cls": 0.0088, "loss_rpn_bbox": 0.01055, "s0.loss_cls": 0.07832, "s0.acc": 97.30225, "s0.loss_bbox": 0.0485, "s1.loss_cls": 0.0318, "s1.acc": 97.85419, "s1.loss_bbox": 0.04939, "s2.loss_cls": 0.01554, "s2.acc": 97.92687, "s2.loss_bbox": 0.0327, "loss": 0.27561, "time": 2.44638}
{"mode": "train", "epoch": 34, "iter": 100, "lr": 0.0, "memory": 20819, "data_time": 0.01753, "loss_rpn_cls": 0.00724, "loss_rpn_bbox": 0.01035, "s0.loss_cls": 0.07037, "s0.acc": 97.57227, "s0.loss_bbox": 0.04269, "s1.loss_cls": 0.02709, "s1.acc": 98.20002, "s1.loss_bbox": 0.04159, "s2.loss_cls": 0.01267, "s2.acc": 98.29645, "s2.loss_bbox": 0.02804, "loss": 0.24004, "time": 2.39975}
{"mode": "train", "epoch": 34, "iter": 150, "lr": 0.0, "memory": 20819, "data_time": 0.01746, "loss_rpn_cls": 0.00801, "loss_rpn_bbox": 0.01065, "s0.loss_cls": 0.07921, "s0.acc": 97.23584, "s0.loss_bbox": 0.05194, "s1.loss_cls": 0.0312, "s1.acc": 97.87811, "s1.loss_bbox": 0.05062, "s2.loss_cls": 0.015, "s2.acc": 97.95998, "s2.loss_bbox": 0.03387, "loss": 0.28049, "time": 2.40906}
{"mode": "train", "epoch": 34, "iter": 200, "lr": 0.0, "memory": 20819, "data_time": 0.01798, "loss_rpn_cls": 0.00944, "loss_rpn_bbox": 0.01123, "s0.loss_cls": 0.0755, "s0.acc": 97.37158, "s0.loss_bbox": 0.04756, "s1.loss_cls": 0.03104, "s1.acc": 97.93252, "s1.loss_bbox": 0.04675, "s2.loss_cls": 0.01498, "s2.acc": 97.93421, "s2.loss_bbox": 0.03027, "loss": 0.26676, "time": 2.39754}
{"mode": "train", "epoch": 34, "iter": 250, "lr": 0.0, "memory": 20819, "data_time": 0.01745, "loss_rpn_cls": 0.01201, "loss_rpn_bbox": 0.00986, "s0.loss_cls": 0.07465, "s0.acc": 97.56348, "s0.loss_bbox": 0.04513, "s1.loss_cls": 0.02992, "s1.acc": 98.04276, "s1.loss_bbox": 0.04422, "s2.loss_cls": 0.01414, "s2.acc": 98.12443, "s2.loss_bbox": 0.02918, "loss": 0.25911, "time": 2.39682}
{"mode": "train", "epoch": 34, "iter": 300, "lr": 0.0, "memory": 20819, "data_time": 0.01758, "loss_rpn_cls": 0.00771, "loss_rpn_bbox": 0.01073, "s0.loss_cls": 0.07631, "s0.acc": 97.34912, "s0.loss_bbox": 0.04632, "s1.loss_cls": 0.02976, "s1.acc": 98.02, "s1.loss_bbox": 0.04737, "s2.loss_cls": 0.01426, "s2.acc": 98.1311, "s2.loss_bbox": 0.03063, "loss": 0.26309, "time": 2.39966}
{"mode": "train", "epoch": 34, "iter": 350, "lr": 0.0, "memory": 20819, "data_time": 0.0181, "loss_rpn_cls": 0.00861, "loss_rpn_bbox": 0.01045, "s0.loss_cls": 0.08012, "s0.acc": 97.2124, "s0.loss_bbox": 0.05003, "s1.loss_cls": 0.03085, "s1.acc": 97.88637, "s1.loss_bbox": 0.04838, "s2.loss_cls": 0.01482, "s2.acc": 97.91087, "s2.loss_bbox": 0.03255, "loss": 0.27581, "time": 2.40376}
{"mode": "train", "epoch": 34, "iter": 400, "lr": 0.0, "memory": 20819, "data_time": 0.01796, "loss_rpn_cls": 0.00955, "loss_rpn_bbox": 0.01011, "s0.loss_cls": 0.06974, "s0.acc": 97.54541, "s0.loss_bbox": 0.04448, "s1.loss_cls": 0.0282, "s1.acc": 98.0902, "s1.loss_bbox": 0.04421, "s2.loss_cls": 0.01355, "s2.acc": 98.13392, "s2.loss_bbox": 0.02938, "loss": 0.24922, "time": 2.39357}
{"mode": "train", "epoch": 34, "iter": 450, "lr": 0.0, "memory": 20819, "data_time": 0.018, "loss_rpn_cls": 0.01038, "loss_rpn_bbox": 0.01192, "s0.loss_cls": 0.08046, "s0.acc": 97.26465, "s0.loss_bbox": 0.0495, "s1.loss_cls": 0.03273, "s1.acc": 97.81472, "s1.loss_bbox": 0.04793, "s2.loss_cls": 0.01521, "s2.acc": 97.94473, "s2.loss_bbox": 0.03125, "loss": 0.2794, "time": 2.4036}
{"mode": "val", "epoch": 34, "iter": 982, "lr": 0.0, "bbox_mAP": 0.41, "bbox_mAP_50": 0.55, "bbox_mAP_75": 0.427, "bbox_mAP_s": 0.005, "bbox_mAP_m": 0.108, "bbox_mAP_l": 0.478, "bbox_mAP_copypaste": "0.410 0.550 0.427 0.005 0.108 0.478"}
{"mode": "train", "epoch": 35, "iter": 50, "lr": 0.0, "memory": 20819, "data_time": 0.07305, "loss_rpn_cls": 0.00967, "loss_rpn_bbox": 0.00976, "s0.loss_cls": 0.07873, "s0.acc": 97.27393, "s0.loss_bbox": 0.04971, "s1.loss_cls": 0.03264, "s1.acc": 97.78799, "s1.loss_bbox": 0.04938, "s2.loss_cls": 0.01564, "s2.acc": 97.9708, "s2.loss_bbox": 0.03286, "loss": 0.2784, "time": 2.46168}
{"mode": "train", "epoch": 35, "iter": 100, "lr": 0.0, "memory": 20819, "data_time": 0.01838, "loss_rpn_cls": 0.01062, "loss_rpn_bbox": 0.01209, "s0.loss_cls": 0.08437, "s0.acc": 97.11426, "s0.loss_bbox": 0.05273, "s1.loss_cls": 0.03523, "s1.acc": 97.60794, "s1.loss_bbox": 0.05144, "s2.loss_cls": 0.01704, "s2.acc": 97.68843, "s2.loss_bbox": 0.03414, "loss": 0.29768, "time": 2.39889}
{"mode": "train", "epoch": 35, "iter": 150, "lr": 0.0, "memory": 20819, "data_time": 0.01824, "loss_rpn_cls": 0.00837, "loss_rpn_bbox": 0.01081, "s0.loss_cls": 0.07678, "s0.acc": 97.31934, "s0.loss_bbox": 0.04974, "s1.loss_cls": 0.03039, "s1.acc": 97.92638, "s1.loss_bbox": 0.04718, "s2.loss_cls": 0.01457, "s2.acc": 97.9985, "s2.loss_bbox": 0.03018, "loss": 0.26804, "time": 2.39372}
{"mode": "train", "epoch": 35, "iter": 200, "lr": 0.0, "memory": 20819, "data_time": 0.01805, "loss_rpn_cls": 0.01006, "loss_rpn_bbox": 0.01099, "s0.loss_cls": 0.07925, "s0.acc": 97.28906, "s0.loss_bbox": 0.04958, "s1.loss_cls": 0.03183, "s1.acc": 97.87417, "s1.loss_bbox": 0.04756, "s2.loss_cls": 0.01516, "s2.acc": 97.96279, "s2.loss_bbox": 0.03094, "loss": 0.27539, "time": 2.41188}
{"mode": "train", "epoch": 35, "iter": 250, "lr": 0.0, "memory": 20819, "data_time": 0.0177, "loss_rpn_cls": 0.00914, "loss_rpn_bbox": 0.00966, "s0.loss_cls": 0.06798, "s0.acc": 97.66699, "s0.loss_bbox": 0.04254, "s1.loss_cls": 0.02675, "s1.acc": 98.17204, "s1.loss_bbox": 0.04337, "s2.loss_cls": 0.01279, "s2.acc": 98.22924, "s2.loss_bbox": 0.02932, "loss": 0.24155, "time": 2.39956}
{"mode": "train", "epoch": 35, "iter": 300, "lr": 0.0, "memory": 20819, "data_time": 0.01808, "loss_rpn_cls": 0.00881, "loss_rpn_bbox": 0.00935, "s0.loss_cls": 0.06082, "s0.acc": 97.81787, "s0.loss_bbox": 0.04141, "s1.loss_cls": 0.023, "s1.acc": 98.36504, "s1.loss_bbox": 0.04021, "s2.loss_cls": 0.01072, "s2.acc": 98.49889, "s2.loss_bbox": 0.02712, "loss": 0.22144, "time": 2.3981}
{"mode": "train", "epoch": 35, "iter": 350, "lr": 0.0, "memory": 20819, "data_time": 0.01829, "loss_rpn_cls": 0.00788, "loss_rpn_bbox": 0.01035, "s0.loss_cls": 0.06838, "s0.acc": 97.66602, "s0.loss_bbox": 0.04199, "s1.loss_cls": 0.02677, "s1.acc": 98.18059, "s1.loss_bbox": 0.04376, "s2.loss_cls": 0.01303, "s2.acc": 98.174, "s2.loss_bbox": 0.0293, "loss": 0.24146, "time": 2.39373}
{"mode": "train", "epoch": 35, "iter": 400, "lr": 0.0, "memory": 20819, "data_time": 0.01781, "loss_rpn_cls": 0.0098, "loss_rpn_bbox": 0.01193, "s0.loss_cls": 0.08933, "s0.acc": 96.94238, "s0.loss_bbox": 0.05429, "s1.loss_cls": 0.03611, "s1.acc": 97.60923, "s1.loss_bbox": 0.05144, "s2.loss_cls": 0.0172, "s2.acc": 97.82709, "s2.loss_bbox": 0.03412, "loss": 0.30423, "time": 2.40081}
{"mode": "train", "epoch": 35, "iter": 450, "lr": 0.0, "memory": 20819, "data_time": 0.01781, "loss_rpn_cls": 0.00937, "loss_rpn_bbox": 0.00892, "s0.loss_cls": 0.06826, "s0.acc": 97.66455, "s0.loss_bbox": 0.04089, "s1.loss_cls": 0.02751, "s1.acc": 98.16764, "s1.loss_bbox": 0.04277, "s2.loss_cls": 0.0126, "s2.acc": 98.27733, "s2.loss_bbox": 0.02907, "loss": 0.23941, "time": 2.39536}
{"mode": "val", "epoch": 35, "iter": 982, "lr": 0.0, "bbox_mAP": 0.41, "bbox_mAP_50": 0.549, "bbox_mAP_75": 0.428, "bbox_mAP_s": 0.006, "bbox_mAP_m": 0.107, "bbox_mAP_l": 0.477, "bbox_mAP_copypaste": "0.410 0.549 0.428 0.006 0.107 0.477"}
{"mode": "train", "epoch": 36, "iter": 50, "lr": 0.0, "memory": 20819, "data_time": 0.07289, "loss_rpn_cls": 0.00972, "loss_rpn_bbox": 0.01178, "s0.loss_cls": 0.0792, "s0.acc": 97.34277, "s0.loss_bbox": 0.04839, "s1.loss_cls": 0.03102, "s1.acc": 97.88328, "s1.loss_bbox": 0.04836, "s2.loss_cls": 0.01468, "s2.acc": 97.91488, "s2.loss_bbox": 0.03294, "loss": 0.27607, "time": 2.4486}
{"mode": "train", "epoch": 36, "iter": 100, "lr": 0.0, "memory": 20819, "data_time": 0.01786, "loss_rpn_cls": 0.01002, "loss_rpn_bbox": 0.01042, "s0.loss_cls": 0.06461, "s0.acc": 97.71289, "s0.loss_bbox": 0.0421, "s1.loss_cls": 0.0257, "s1.acc": 98.20745, "s1.loss_bbox": 0.04154, "s2.loss_cls": 0.01262, "s2.acc": 98.21826, "s2.loss_bbox": 0.02835, "loss": 0.23535, "time": 2.40472}
{"mode": "train", "epoch": 36, "iter": 150, "lr": 0.0, "memory": 20819, "data_time": 0.01767, "loss_rpn_cls": 0.00864, "loss_rpn_bbox": 0.0097, "s0.loss_cls": 0.07187, "s0.acc": 97.50049, "s0.loss_bbox": 0.04484, "s1.loss_cls": 0.02831, "s1.acc": 98.01582, "s1.loss_bbox": 0.04383, "s2.loss_cls": 0.01379, "s2.acc": 98.05606, "s2.loss_bbox": 0.02772, "loss": 0.2487, "time": 2.40259}
{"mode": "train", "epoch": 36, "iter": 200, "lr": 0.0, "memory": 20819, "data_time": 0.01777, "loss_rpn_cls": 0.00785, "loss_rpn_bbox": 0.01099, "s0.loss_cls": 0.07512, "s0.acc": 97.38672, "s0.loss_bbox": 0.04671, "s1.loss_cls": 0.02928, "s1.acc": 98.03506, "s1.loss_bbox": 0.04626, "s2.loss_cls": 0.01409, "s2.acc": 98.06676, "s2.loss_bbox": 0.02992, "loss": 0.26022, "time": 2.40846}
{"mode": "train", "epoch": 36, "iter": 250, "lr": 0.0, "memory": 20819, "data_time": 0.01759, "loss_rpn_cls": 0.00866, "loss_rpn_bbox": 0.01067, "s0.loss_cls": 0.07825, "s0.acc": 97.3335, "s0.loss_bbox": 0.04996, "s1.loss_cls": 0.03045, "s1.acc": 97.95253, "s1.loss_bbox": 0.04848, "s2.loss_cls": 0.01438, "s2.acc": 98.07446, "s2.loss_bbox": 0.03104, "loss": 0.27189, "time": 2.3931}
{"mode": "train", "epoch": 36, "iter": 300, "lr": 0.0, "memory": 20819, "data_time": 0.01773, "loss_rpn_cls": 0.00758, "loss_rpn_bbox": 0.00893, "s0.loss_cls": 0.07238, "s0.acc": 97.46191, "s0.loss_bbox": 0.04608, "s1.loss_cls": 0.03055, "s1.acc": 97.93803, "s1.loss_bbox": 0.04549, "s2.loss_cls": 0.01478, "s2.acc": 97.97845, "s2.loss_bbox": 0.03093, "loss": 0.25671, "time": 2.38732}
{"mode": "train", "epoch": 36, "iter": 350, "lr": 0.0, "memory": 20819, "data_time": 0.01728, "loss_rpn_cls": 0.00949, "loss_rpn_bbox": 0.00943, "s0.loss_cls": 0.06873, "s0.acc": 97.64795, "s0.loss_bbox": 0.04012, "s1.loss_cls": 0.02782, "s1.acc": 98.10896, "s1.loss_bbox": 0.03975, "s2.loss_cls": 0.01304, "s2.acc": 98.20255, "s2.loss_bbox": 0.02664, "loss": 0.23501, "time": 2.38434}
{"mode": "train", "epoch": 36, "iter": 400, "lr": 0.0, "memory": 20819, "data_time": 0.01752, "loss_rpn_cls": 0.01053, "loss_rpn_bbox": 0.01218, "s0.loss_cls": 0.07605, "s0.acc": 97.38916, "s0.loss_bbox": 0.04786, "s1.loss_cls": 0.03021, "s1.acc": 97.93508, "s1.loss_bbox": 0.04574, "s2.loss_cls": 0.01424, "s2.acc": 98.02011, "s2.loss_bbox": 0.03022, "loss": 0.26702, "time": 2.40492}
{"mode": "train", "epoch": 36, "iter": 450, "lr": 0.0, "memory": 20819, "data_time": 0.01778, "loss_rpn_cls": 0.01044, "loss_rpn_bbox": 0.01107, "s0.loss_cls": 0.08659, "s0.acc": 97.02686, "s0.loss_bbox": 0.05299, "s1.loss_cls": 0.03446, "s1.acc": 97.70642, "s1.loss_bbox": 0.04963, "s2.loss_cls": 0.01611, "s2.acc": 97.86463, "s2.loss_bbox": 0.03194, "loss": 0.29324, "time": 2.40932}
{"mode": "val", "epoch": 36, "iter": 982, "lr": 0.0, "bbox_mAP": 0.409, "bbox_mAP_50": 0.548, "bbox_mAP_75": 0.427, "bbox_mAP_s": 0.007, "bbox_mAP_m": 0.106, "bbox_mAP_l": 0.477, "bbox_mAP_copypaste": "0.409 0.548 0.427 0.007 0.106 0.477"}
