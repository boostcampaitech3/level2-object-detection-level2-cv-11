{"mmdet_version": "2.22.0", "CLASSES": ["General trash", "Paper", "Paper pack", "Metal", "Glass", "Plastic", "Styrofoam", "Plastic bag", "Battery", "Clothing"], "env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-PCIE-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.5\nMMCV: 1.4.6\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.22.0+", "config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=96,\n        depths=[2, 2, 18, 2],\n        num_heads=[3, 6, 12, 24],\n        window_size=7,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.2,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[96, 192, 384, 768],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = '/opt/ml/detection/dataset/'\nclasses = ('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n           'Styrofoam', 'Plastic bag', 'Battery', 'Clothing')\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\nimg_scale = (1024, 1024)\nalbu_train_transforms = [\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Flip', p=1.0),\n            dict(type='RandomRotate90', p=1.0)\n        ],\n        p=0.5),\n    dict(\n        type='RandomResizedCrop',\n        height=1024,\n        width=1024,\n        scale=(0.5, 1.0),\n        p=0.5),\n    dict(\n        type='RandomBrightnessContrast',\n        brightness_limit=0.1,\n        contrast_limit=0.15,\n        p=0.5),\n    dict(\n        type='HueSaturationValue',\n        hue_shift_limit=15,\n        sat_shift_limit=25,\n        val_shift_limit=10,\n        p=0.5),\n    dict(type='GaussNoise', p=0.3),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Blur', p=1.0),\n            dict(type='GaussianBlur', p=1.0),\n            dict(type='MedianBlur', blur_limit=5, p=1.0),\n            dict(type='MotionBlur', p=1.0)\n        ],\n        p=0.1)\n]\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1024, 1024), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.0),\n    dict(\n        type='Albu',\n        transforms=[\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Flip', p=1.0),\n                    dict(type='RandomRotate90', p=1.0)\n                ],\n                p=0.5),\n            dict(\n                type='RandomResizedCrop',\n                height=1024,\n                width=1024,\n                scale=(0.5, 1.0),\n                p=0.5),\n            dict(\n                type='RandomBrightnessContrast',\n                brightness_limit=0.1,\n                contrast_limit=0.15,\n                p=0.5),\n            dict(\n                type='HueSaturationValue',\n                hue_shift_limit=15,\n                sat_shift_limit=25,\n                val_shift_limit=10,\n                p=0.5),\n            dict(type='GaussNoise', p=0.3),\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Blur', p=1.0),\n                    dict(type='GaussianBlur', p=1.0),\n                    dict(type='MedianBlur', blur_limit=5, p=1.0),\n                    dict(type='MotionBlur', p=1.0)\n                ],\n                p=0.1)\n        ],\n        bbox_params=dict(\n            type='BboxParams',\n            format='pascal_voc',\n            label_fields=['gt_labels'],\n            min_visibility=0.0,\n            filter_lost_elements=True),\n        keymap=dict(img='image', gt_bboxes='bboxes'),\n        update_pad_shape=False,\n        skip_img_without_anno=True),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\nval_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        ann_file=\n        '/opt/ml/detection/dataset/stratified_kfold/basic_v2/cv_train_3.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1024, 1024), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Flip', p=1.0),\n                            dict(type='RandomRotate90', p=1.0)\n                        ],\n                        p=0.5),\n                    dict(\n                        type='RandomResizedCrop',\n                        height=1024,\n                        width=1024,\n                        scale=(0.5, 1.0),\n                        p=0.5),\n                    dict(\n                        type='RandomBrightnessContrast',\n                        brightness_limit=0.1,\n                        contrast_limit=0.15,\n                        p=0.5),\n                    dict(\n                        type='HueSaturationValue',\n                        hue_shift_limit=15,\n                        sat_shift_limit=25,\n                        val_shift_limit=10,\n                        p=0.5),\n                    dict(type='GaussNoise', p=0.3),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Blur', p=1.0),\n                            dict(type='GaussianBlur', p=1.0),\n                            dict(type='MedianBlur', blur_limit=5, p=1.0),\n                            dict(type='MotionBlur', p=1.0)\n                        ],\n                        p=0.1)\n                ],\n                bbox_params=dict(\n                    type='BboxParams',\n                    format='pascal_voc',\n                    label_fields=['gt_labels'],\n                    min_visibility=0.0,\n                    filter_lost_elements=True),\n                keymap=dict(img='image', gt_bboxes='bboxes'),\n                update_pad_shape=False,\n                skip_img_without_anno=True),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        ann_file=\n        '/opt/ml/detection/dataset/stratified_kfold/basic_v2/cv_val_3.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        ann_file='/opt/ml/detection/dataset/test.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox', classwise=True)\noptimizer = dict(\n    type='AdamW',\n    lr=0.0001,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='CosineAnnealing',\n    warmup='linear',\n    warmup_iters=488,\n    warmup_ratio=0.001,\n    min_lr=1e-06)\nrunner = dict(type='EpochBasedRunner', max_epochs=24)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(\n            type='WandbLoggerHook',\n            interval=1000,\n            init_kwargs=dict(\n                project='object-detection-trash',\n                entity='sseunghyun',\n                name='cascade-rcnn-swin_s'))\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\nfp16 = dict(loss_scale=512.0)\nwork_dir = '/opt/ml/detection/SEUNGHYUN_WORKSPACE/my_mmdetection/work_dirs/cascade_rcnn_swin-s'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1750784273, "exp_name": "cascade_rcnn_swin-s-p4-w7_fpn_fp16_ms-crop-3x_coco.py", "fp16": {"loss_scaler": {"scale": 512.0, "growth_factor": 2.0, "backoff_factor": 0.5, "growth_interval": 2000, "_growth_tracker": 0}}, "epoch": 24, "iter": 11712, "mmcv_version": "1.4.6", "time": "Mon Mar 28 08:58:58 2022", "hook_msgs": {"last_ckpt": "/opt/ml/detection/SEUNGHYUN_WORKSPACE/my_mmdetection/work_dirs/cascade_rcnn_swin-s/epoch_23.pth"}}
{"mode": "train", "epoch": 25, "iter": 50, "lr": 1e-05, "memory": 28850, "data_time": 0.08068, "loss_rpn_cls": 0.01498, "loss_rpn_bbox": 0.019, "s0.loss_cls": 0.11667, "s0.acc": 96.08838, "s0.loss_bbox": 0.06958, "s1.loss_cls": 0.05397, "s1.acc": 96.48203, "s1.loss_bbox": 0.06737, "s2.loss_cls": 0.02617, "s2.acc": 96.64561, "s2.loss_bbox": 0.0405, "loss": 0.40825, "time": 1.63889}
{"mode": "train", "epoch": 25, "iter": 100, "lr": 1e-05, "memory": 28850, "data_time": 0.02145, "loss_rpn_cls": 0.02281, "loss_rpn_bbox": 0.02141, "s0.loss_cls": 0.13587, "s0.acc": 95.50439, "s0.loss_bbox": 0.08027, "s1.loss_cls": 0.06158, "s1.acc": 95.99209, "s1.loss_bbox": 0.07532, "s2.loss_cls": 0.03009, "s2.acc": 96.08694, "s2.loss_bbox": 0.0433, "loss": 0.47066, "time": 1.56081}
{"mode": "train", "epoch": 25, "iter": 150, "lr": 1e-05, "memory": 28851, "data_time": 0.02101, "loss_rpn_cls": 0.02581, "loss_rpn_bbox": 0.01953, "s0.loss_cls": 0.12866, "s0.acc": 95.70752, "s0.loss_bbox": 0.07549, "s1.loss_cls": 0.05865, "s1.acc": 96.19264, "s1.loss_bbox": 0.0725, "s2.loss_cls": 0.02829, "s2.acc": 96.25243, "s2.loss_bbox": 0.04377, "loss": 0.4527, "time": 1.54134}
{"mode": "train", "epoch": 25, "iter": 200, "lr": 1e-05, "memory": 28854, "data_time": 0.02084, "loss_rpn_cls": 0.01533, "loss_rpn_bbox": 0.01868, "s0.loss_cls": 0.1238, "s0.acc": 95.92236, "s0.loss_bbox": 0.07123, "s1.loss_cls": 0.05615, "s1.acc": 96.34444, "s1.loss_bbox": 0.06701, "s2.loss_cls": 0.0265, "s2.acc": 96.64157, "s2.loss_bbox": 0.04093, "loss": 0.41963, "time": 1.5643}
{"mode": "train", "epoch": 25, "iter": 250, "lr": 1e-05, "memory": 28854, "data_time": 0.02065, "loss_rpn_cls": 0.0183, "loss_rpn_bbox": 0.01679, "s0.loss_cls": 0.12153, "s0.acc": 96.07324, "s0.loss_bbox": 0.07017, "s1.loss_cls": 0.05538, "s1.acc": 96.46369, "s1.loss_bbox": 0.06638, "s2.loss_cls": 0.02629, "s2.acc": 96.62777, "s2.loss_bbox": 0.03827, "loss": 0.41311, "time": 1.56125}
{"mode": "train", "epoch": 25, "iter": 300, "lr": 1e-05, "memory": 28854, "data_time": 0.02124, "loss_rpn_cls": 0.0155, "loss_rpn_bbox": 0.01965, "s0.loss_cls": 0.12178, "s0.acc": 95.9751, "s0.loss_bbox": 0.0699, "s1.loss_cls": 0.05639, "s1.acc": 96.31142, "s1.loss_bbox": 0.06859, "s2.loss_cls": 0.02758, "s2.acc": 96.40643, "s2.loss_bbox": 0.04058, "loss": 0.41998, "time": 1.56865}
{"mode": "train", "epoch": 25, "iter": 350, "lr": 1e-05, "memory": 28854, "data_time": 0.02098, "loss_rpn_cls": 0.02149, "loss_rpn_bbox": 0.01829, "s0.loss_cls": 0.10659, "s0.acc": 96.42285, "s0.loss_bbox": 0.06129, "s1.loss_cls": 0.04876, "s1.acc": 96.73909, "s1.loss_bbox": 0.05861, "s2.loss_cls": 0.02361, "s2.acc": 96.89592, "s2.loss_bbox": 0.03572, "loss": 0.37436, "time": 1.57082}
{"mode": "train", "epoch": 25, "iter": 400, "lr": 1e-05, "memory": 28854, "data_time": 0.02111, "loss_rpn_cls": 0.01699, "loss_rpn_bbox": 0.01864, "s0.loss_cls": 0.11807, "s0.acc": 96.15381, "s0.loss_bbox": 0.0666, "s1.loss_cls": 0.05417, "s1.acc": 96.48056, "s1.loss_bbox": 0.06552, "s2.loss_cls": 0.02638, "s2.acc": 96.49206, "s2.loss_bbox": 0.03989, "loss": 0.40626, "time": 1.5532}
{"mode": "train", "epoch": 25, "iter": 450, "lr": 1e-05, "memory": 28854, "data_time": 0.02124, "loss_rpn_cls": 0.01573, "loss_rpn_bbox": 0.0192, "s0.loss_cls": 0.14207, "s0.acc": 95.36133, "s0.loss_bbox": 0.07904, "s1.loss_cls": 0.06545, "s1.acc": 95.83847, "s1.loss_bbox": 0.07375, "s2.loss_cls": 0.03183, "s2.acc": 95.97712, "s2.loss_bbox": 0.04445, "loss": 0.4715, "time": 1.56751}
{"mode": "train", "epoch": 25, "iter": 500, "lr": 1e-05, "memory": 28854, "data_time": 0.02072, "loss_rpn_cls": 0.01578, "loss_rpn_bbox": 0.02227, "s0.loss_cls": 0.12542, "s0.acc": 95.81592, "s0.loss_bbox": 0.07517, "s1.loss_cls": 0.05742, "s1.acc": 96.18806, "s1.loss_bbox": 0.07128, "s2.loss_cls": 0.02768, "s2.acc": 96.30357, "s2.loss_bbox": 0.0433, "loss": 0.43832, "time": 1.55156}
{"mode": "train", "epoch": 25, "iter": 550, "lr": 1e-05, "memory": 28854, "data_time": 0.02051, "loss_rpn_cls": 0.01818, "loss_rpn_bbox": 0.02021, "s0.loss_cls": 0.12905, "s0.acc": 95.57666, "s0.loss_bbox": 0.07786, "s1.loss_cls": 0.05965, "s1.acc": 95.99142, "s1.loss_bbox": 0.07181, "s2.loss_cls": 0.02874, "s2.acc": 96.16202, "s2.loss_bbox": 0.04249, "loss": 0.44799, "time": 1.55903}
{"mode": "train", "epoch": 25, "iter": 600, "lr": 1e-05, "memory": 28854, "data_time": 0.02059, "loss_rpn_cls": 0.01454, "loss_rpn_bbox": 0.01875, "s0.loss_cls": 0.10601, "s0.acc": 96.32373, "s0.loss_bbox": 0.06528, "s1.loss_cls": 0.04641, "s1.acc": 96.79106, "s1.loss_bbox": 0.06336, "s2.loss_cls": 0.02269, "s2.acc": 96.81607, "s2.loss_bbox": 0.0395, "loss": 0.37654, "time": 1.56929}
{"mode": "val", "epoch": 25, "iter": 982, "lr": 1e-05, "bbox_mAP": 0.503, "bbox_mAP_50": 0.665, "bbox_mAP_75": 0.535, "bbox_mAP_s": 0.04, "bbox_mAP_m": 0.181, "bbox_mAP_l": 0.571, "bbox_mAP_copypaste": "0.503 0.665 0.535 0.040 0.181 0.571"}
{"mode": "train", "epoch": 26, "iter": 50, "lr": 1e-05, "memory": 28854, "data_time": 0.08083, "loss_rpn_cls": 0.01785, "loss_rpn_bbox": 0.0232, "s0.loss_cls": 0.13134, "s0.acc": 95.51611, "s0.loss_bbox": 0.07722, "s1.loss_cls": 0.05915, "s1.acc": 96.04871, "s1.loss_bbox": 0.07477, "s2.loss_cls": 0.02885, "s2.acc": 96.07727, "s2.loss_bbox": 0.04485, "loss": 0.45724, "time": 1.63471}
{"mode": "train", "epoch": 26, "iter": 100, "lr": 1e-05, "memory": 28854, "data_time": 0.02146, "loss_rpn_cls": 0.01491, "loss_rpn_bbox": 0.01777, "s0.loss_cls": 0.11358, "s0.acc": 96.18555, "s0.loss_bbox": 0.06767, "s1.loss_cls": 0.05013, "s1.acc": 96.72201, "s1.loss_bbox": 0.06784, "s2.loss_cls": 0.0245, "s2.acc": 96.73978, "s2.loss_bbox": 0.04114, "loss": 0.39753, "time": 1.55811}
{"mode": "train", "epoch": 26, "iter": 150, "lr": 1e-05, "memory": 28854, "data_time": 0.02123, "loss_rpn_cls": 0.01347, "loss_rpn_bbox": 0.01724, "s0.loss_cls": 0.10661, "s0.acc": 96.39893, "s0.loss_bbox": 0.06344, "s1.loss_cls": 0.04799, "s1.acc": 96.83124, "s1.loss_bbox": 0.06379, "s2.loss_cls": 0.02261, "s2.acc": 96.90827, "s2.loss_bbox": 0.03914, "loss": 0.37429, "time": 1.54555}
{"mode": "train", "epoch": 26, "iter": 200, "lr": 1e-05, "memory": 28855, "data_time": 0.02124, "loss_rpn_cls": 0.01631, "loss_rpn_bbox": 0.01937, "s0.loss_cls": 0.11811, "s0.acc": 95.95361, "s0.loss_bbox": 0.07174, "s1.loss_cls": 0.05315, "s1.acc": 96.38982, "s1.loss_bbox": 0.0697, "s2.loss_cls": 0.02524, "s2.acc": 96.51983, "s2.loss_bbox": 0.04263, "loss": 0.41624, "time": 1.54777}
{"mode": "train", "epoch": 26, "iter": 250, "lr": 1e-05, "memory": 28855, "data_time": 0.02175, "loss_rpn_cls": 0.01719, "loss_rpn_bbox": 0.02124, "s0.loss_cls": 0.1208, "s0.acc": 95.94141, "s0.loss_bbox": 0.07361, "s1.loss_cls": 0.05558, "s1.acc": 96.36312, "s1.loss_bbox": 0.07121, "s2.loss_cls": 0.02737, "s2.acc": 96.41795, "s2.loss_bbox": 0.04306, "loss": 0.43006, "time": 1.56366}
{"mode": "train", "epoch": 26, "iter": 300, "lr": 1e-05, "memory": 28855, "data_time": 0.02116, "loss_rpn_cls": 0.01952, "loss_rpn_bbox": 0.01899, "s0.loss_cls": 0.11717, "s0.acc": 96.05078, "s0.loss_bbox": 0.0673, "s1.loss_cls": 0.05224, "s1.acc": 96.46998, "s1.loss_bbox": 0.06408, "s2.loss_cls": 0.02489, "s2.acc": 96.67701, "s2.loss_bbox": 0.03975, "loss": 0.40395, "time": 1.55711}
{"mode": "train", "epoch": 26, "iter": 350, "lr": 1e-05, "memory": 28855, "data_time": 0.02066, "loss_rpn_cls": 0.01467, "loss_rpn_bbox": 0.02074, "s0.loss_cls": 0.1215, "s0.acc": 95.90381, "s0.loss_bbox": 0.07575, "s1.loss_cls": 0.05402, "s1.acc": 96.4029, "s1.loss_bbox": 0.07044, "s2.loss_cls": 0.02593, "s2.acc": 96.56499, "s2.loss_bbox": 0.04125, "loss": 0.42429, "time": 1.56097}
{"mode": "train", "epoch": 26, "iter": 400, "lr": 1e-05, "memory": 28855, "data_time": 0.02137, "loss_rpn_cls": 0.01603, "loss_rpn_bbox": 0.01871, "s0.loss_cls": 0.12053, "s0.acc": 95.96436, "s0.loss_bbox": 0.07189, "s1.loss_cls": 0.05385, "s1.acc": 96.46958, "s1.loss_bbox": 0.06734, "s2.loss_cls": 0.02571, "s2.acc": 96.57642, "s2.loss_bbox": 0.04112, "loss": 0.41519, "time": 1.58995}
{"mode": "train", "epoch": 26, "iter": 450, "lr": 1e-05, "memory": 28855, "data_time": 0.02214, "loss_rpn_cls": 0.01689, "loss_rpn_bbox": 0.02025, "s0.loss_cls": 0.12992, "s0.acc": 95.66797, "s0.loss_bbox": 0.07787, "s1.loss_cls": 0.05803, "s1.acc": 96.19781, "s1.loss_bbox": 0.07506, "s2.loss_cls": 0.02769, "s2.acc": 96.44098, "s2.loss_bbox": 0.04562, "loss": 0.45133, "time": 1.55601}
{"mode": "train", "epoch": 26, "iter": 500, "lr": 1e-05, "memory": 28855, "data_time": 0.02116, "loss_rpn_cls": 0.01453, "loss_rpn_bbox": 0.0169, "s0.loss_cls": 0.10891, "s0.acc": 96.36182, "s0.loss_bbox": 0.06439, "s1.loss_cls": 0.04778, "s1.acc": 96.92335, "s1.loss_bbox": 0.062, "s2.loss_cls": 0.02311, "s2.acc": 96.89, "s2.loss_bbox": 0.03704, "loss": 0.37465, "time": 1.54327}
{"mode": "train", "epoch": 26, "iter": 550, "lr": 1e-05, "memory": 28855, "data_time": 0.02181, "loss_rpn_cls": 0.01624, "loss_rpn_bbox": 0.01831, "s0.loss_cls": 0.12332, "s0.acc": 95.79492, "s0.loss_bbox": 0.07429, "s1.loss_cls": 0.05458, "s1.acc": 96.33624, "s1.loss_bbox": 0.07031, "s2.loss_cls": 0.02594, "s2.acc": 96.47271, "s2.loss_bbox": 0.04179, "loss": 0.42478, "time": 1.58492}
{"mode": "train", "epoch": 26, "iter": 600, "lr": 1e-05, "memory": 28855, "data_time": 0.02139, "loss_rpn_cls": 0.01461, "loss_rpn_bbox": 0.01979, "s0.loss_cls": 0.12029, "s0.acc": 95.94629, "s0.loss_bbox": 0.06749, "s1.loss_cls": 0.05427, "s1.acc": 96.44708, "s1.loss_bbox": 0.06454, "s2.loss_cls": 0.02624, "s2.acc": 96.56998, "s2.loss_bbox": 0.03952, "loss": 0.40674, "time": 1.57257}
{"mode": "val", "epoch": 26, "iter": 982, "lr": 1e-05, "bbox_mAP": 0.529, "bbox_mAP_50": 0.695, "bbox_mAP_75": 0.564, "bbox_mAP_s": 0.033, "bbox_mAP_m": 0.197, "bbox_mAP_l": 0.598, "bbox_mAP_copypaste": "0.529 0.695 0.564 0.033 0.197 0.598"}
{"mode": "train", "epoch": 27, "iter": 50, "lr": 1e-05, "memory": 28855, "data_time": 0.08171, "loss_rpn_cls": 0.01418, "loss_rpn_bbox": 0.01815, "s0.loss_cls": 0.11188, "s0.acc": 96.04004, "s0.loss_bbox": 0.067, "s1.loss_cls": 0.04969, "s1.acc": 96.46012, "s1.loss_bbox": 0.06462, "s2.loss_cls": 0.02414, "s2.acc": 96.59587, "s2.loss_bbox": 0.03994, "loss": 0.3896, "time": 1.63927}
{"mode": "train", "epoch": 27, "iter": 100, "lr": 1e-05, "memory": 28855, "data_time": 0.02173, "loss_rpn_cls": 0.01428, "loss_rpn_bbox": 0.02051, "s0.loss_cls": 0.11673, "s0.acc": 95.95361, "s0.loss_bbox": 0.07217, "s1.loss_cls": 0.05186, "s1.acc": 96.44118, "s1.loss_bbox": 0.07043, "s2.loss_cls": 0.02465, "s2.acc": 96.6106, "s2.loss_bbox": 0.04279, "loss": 0.41343, "time": 1.56706}
{"mode": "train", "epoch": 27, "iter": 150, "lr": 1e-05, "memory": 28855, "data_time": 0.02177, "loss_rpn_cls": 0.01559, "loss_rpn_bbox": 0.01685, "s0.loss_cls": 0.11937, "s0.acc": 95.9248, "s0.loss_bbox": 0.07166, "s1.loss_cls": 0.05186, "s1.acc": 96.52107, "s1.loss_bbox": 0.06835, "s2.loss_cls": 0.0243, "s2.acc": 96.69386, "s2.loss_bbox": 0.04165, "loss": 0.40962, "time": 1.56186}
{"mode": "train", "epoch": 27, "iter": 200, "lr": 1e-05, "memory": 28855, "data_time": 0.02216, "loss_rpn_cls": 0.01542, "loss_rpn_bbox": 0.01955, "s0.loss_cls": 0.11831, "s0.acc": 96.01709, "s0.loss_bbox": 0.07221, "s1.loss_cls": 0.0529, "s1.acc": 96.4165, "s1.loss_bbox": 0.06907, "s2.loss_cls": 0.0252, "s2.acc": 96.61789, "s2.loss_bbox": 0.04333, "loss": 0.41598, "time": 1.59134}
{"mode": "train", "epoch": 27, "iter": 250, "lr": 1e-05, "memory": 28855, "data_time": 0.02169, "loss_rpn_cls": 0.0129, "loss_rpn_bbox": 0.01956, "s0.loss_cls": 0.10917, "s0.acc": 96.31885, "s0.loss_bbox": 0.06684, "s1.loss_cls": 0.0482, "s1.acc": 96.81629, "s1.loss_bbox": 0.06339, "s2.loss_cls": 0.02327, "s2.acc": 96.89224, "s2.loss_bbox": 0.03898, "loss": 0.38232, "time": 1.56536}
{"mode": "train", "epoch": 27, "iter": 300, "lr": 1e-05, "memory": 28855, "data_time": 0.02172, "loss_rpn_cls": 0.0137, "loss_rpn_bbox": 0.01897, "s0.loss_cls": 0.11459, "s0.acc": 96.03564, "s0.loss_bbox": 0.06785, "s1.loss_cls": 0.05127, "s1.acc": 96.5007, "s1.loss_bbox": 0.06604, "s2.loss_cls": 0.0248, "s2.acc": 96.64506, "s2.loss_bbox": 0.04084, "loss": 0.39806, "time": 1.5684}
{"mode": "train", "epoch": 27, "iter": 350, "lr": 1e-05, "memory": 28855, "data_time": 0.02214, "loss_rpn_cls": 0.01238, "loss_rpn_bbox": 0.01762, "s0.loss_cls": 0.10995, "s0.acc": 96.37109, "s0.loss_bbox": 0.06424, "s1.loss_cls": 0.05005, "s1.acc": 96.80475, "s1.loss_bbox": 0.06189, "s2.loss_cls": 0.02455, "s2.acc": 96.75714, "s2.loss_bbox": 0.03652, "loss": 0.3772, "time": 1.57919}
{"mode": "train", "epoch": 27, "iter": 400, "lr": 1e-05, "memory": 28855, "data_time": 0.02205, "loss_rpn_cls": 0.01957, "loss_rpn_bbox": 0.01882, "s0.loss_cls": 0.12174, "s0.acc": 95.82959, "s0.loss_bbox": 0.07366, "s1.loss_cls": 0.0562, "s1.acc": 96.1519, "s1.loss_bbox": 0.0706, "s2.loss_cls": 0.0273, "s2.acc": 96.32706, "s2.loss_bbox": 0.0437, "loss": 0.4316, "time": 1.5673}
{"mode": "train", "epoch": 27, "iter": 450, "lr": 1e-05, "memory": 28856, "data_time": 0.02104, "loss_rpn_cls": 0.01497, "loss_rpn_bbox": 0.02048, "s0.loss_cls": 0.12445, "s0.acc": 95.67725, "s0.loss_bbox": 0.07698, "s1.loss_cls": 0.05551, "s1.acc": 96.16916, "s1.loss_bbox": 0.07356, "s2.loss_cls": 0.0267, "s2.acc": 96.22766, "s2.loss_bbox": 0.04263, "loss": 0.43527, "time": 1.55182}
{"mode": "train", "epoch": 27, "iter": 500, "lr": 1e-05, "memory": 28856, "data_time": 0.02216, "loss_rpn_cls": 0.01784, "loss_rpn_bbox": 0.0206, "s0.loss_cls": 0.12196, "s0.acc": 95.8877, "s0.loss_bbox": 0.07559, "s1.loss_cls": 0.05544, "s1.acc": 96.345, "s1.loss_bbox": 0.07111, "s2.loss_cls": 0.02724, "s2.acc": 96.41993, "s2.loss_bbox": 0.04174, "loss": 0.43153, "time": 1.56462}
{"mode": "train", "epoch": 27, "iter": 550, "lr": 1e-05, "memory": 28856, "data_time": 0.02173, "loss_rpn_cls": 0.01706, "loss_rpn_bbox": 0.02135, "s0.loss_cls": 0.11899, "s0.acc": 95.92578, "s0.loss_bbox": 0.07243, "s1.loss_cls": 0.05384, "s1.acc": 96.3426, "s1.loss_bbox": 0.06753, "s2.loss_cls": 0.02599, "s2.acc": 96.4867, "s2.loss_bbox": 0.04128, "loss": 0.41846, "time": 1.55926}
{"mode": "train", "epoch": 27, "iter": 600, "lr": 1e-05, "memory": 28856, "data_time": 0.02237, "loss_rpn_cls": 0.01401, "loss_rpn_bbox": 0.01774, "s0.loss_cls": 0.11515, "s0.acc": 96.07422, "s0.loss_bbox": 0.06964, "s1.loss_cls": 0.05193, "s1.acc": 96.44217, "s1.loss_bbox": 0.06623, "s2.loss_cls": 0.02498, "s2.acc": 96.48099, "s2.loss_bbox": 0.03907, "loss": 0.39874, "time": 1.57551}
{"mode": "val", "epoch": 27, "iter": 982, "lr": 1e-05, "bbox_mAP": 0.544, "bbox_mAP_50": 0.709, "bbox_mAP_75": 0.58, "bbox_mAP_s": 0.055, "bbox_mAP_m": 0.217, "bbox_mAP_l": 0.611, "bbox_mAP_copypaste": "0.544 0.709 0.580 0.055 0.217 0.611"}
{"mode": "train", "epoch": 28, "iter": 50, "lr": 0.0, "memory": 28856, "data_time": 0.08115, "loss_rpn_cls": 0.01266, "loss_rpn_bbox": 0.015, "s0.loss_cls": 0.10243, "s0.acc": 96.4585, "s0.loss_bbox": 0.06084, "s1.loss_cls": 0.04621, "s1.acc": 96.83258, "s1.loss_bbox": 0.05893, "s2.loss_cls": 0.02262, "s2.acc": 96.89264, "s2.loss_bbox": 0.03677, "loss": 0.35546, "time": 1.62338}
{"mode": "train", "epoch": 28, "iter": 100, "lr": 0.0, "memory": 28856, "data_time": 0.02161, "loss_rpn_cls": 0.01485, "loss_rpn_bbox": 0.02128, "s0.loss_cls": 0.11925, "s0.acc": 95.90039, "s0.loss_bbox": 0.07473, "s1.loss_cls": 0.05312, "s1.acc": 96.39207, "s1.loss_bbox": 0.07072, "s2.loss_cls": 0.02533, "s2.acc": 96.54851, "s2.loss_bbox": 0.04245, "loss": 0.42174, "time": 1.55938}
{"mode": "train", "epoch": 28, "iter": 150, "lr": 0.0, "memory": 28856, "data_time": 0.02192, "loss_rpn_cls": 0.01292, "loss_rpn_bbox": 0.01792, "s0.loss_cls": 0.10903, "s0.acc": 96.28955, "s0.loss_bbox": 0.06578, "s1.loss_cls": 0.04675, "s1.acc": 96.92659, "s1.loss_bbox": 0.06407, "s2.loss_cls": 0.02239, "s2.acc": 96.9809, "s2.loss_bbox": 0.03869, "loss": 0.37756, "time": 1.57637}
{"mode": "train", "epoch": 28, "iter": 200, "lr": 0.0, "memory": 28856, "data_time": 0.02145, "loss_rpn_cls": 0.01636, "loss_rpn_bbox": 0.02014, "s0.loss_cls": 0.11466, "s0.acc": 96.05127, "s0.loss_bbox": 0.0742, "s1.loss_cls": 0.05111, "s1.acc": 96.49824, "s1.loss_bbox": 0.06869, "s2.loss_cls": 0.02465, "s2.acc": 96.7118, "s2.loss_bbox": 0.04008, "loss": 0.40989, "time": 1.55211}
{"mode": "train", "epoch": 28, "iter": 250, "lr": 0.0, "memory": 28856, "data_time": 0.0218, "loss_rpn_cls": 0.01474, "loss_rpn_bbox": 0.02021, "s0.loss_cls": 0.11499, "s0.acc": 95.96631, "s0.loss_bbox": 0.07485, "s1.loss_cls": 0.05019, "s1.acc": 96.49075, "s1.loss_bbox": 0.07065, "s2.loss_cls": 0.02417, "s2.acc": 96.66428, "s2.loss_bbox": 0.04236, "loss": 0.41216, "time": 1.57489}
{"mode": "train", "epoch": 28, "iter": 300, "lr": 0.0, "memory": 28856, "data_time": 0.02199, "loss_rpn_cls": 0.01786, "loss_rpn_bbox": 0.01854, "s0.loss_cls": 0.11506, "s0.acc": 96.02832, "s0.loss_bbox": 0.07109, "s1.loss_cls": 0.05042, "s1.acc": 96.56302, "s1.loss_bbox": 0.06796, "s2.loss_cls": 0.02433, "s2.acc": 96.64927, "s2.loss_bbox": 0.03995, "loss": 0.4052, "time": 1.56638}
{"mode": "train", "epoch": 28, "iter": 350, "lr": 0.0, "memory": 28856, "data_time": 0.02192, "loss_rpn_cls": 0.01598, "loss_rpn_bbox": 0.01892, "s0.loss_cls": 0.11302, "s0.acc": 96.12256, "s0.loss_bbox": 0.06975, "s1.loss_cls": 0.04986, "s1.acc": 96.60968, "s1.loss_bbox": 0.06668, "s2.loss_cls": 0.02357, "s2.acc": 96.82274, "s2.loss_bbox": 0.04079, "loss": 0.39858, "time": 1.56879}
{"mode": "train", "epoch": 28, "iter": 400, "lr": 0.0, "memory": 28856, "data_time": 0.02308, "loss_rpn_cls": 0.0171, "loss_rpn_bbox": 0.02145, "s0.loss_cls": 0.1309, "s0.acc": 95.57129, "s0.loss_bbox": 0.07688, "s1.loss_cls": 0.05845, "s1.acc": 96.14119, "s1.loss_bbox": 0.07569, "s2.loss_cls": 0.02838, "s2.acc": 96.24493, "s2.loss_bbox": 0.04633, "loss": 0.45517, "time": 1.57644}
{"mode": "train", "epoch": 28, "iter": 450, "lr": 0.0, "memory": 28856, "data_time": 0.02114, "loss_rpn_cls": 0.01592, "loss_rpn_bbox": 0.0209, "s0.loss_cls": 0.11564, "s0.acc": 96.0127, "s0.loss_bbox": 0.06995, "s1.loss_cls": 0.05276, "s1.acc": 96.44212, "s1.loss_bbox": 0.06894, "s2.loss_cls": 0.02593, "s2.acc": 96.46553, "s2.loss_bbox": 0.04209, "loss": 0.41213, "time": 1.54062}
{"mode": "train", "epoch": 28, "iter": 500, "lr": 0.0, "memory": 28856, "data_time": 0.02179, "loss_rpn_cls": 0.01441, "loss_rpn_bbox": 0.01834, "s0.loss_cls": 0.1096, "s0.acc": 96.27588, "s0.loss_bbox": 0.06815, "s1.loss_cls": 0.04785, "s1.acc": 96.74263, "s1.loss_bbox": 0.06453, "s2.loss_cls": 0.02332, "s2.acc": 96.82694, "s2.loss_bbox": 0.03857, "loss": 0.38476, "time": 1.57165}
{"mode": "train", "epoch": 28, "iter": 550, "lr": 0.0, "memory": 28857, "data_time": 0.02204, "loss_rpn_cls": 0.01511, "loss_rpn_bbox": 0.02004, "s0.loss_cls": 0.12529, "s0.acc": 95.73389, "s0.loss_bbox": 0.07294, "s1.loss_cls": 0.05578, "s1.acc": 96.26244, "s1.loss_bbox": 0.07004, "s2.loss_cls": 0.02699, "s2.acc": 96.40825, "s2.loss_bbox": 0.04388, "loss": 0.43007, "time": 1.56518}
{"mode": "train", "epoch": 28, "iter": 600, "lr": 0.0, "memory": 28857, "data_time": 0.02194, "loss_rpn_cls": 0.01235, "loss_rpn_bbox": 0.01614, "s0.loss_cls": 0.10157, "s0.acc": 96.47607, "s0.loss_bbox": 0.06085, "s1.loss_cls": 0.04543, "s1.acc": 96.89356, "s1.loss_bbox": 0.06045, "s2.loss_cls": 0.0224, "s2.acc": 96.97336, "s2.loss_bbox": 0.03861, "loss": 0.35779, "time": 1.56574}
{"mode": "val", "epoch": 28, "iter": 982, "lr": 0.0, "bbox_mAP": 0.553, "bbox_mAP_50": 0.718, "bbox_mAP_75": 0.593, "bbox_mAP_s": 0.067, "bbox_mAP_m": 0.234, "bbox_mAP_l": 0.619, "bbox_mAP_copypaste": "0.553 0.718 0.593 0.067 0.234 0.619"}
{"mode": "train", "epoch": 29, "iter": 50, "lr": 0.0, "memory": 28857, "data_time": 0.08151, "loss_rpn_cls": 0.01726, "loss_rpn_bbox": 0.01967, "s0.loss_cls": 0.11541, "s0.acc": 96.04932, "s0.loss_bbox": 0.07237, "s1.loss_cls": 0.05041, "s1.acc": 96.55795, "s1.loss_bbox": 0.07034, "s2.loss_cls": 0.02436, "s2.acc": 96.60654, "s2.loss_bbox": 0.04275, "loss": 0.41256, "time": 1.62018}
{"mode": "train", "epoch": 29, "iter": 100, "lr": 0.0, "memory": 28857, "data_time": 0.02159, "loss_rpn_cls": 0.01669, "loss_rpn_bbox": 0.01949, "s0.loss_cls": 0.10585, "s0.acc": 96.3667, "s0.loss_bbox": 0.06563, "s1.loss_cls": 0.04568, "s1.acc": 96.87989, "s1.loss_bbox": 0.06304, "s2.loss_cls": 0.02177, "s2.acc": 97.03476, "s2.loss_bbox": 0.03825, "loss": 0.3764, "time": 1.56782}
{"mode": "train", "epoch": 29, "iter": 150, "lr": 0.0, "memory": 28857, "data_time": 0.02165, "loss_rpn_cls": 0.01393, "loss_rpn_bbox": 0.01648, "s0.loss_cls": 0.10626, "s0.acc": 96.31104, "s0.loss_bbox": 0.0674, "s1.loss_cls": 0.04527, "s1.acc": 96.87306, "s1.loss_bbox": 0.06525, "s2.loss_cls": 0.02195, "s2.acc": 96.94936, "s2.loss_bbox": 0.04057, "loss": 0.37711, "time": 1.5875}
{"mode": "train", "epoch": 29, "iter": 200, "lr": 0.0, "memory": 28857, "data_time": 0.02138, "loss_rpn_cls": 0.01437, "loss_rpn_bbox": 0.01945, "s0.loss_cls": 0.11339, "s0.acc": 96.17139, "s0.loss_bbox": 0.07, "s1.loss_cls": 0.04955, "s1.acc": 96.67667, "s1.loss_bbox": 0.06547, "s2.loss_cls": 0.02394, "s2.acc": 96.75129, "s2.loss_bbox": 0.03919, "loss": 0.39535, "time": 1.55676}
{"mode": "train", "epoch": 29, "iter": 250, "lr": 0.0, "memory": 28857, "data_time": 0.02163, "loss_rpn_cls": 0.01648, "loss_rpn_bbox": 0.0218, "s0.loss_cls": 0.12373, "s0.acc": 95.82764, "s0.loss_bbox": 0.07614, "s1.loss_cls": 0.05559, "s1.acc": 96.30548, "s1.loss_bbox": 0.07194, "s2.loss_cls": 0.02722, "s2.acc": 96.32783, "s2.loss_bbox": 0.04244, "loss": 0.43534, "time": 1.56606}
{"mode": "train", "epoch": 29, "iter": 300, "lr": 0.0, "memory": 28857, "data_time": 0.0217, "loss_rpn_cls": 0.01223, "loss_rpn_bbox": 0.01658, "s0.loss_cls": 0.10224, "s0.acc": 96.49023, "s0.loss_bbox": 0.06362, "s1.loss_cls": 0.04484, "s1.acc": 96.91249, "s1.loss_bbox": 0.06015, "s2.loss_cls": 0.02157, "s2.acc": 97.07616, "s2.loss_bbox": 0.0368, "loss": 0.35802, "time": 1.5393}
{"mode": "train", "epoch": 29, "iter": 350, "lr": 0.0, "memory": 28857, "data_time": 0.02168, "loss_rpn_cls": 0.01543, "loss_rpn_bbox": 0.01997, "s0.loss_cls": 0.11146, "s0.acc": 96.0752, "s0.loss_bbox": 0.06949, "s1.loss_cls": 0.05051, "s1.acc": 96.52266, "s1.loss_bbox": 0.06673, "s2.loss_cls": 0.0244, "s2.acc": 96.62101, "s2.loss_bbox": 0.04082, "loss": 0.39881, "time": 1.56718}
{"mode": "train", "epoch": 29, "iter": 400, "lr": 0.0, "memory": 28857, "data_time": 0.02235, "loss_rpn_cls": 0.01443, "loss_rpn_bbox": 0.01822, "s0.loss_cls": 0.11694, "s0.acc": 95.88379, "s0.loss_bbox": 0.07267, "s1.loss_cls": 0.05216, "s1.acc": 96.38585, "s1.loss_bbox": 0.06818, "s2.loss_cls": 0.02581, "s2.acc": 96.38291, "s2.loss_bbox": 0.04085, "loss": 0.40926, "time": 1.57475}
{"mode": "train", "epoch": 29, "iter": 450, "lr": 0.0, "memory": 28857, "data_time": 0.02182, "loss_rpn_cls": 0.01538, "loss_rpn_bbox": 0.01917, "s0.loss_cls": 0.11286, "s0.acc": 96.14404, "s0.loss_bbox": 0.06828, "s1.loss_cls": 0.04801, "s1.acc": 96.75446, "s1.loss_bbox": 0.06351, "s2.loss_cls": 0.02255, "s2.acc": 96.9897, "s2.loss_bbox": 0.03892, "loss": 0.38867, "time": 1.58054}
{"mode": "train", "epoch": 29, "iter": 500, "lr": 0.0, "memory": 28857, "data_time": 0.02157, "loss_rpn_cls": 0.01346, "loss_rpn_bbox": 0.01803, "s0.loss_cls": 0.12314, "s0.acc": 95.81299, "s0.loss_bbox": 0.07732, "s1.loss_cls": 0.05675, "s1.acc": 96.15159, "s1.loss_bbox": 0.07374, "s2.loss_cls": 0.02731, "s2.acc": 96.31973, "s2.loss_bbox": 0.04512, "loss": 0.43487, "time": 1.58539}
{"mode": "train", "epoch": 29, "iter": 550, "lr": 0.0, "memory": 28857, "data_time": 0.02156, "loss_rpn_cls": 0.01423, "loss_rpn_bbox": 0.01849, "s0.loss_cls": 0.10993, "s0.acc": 96.22119, "s0.loss_bbox": 0.06827, "s1.loss_cls": 0.04815, "s1.acc": 96.74986, "s1.loss_bbox": 0.06619, "s2.loss_cls": 0.02321, "s2.acc": 96.78974, "s2.loss_bbox": 0.04037, "loss": 0.38884, "time": 1.5809}
{"mode": "train", "epoch": 29, "iter": 600, "lr": 0.0, "memory": 28857, "data_time": 0.02207, "loss_rpn_cls": 0.0145, "loss_rpn_bbox": 0.01991, "s0.loss_cls": 0.11071, "s0.acc": 96.21289, "s0.loss_bbox": 0.06682, "s1.loss_cls": 0.04826, "s1.acc": 96.81196, "s1.loss_bbox": 0.06625, "s2.loss_cls": 0.02327, "s2.acc": 96.85248, "s2.loss_bbox": 0.04092, "loss": 0.39064, "time": 1.59928}
{"mode": "val", "epoch": 29, "iter": 982, "lr": 0.0, "bbox_mAP": 0.558, "bbox_mAP_50": 0.722, "bbox_mAP_75": 0.597, "bbox_mAP_s": 0.094, "bbox_mAP_m": 0.237, "bbox_mAP_l": 0.624, "bbox_mAP_copypaste": "0.558 0.722 0.597 0.094 0.237 0.624"}
{"mode": "train", "epoch": 30, "iter": 50, "lr": 0.0, "memory": 28857, "data_time": 0.08137, "loss_rpn_cls": 0.01234, "loss_rpn_bbox": 0.01609, "s0.loss_cls": 0.10174, "s0.acc": 96.48047, "s0.loss_bbox": 0.06132, "s1.loss_cls": 0.04468, "s1.acc": 96.88605, "s1.loss_bbox": 0.05936, "s2.loss_cls": 0.02159, "s2.acc": 96.92669, "s2.loss_bbox": 0.03684, "loss": 0.35395, "time": 1.61972}
{"mode": "train", "epoch": 30, "iter": 100, "lr": 0.0, "memory": 28857, "data_time": 0.02154, "loss_rpn_cls": 0.0136, "loss_rpn_bbox": 0.01976, "s0.loss_cls": 0.10874, "s0.acc": 96.24316, "s0.loss_bbox": 0.06903, "s1.loss_cls": 0.04754, "s1.acc": 96.80275, "s1.loss_bbox": 0.06735, "s2.loss_cls": 0.02247, "s2.acc": 96.95435, "s2.loss_bbox": 0.04065, "loss": 0.38914, "time": 1.56396}
{"mode": "train", "epoch": 30, "iter": 150, "lr": 0.0, "memory": 28857, "data_time": 0.02142, "loss_rpn_cls": 0.01423, "loss_rpn_bbox": 0.02093, "s0.loss_cls": 0.12132, "s0.acc": 95.83154, "s0.loss_bbox": 0.07467, "s1.loss_cls": 0.05334, "s1.acc": 96.39504, "s1.loss_bbox": 0.0722, "s2.loss_cls": 0.02578, "s2.acc": 96.42474, "s2.loss_bbox": 0.04305, "loss": 0.42551, "time": 1.57838}
{"mode": "train", "epoch": 30, "iter": 200, "lr": 0.0, "memory": 28857, "data_time": 0.02178, "loss_rpn_cls": 0.01413, "loss_rpn_bbox": 0.01824, "s0.loss_cls": 0.10983, "s0.acc": 96.17725, "s0.loss_bbox": 0.06724, "s1.loss_cls": 0.04848, "s1.acc": 96.73666, "s1.loss_bbox": 0.06494, "s2.loss_cls": 0.02334, "s2.acc": 96.85563, "s2.loss_bbox": 0.04089, "loss": 0.38709, "time": 1.55712}
{"mode": "train", "epoch": 30, "iter": 250, "lr": 0.0, "memory": 28857, "data_time": 0.02161, "loss_rpn_cls": 0.01306, "loss_rpn_bbox": 0.01722, "s0.loss_cls": 0.10754, "s0.acc": 96.31592, "s0.loss_bbox": 0.06483, "s1.loss_cls": 0.04676, "s1.acc": 96.77812, "s1.loss_bbox": 0.06471, "s2.loss_cls": 0.02206, "s2.acc": 96.92845, "s2.loss_bbox": 0.03974, "loss": 0.37593, "time": 1.57702}
{"mode": "train", "epoch": 30, "iter": 300, "lr": 0.0, "memory": 28857, "data_time": 0.02172, "loss_rpn_cls": 0.0154, "loss_rpn_bbox": 0.02172, "s0.loss_cls": 0.12596, "s0.acc": 95.60938, "s0.loss_bbox": 0.08183, "s1.loss_cls": 0.05687, "s1.acc": 96.18287, "s1.loss_bbox": 0.07738, "s2.loss_cls": 0.02755, "s2.acc": 96.32896, "s2.loss_bbox": 0.04552, "loss": 0.45223, "time": 1.59286}
{"mode": "train", "epoch": 30, "iter": 350, "lr": 0.0, "memory": 28857, "data_time": 0.02162, "loss_rpn_cls": 0.01314, "loss_rpn_bbox": 0.01723, "s0.loss_cls": 0.09741, "s0.acc": 96.59521, "s0.loss_bbox": 0.06225, "s1.loss_cls": 0.04316, "s1.acc": 97.06375, "s1.loss_bbox": 0.06116, "s2.loss_cls": 0.02078, "s2.acc": 97.18997, "s2.loss_bbox": 0.03841, "loss": 0.35354, "time": 1.55796}
{"mode": "train", "epoch": 30, "iter": 400, "lr": 0.0, "memory": 28857, "data_time": 0.0224, "loss_rpn_cls": 0.01638, "loss_rpn_bbox": 0.01767, "s0.loss_cls": 0.11037, "s0.acc": 96.2583, "s0.loss_bbox": 0.06539, "s1.loss_cls": 0.04814, "s1.acc": 96.80595, "s1.loss_bbox": 0.06269, "s2.loss_cls": 0.02272, "s2.acc": 96.96924, "s2.loss_bbox": 0.03899, "loss": 0.38235, "time": 1.58705}
{"mode": "train", "epoch": 30, "iter": 450, "lr": 0.0, "memory": 28857, "data_time": 0.02193, "loss_rpn_cls": 0.01396, "loss_rpn_bbox": 0.01797, "s0.loss_cls": 0.11451, "s0.acc": 96.01074, "s0.loss_bbox": 0.07278, "s1.loss_cls": 0.04982, "s1.acc": 96.61827, "s1.loss_bbox": 0.06956, "s2.loss_cls": 0.02454, "s2.acc": 96.67027, "s2.loss_bbox": 0.04246, "loss": 0.40559, "time": 1.61259}
{"mode": "train", "epoch": 30, "iter": 500, "lr": 0.0, "memory": 28857, "data_time": 0.02186, "loss_rpn_cls": 0.01908, "loss_rpn_bbox": 0.0207, "s0.loss_cls": 0.12344, "s0.acc": 95.81934, "s0.loss_bbox": 0.07218, "s1.loss_cls": 0.05553, "s1.acc": 96.25292, "s1.loss_bbox": 0.06883, "s2.loss_cls": 0.02679, "s2.acc": 96.43945, "s2.loss_bbox": 0.04097, "loss": 0.42752, "time": 1.56569}
{"mode": "train", "epoch": 30, "iter": 550, "lr": 0.0, "memory": 28857, "data_time": 0.02182, "loss_rpn_cls": 0.01481, "loss_rpn_bbox": 0.01815, "s0.loss_cls": 0.11366, "s0.acc": 96.04541, "s0.loss_bbox": 0.07064, "s1.loss_cls": 0.04968, "s1.acc": 96.61994, "s1.loss_bbox": 0.06857, "s2.loss_cls": 0.02384, "s2.acc": 96.78243, "s2.loss_bbox": 0.0419, "loss": 0.40127, "time": 1.56159}
{"mode": "train", "epoch": 30, "iter": 600, "lr": 0.0, "memory": 28857, "data_time": 0.0223, "loss_rpn_cls": 0.01647, "loss_rpn_bbox": 0.01992, "s0.loss_cls": 0.12198, "s0.acc": 95.95703, "s0.loss_bbox": 0.07327, "s1.loss_cls": 0.05415, "s1.acc": 96.44466, "s1.loss_bbox": 0.06905, "s2.loss_cls": 0.02572, "s2.acc": 96.57404, "s2.loss_bbox": 0.04099, "loss": 0.42155, "time": 1.56947}
{"mode": "val", "epoch": 30, "iter": 982, "lr": 0.0, "bbox_mAP": 0.562, "bbox_mAP_50": 0.727, "bbox_mAP_75": 0.602, "bbox_mAP_s": 0.138, "bbox_mAP_m": 0.24, "bbox_mAP_l": 0.628, "bbox_mAP_copypaste": "0.562 0.727 0.602 0.138 0.240 0.628"}
