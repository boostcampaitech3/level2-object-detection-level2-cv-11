{"env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-PCIE-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.5\nMMCV: 1.4.6\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.22.0+", "config": "model = dict(\n    type='FasterRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=2,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=True,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = '/opt/ml/detection/dataset/'\nclasses = ('General trash', 'Background')\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\nimg_scale = (1024, 1024)\nalbu_train_transforms = [\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Flip', p=1.0),\n            dict(type='RandomRotate90', p=1.0)\n        ],\n        p=0.5),\n    dict(\n        type='RandomResizedCrop',\n        height=1024,\n        width=1024,\n        scale=(0.5, 1.0),\n        p=0.5),\n    dict(\n        type='RandomBrightnessContrast',\n        brightness_limit=0.1,\n        contrast_limit=0.15,\n        p=0.5),\n    dict(\n        type='HueSaturationValue',\n        hue_shift_limit=15,\n        sat_shift_limit=25,\n        val_shift_limit=10,\n        p=0.5),\n    dict(type='GaussNoise', p=0.3),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Blur', p=1.0),\n            dict(type='GaussianBlur', p=1.0),\n            dict(type='MedianBlur', blur_limit=5, p=1.0),\n            dict(type='MotionBlur', p=1.0)\n        ],\n        p=0.1)\n]\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1024, 1024), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.0),\n    dict(\n        type='Albu',\n        transforms=[\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Flip', p=1.0),\n                    dict(type='RandomRotate90', p=1.0)\n                ],\n                p=0.5),\n            dict(\n                type='RandomResizedCrop',\n                height=1024,\n                width=1024,\n                scale=(0.5, 1.0),\n                p=0.5),\n            dict(\n                type='RandomBrightnessContrast',\n                brightness_limit=0.1,\n                contrast_limit=0.15,\n                p=0.5),\n            dict(\n                type='HueSaturationValue',\n                hue_shift_limit=15,\n                sat_shift_limit=25,\n                val_shift_limit=10,\n                p=0.5),\n            dict(type='GaussNoise', p=0.3),\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Blur', p=1.0),\n                    dict(type='GaussianBlur', p=1.0),\n                    dict(type='MedianBlur', blur_limit=5, p=1.0),\n                    dict(type='MotionBlur', p=1.0)\n                ],\n                p=0.1)\n        ],\n        bbox_params=dict(\n            type='BboxParams',\n            format='pascal_voc',\n            label_fields=['gt_labels'],\n            min_visibility=0.0,\n            filter_lost_elements=True),\n        keymap=dict(img='image', gt_bboxes='bboxes'),\n        update_pad_shape=False,\n        skip_img_without_anno=True),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\nval_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        classes=('General trash', 'Background'),\n        ann_file='/opt/ml/detection/dataset/generaltrash_train_cv_3.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1024, 1024), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Flip', p=1.0),\n                            dict(type='RandomRotate90', p=1.0)\n                        ],\n                        p=0.5),\n                    dict(\n                        type='RandomResizedCrop',\n                        height=1024,\n                        width=1024,\n                        scale=(0.5, 1.0),\n                        p=0.5),\n                    dict(\n                        type='RandomBrightnessContrast',\n                        brightness_limit=0.1,\n                        contrast_limit=0.15,\n                        p=0.5),\n                    dict(\n                        type='HueSaturationValue',\n                        hue_shift_limit=15,\n                        sat_shift_limit=25,\n                        val_shift_limit=10,\n                        p=0.5),\n                    dict(type='GaussNoise', p=0.3),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Blur', p=1.0),\n                            dict(type='GaussianBlur', p=1.0),\n                            dict(type='MedianBlur', blur_limit=5, p=1.0),\n                            dict(type='MotionBlur', p=1.0)\n                        ],\n                        p=0.1)\n                ],\n                bbox_params=dict(\n                    type='BboxParams',\n                    format='pascal_voc',\n                    label_fields=['gt_labels'],\n                    min_visibility=0.0,\n                    filter_lost_elements=True),\n                keymap=dict(img='image', gt_bboxes='bboxes'),\n                update_pad_shape=False,\n                skip_img_without_anno=True),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        classes=('General trash', 'Background'),\n        ann_file='/opt/ml/detection/dataset/generaltrash_valid_cv_3.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        classes=('General trash', 'Background'),\n        ann_file='/opt/ml/detection/dataset/test.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox', classwise=True)\noptimizer = dict(\n    type='AdamW',\n    lr=5e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='CosineAnnealing',\n    warmup='linear',\n    warmup_iters=212,\n    warmup_ratio=0.001,\n    min_lr=1e-06)\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(max_keep_ckpts=5, interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(\n            type='WandbLoggerHook',\n            interval=1000,\n            init_kwargs=dict(\n                project='two-stage-model',\n                entity='canvas11',\n                name='LEE_SingleTarget(GeneralTrash)_FasterRCNN'))\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nwork_dir = 'work_dirs/faster_rcnn_r50_fpn_single_target'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1516776462, "exp_name": "faster_rcnn_r50_fpn_1x_coco_single_target.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 1e-05, "memory": 13448, "data_time": 0.08067, "loss_rpn_cls": 0.55636, "loss_rpn_bbox": 0.03477, "loss_cls": 0.3762, "acc": 90.88477, "loss_bbox": 0.0241, "loss": 0.99143, "time": 1.06413}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 2e-05, "memory": 13448, "data_time": 0.0205, "loss_rpn_cls": 0.10373, "loss_rpn_bbox": 0.03805, "loss_cls": 0.09088, "acc": 98.34521, "loss_bbox": 0.0578, "loss": 0.29046, "time": 0.97018}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 4e-05, "memory": 13448, "data_time": 0.02084, "loss_rpn_cls": 0.07572, "loss_rpn_bbox": 0.02755, "loss_cls": 0.08558, "acc": 98.07227, "loss_bbox": 0.07084, "loss": 0.25969, "time": 0.98543}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 5e-05, "memory": 13448, "data_time": 0.02065, "loss_rpn_cls": 0.07095, "loss_rpn_bbox": 0.02929, "loss_cls": 0.10357, "acc": 97.65771, "loss_bbox": 0.08488, "loss": 0.28868, "time": 0.99553}
{"mode": "val", "epoch": 1, "iter": 412, "lr": 5e-05, "bbox_mAP": 0.02, "bbox_mAP_50": 0.062, "bbox_mAP_75": 0.007, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.029, "bbox_mAP_copypaste": "0.020 0.062 0.007 0.000 0.000 0.029"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 5e-05, "memory": 13448, "data_time": 0.08002, "loss_rpn_cls": 0.06167, "loss_rpn_bbox": 0.0311, "loss_cls": 0.10705, "acc": 97.38623, "loss_bbox": 0.09621, "loss": 0.29603, "time": 1.06523}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 5e-05, "memory": 13448, "data_time": 0.02058, "loss_rpn_cls": 0.06724, "loss_rpn_bbox": 0.02975, "loss_cls": 0.10964, "acc": 97.23291, "loss_bbox": 0.09789, "loss": 0.30451, "time": 0.9652}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 5e-05, "memory": 13448, "data_time": 0.02073, "loss_rpn_cls": 0.06032, "loss_rpn_bbox": 0.02727, "loss_cls": 0.11232, "acc": 97.21289, "loss_bbox": 0.09789, "loss": 0.2978, "time": 0.9836}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 5e-05, "memory": 13448, "data_time": 0.02075, "loss_rpn_cls": 0.061, "loss_rpn_bbox": 0.02998, "loss_cls": 0.11872, "acc": 96.94482, "loss_bbox": 0.10405, "loss": 0.31375, "time": 1.00187}
{"mode": "val", "epoch": 2, "iter": 412, "lr": 5e-05, "bbox_mAP": 0.059, "bbox_mAP_50": 0.131, "bbox_mAP_75": 0.044, "bbox_mAP_s": 0.006, "bbox_mAP_m": 0.014, "bbox_mAP_l": 0.084, "bbox_mAP_copypaste": "0.059 0.131 0.044 0.006 0.014 0.084"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 5e-05, "memory": 13448, "data_time": 0.08013, "loss_rpn_cls": 0.05104, "loss_rpn_bbox": 0.02459, "loss_cls": 0.1061, "acc": 97.13135, "loss_bbox": 0.09541, "loss": 0.27715, "time": 1.03328}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 5e-05, "memory": 13448, "data_time": 0.02061, "loss_rpn_cls": 0.05076, "loss_rpn_bbox": 0.02726, "loss_cls": 0.11123, "acc": 96.90479, "loss_bbox": 0.10184, "loss": 0.2911, "time": 0.99499}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 5e-05, "memory": 13448, "data_time": 0.0208, "loss_rpn_cls": 0.05534, "loss_rpn_bbox": 0.02533, "loss_cls": 0.12141, "acc": 96.67822, "loss_bbox": 0.11273, "loss": 0.31481, "time": 1.00446}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 5e-05, "memory": 13448, "data_time": 0.021, "loss_rpn_cls": 0.0535, "loss_rpn_bbox": 0.02622, "loss_cls": 0.1138, "acc": 96.84277, "loss_bbox": 0.10247, "loss": 0.29599, "time": 1.00807}
{"mode": "val", "epoch": 3, "iter": 412, "lr": 5e-05, "bbox_mAP": 0.097, "bbox_mAP_50": 0.216, "bbox_mAP_75": 0.068, "bbox_mAP_s": 0.001, "bbox_mAP_m": 0.031, "bbox_mAP_l": 0.132, "bbox_mAP_copypaste": "0.097 0.216 0.068 0.001 0.031 0.132"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 4e-05, "memory": 13448, "data_time": 0.0809, "loss_rpn_cls": 0.05217, "loss_rpn_bbox": 0.02483, "loss_cls": 0.12378, "acc": 96.53809, "loss_bbox": 0.11152, "loss": 0.3123, "time": 1.07231}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 4e-05, "memory": 13448, "data_time": 0.02087, "loss_rpn_cls": 0.05039, "loss_rpn_bbox": 0.02792, "loss_cls": 0.10989, "acc": 96.74609, "loss_bbox": 0.10301, "loss": 0.29121, "time": 1.00529}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 4e-05, "memory": 13448, "data_time": 0.02065, "loss_rpn_cls": 0.04624, "loss_rpn_bbox": 0.02532, "loss_cls": 0.11486, "acc": 96.63916, "loss_bbox": 0.10683, "loss": 0.29325, "time": 0.96314}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 4e-05, "memory": 13448, "data_time": 0.02029, "loss_rpn_cls": 0.04132, "loss_rpn_bbox": 0.0208, "loss_cls": 0.11253, "acc": 96.73633, "loss_bbox": 0.10456, "loss": 0.27921, "time": 0.95653}
{"mode": "val", "epoch": 4, "iter": 412, "lr": 4e-05, "bbox_mAP": 0.111, "bbox_mAP_50": 0.233, "bbox_mAP_75": 0.097, "bbox_mAP_s": 0.003, "bbox_mAP_m": 0.026, "bbox_mAP_l": 0.159, "bbox_mAP_copypaste": "0.111 0.233 0.097 0.003 0.026 0.159"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 4e-05, "memory": 13448, "data_time": 0.08327, "loss_rpn_cls": 0.04001, "loss_rpn_bbox": 0.02651, "loss_cls": 0.11344, "acc": 96.53809, "loss_bbox": 0.10699, "loss": 0.28695, "time": 1.08022}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 4e-05, "memory": 13448, "data_time": 0.02023, "loss_rpn_cls": 0.04168, "loss_rpn_bbox": 0.02278, "loss_cls": 0.11685, "acc": 96.53223, "loss_bbox": 0.11205, "loss": 0.29336, "time": 0.9854}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 4e-05, "memory": 13448, "data_time": 0.02057, "loss_rpn_cls": 0.04026, "loss_rpn_bbox": 0.02296, "loss_cls": 0.12153, "acc": 96.4292, "loss_bbox": 0.11396, "loss": 0.29871, "time": 0.99803}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 4e-05, "memory": 13448, "data_time": 0.02052, "loss_rpn_cls": 0.04282, "loss_rpn_bbox": 0.02233, "loss_cls": 0.12059, "acc": 96.24268, "loss_bbox": 0.11587, "loss": 0.3016, "time": 1.0101}
{"mode": "val", "epoch": 5, "iter": 412, "lr": 4e-05, "bbox_mAP": 0.122, "bbox_mAP_50": 0.228, "bbox_mAP_75": 0.115, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.035, "bbox_mAP_l": 0.167, "bbox_mAP_copypaste": "0.122 0.228 0.115 0.000 0.035 0.167"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 3e-05, "memory": 13448, "data_time": 0.0803, "loss_rpn_cls": 0.04314, "loss_rpn_bbox": 0.02976, "loss_cls": 0.1232, "acc": 96.16797, "loss_bbox": 0.11858, "loss": 0.31469, "time": 1.04868}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 3e-05, "memory": 13448, "data_time": 0.02049, "loss_rpn_cls": 0.03231, "loss_rpn_bbox": 0.02023, "loss_cls": 0.11868, "acc": 96.20947, "loss_bbox": 0.11847, "loss": 0.28969, "time": 0.97799}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 3e-05, "memory": 13448, "data_time": 0.02016, "loss_rpn_cls": 0.04003, "loss_rpn_bbox": 0.02342, "loss_cls": 0.11538, "acc": 96.41064, "loss_bbox": 0.10876, "loss": 0.28759, "time": 0.99146}
{"mode": "train", "epoch": 6, "iter": 200, "lr": 3e-05, "memory": 13448, "data_time": 0.02032, "loss_rpn_cls": 0.03559, "loss_rpn_bbox": 0.01987, "loss_cls": 0.11169, "acc": 96.49316, "loss_bbox": 0.10266, "loss": 0.26981, "time": 0.99043}
{"mode": "val", "epoch": 6, "iter": 412, "lr": 3e-05, "bbox_mAP": 0.124, "bbox_mAP_50": 0.249, "bbox_mAP_75": 0.117, "bbox_mAP_s": 0.011, "bbox_mAP_m": 0.053, "bbox_mAP_l": 0.18, "bbox_mAP_copypaste": "0.124 0.249 0.117 0.011 0.053 0.180"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 3e-05, "memory": 13448, "data_time": 0.08018, "loss_rpn_cls": 0.03593, "loss_rpn_bbox": 0.02172, "loss_cls": 0.122, "acc": 96.07715, "loss_bbox": 0.11714, "loss": 0.2968, "time": 1.07552}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 3e-05, "memory": 13448, "data_time": 0.02127, "loss_rpn_cls": 0.03436, "loss_rpn_bbox": 0.02193, "loss_cls": 0.12064, "acc": 96.27588, "loss_bbox": 0.1147, "loss": 0.29163, "time": 1.0066}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 3e-05, "memory": 13448, "data_time": 0.02137, "loss_rpn_cls": 0.03137, "loss_rpn_bbox": 0.02261, "loss_cls": 0.12061, "acc": 96.11328, "loss_bbox": 0.116, "loss": 0.29059, "time": 1.02294}
{"mode": "train", "epoch": 7, "iter": 200, "lr": 3e-05, "memory": 13448, "data_time": 0.02083, "loss_rpn_cls": 0.03614, "loss_rpn_bbox": 0.0209, "loss_cls": 0.1134, "acc": 96.41602, "loss_bbox": 0.10456, "loss": 0.27501, "time": 0.98178}
{"mode": "val", "epoch": 7, "iter": 412, "lr": 3e-05, "bbox_mAP": 0.154, "bbox_mAP_50": 0.283, "bbox_mAP_75": 0.147, "bbox_mAP_s": 0.001, "bbox_mAP_m": 0.065, "bbox_mAP_l": 0.202, "bbox_mAP_copypaste": "0.154 0.283 0.147 0.001 0.065 0.202"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 2e-05, "memory": 13448, "data_time": 0.0804, "loss_rpn_cls": 0.03646, "loss_rpn_bbox": 0.02218, "loss_cls": 0.11679, "acc": 96.16309, "loss_bbox": 0.11572, "loss": 0.29116, "time": 1.05281}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 2e-05, "memory": 13448, "data_time": 0.02111, "loss_rpn_cls": 0.03045, "loss_rpn_bbox": 0.02152, "loss_cls": 0.11257, "acc": 96.34473, "loss_bbox": 0.10972, "loss": 0.27426, "time": 1.00336}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 2e-05, "memory": 13448, "data_time": 0.02066, "loss_rpn_cls": 0.02609, "loss_rpn_bbox": 0.019, "loss_cls": 0.11333, "acc": 96.22461, "loss_bbox": 0.11276, "loss": 0.27118, "time": 0.96635}
{"mode": "train", "epoch": 8, "iter": 200, "lr": 2e-05, "memory": 13448, "data_time": 0.02073, "loss_rpn_cls": 0.03574, "loss_rpn_bbox": 0.02009, "loss_cls": 0.11847, "acc": 96.07227, "loss_bbox": 0.11572, "loss": 0.29002, "time": 0.97884}
{"mode": "val", "epoch": 8, "iter": 412, "lr": 2e-05, "bbox_mAP": 0.155, "bbox_mAP_50": 0.292, "bbox_mAP_75": 0.154, "bbox_mAP_s": 0.03, "bbox_mAP_m": 0.072, "bbox_mAP_l": 0.2, "bbox_mAP_copypaste": "0.155 0.292 0.154 0.030 0.072 0.200"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 1e-05, "memory": 13448, "data_time": 0.0798, "loss_rpn_cls": 0.02688, "loss_rpn_bbox": 0.01817, "loss_cls": 0.10902, "acc": 96.24951, "loss_bbox": 0.10939, "loss": 0.26347, "time": 1.07919}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 1e-05, "memory": 13448, "data_time": 0.02084, "loss_rpn_cls": 0.03049, "loss_rpn_bbox": 0.02063, "loss_cls": 0.12257, "acc": 96.00244, "loss_bbox": 0.12691, "loss": 0.30061, "time": 0.99969}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 1e-05, "memory": 13448, "data_time": 0.02059, "loss_rpn_cls": 0.03254, "loss_rpn_bbox": 0.02239, "loss_cls": 0.11284, "acc": 96.31885, "loss_bbox": 0.11309, "loss": 0.28085, "time": 1.00723}
{"mode": "train", "epoch": 9, "iter": 200, "lr": 1e-05, "memory": 13448, "data_time": 0.02111, "loss_rpn_cls": 0.02801, "loss_rpn_bbox": 0.02081, "loss_cls": 0.11672, "acc": 96.0957, "loss_bbox": 0.11763, "loss": 0.28317, "time": 0.98605}
{"mode": "val", "epoch": 9, "iter": 412, "lr": 1e-05, "bbox_mAP": 0.169, "bbox_mAP_50": 0.301, "bbox_mAP_75": 0.167, "bbox_mAP_s": 0.011, "bbox_mAP_m": 0.077, "bbox_mAP_l": 0.219, "bbox_mAP_copypaste": "0.169 0.301 0.167 0.011 0.077 0.219"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 1e-05, "memory": 13448, "data_time": 0.08173, "loss_rpn_cls": 0.02393, "loss_rpn_bbox": 0.01704, "loss_cls": 0.10382, "acc": 96.45068, "loss_bbox": 0.10753, "loss": 0.25233, "time": 1.07147}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 1e-05, "memory": 13448, "data_time": 0.02118, "loss_rpn_cls": 0.02775, "loss_rpn_bbox": 0.02071, "loss_cls": 0.10759, "acc": 96.37451, "loss_bbox": 0.10998, "loss": 0.26603, "time": 0.98732}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 1e-05, "memory": 13448, "data_time": 0.02206, "loss_rpn_cls": 0.02921, "loss_rpn_bbox": 0.01883, "loss_cls": 0.11203, "acc": 96.14893, "loss_bbox": 0.11689, "loss": 0.27696, "time": 1.00912}
{"mode": "train", "epoch": 10, "iter": 200, "lr": 1e-05, "memory": 13448, "data_time": 0.02158, "loss_rpn_cls": 0.02967, "loss_rpn_bbox": 0.01807, "loss_cls": 0.10558, "acc": 96.46631, "loss_bbox": 0.10675, "loss": 0.26007, "time": 1.00129}
{"mode": "val", "epoch": 10, "iter": 412, "lr": 1e-05, "bbox_mAP": 0.167, "bbox_mAP_50": 0.312, "bbox_mAP_75": 0.164, "bbox_mAP_s": 0.033, "bbox_mAP_m": 0.077, "bbox_mAP_l": 0.217, "bbox_mAP_copypaste": "0.167 0.312 0.164 0.033 0.077 0.217"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.0, "memory": 13448, "data_time": 0.07991, "loss_rpn_cls": 0.02541, "loss_rpn_bbox": 0.01722, "loss_cls": 0.11049, "acc": 96.17529, "loss_bbox": 0.11507, "loss": 0.26819, "time": 1.02454}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.0, "memory": 13448, "data_time": 0.02057, "loss_rpn_cls": 0.02254, "loss_rpn_bbox": 0.01564, "loss_cls": 0.10528, "acc": 96.37402, "loss_bbox": 0.10944, "loss": 0.25289, "time": 0.97339}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 0.0, "memory": 13448, "data_time": 0.02108, "loss_rpn_cls": 0.02841, "loss_rpn_bbox": 0.01949, "loss_cls": 0.10989, "acc": 96.25098, "loss_bbox": 0.11259, "loss": 0.27037, "time": 0.98262}
{"mode": "train", "epoch": 11, "iter": 200, "lr": 0.0, "memory": 13448, "data_time": 0.02081, "loss_rpn_cls": 0.02856, "loss_rpn_bbox": 0.02133, "loss_cls": 0.11105, "acc": 96.16895, "loss_bbox": 0.11572, "loss": 0.27666, "time": 0.99769}
{"mode": "val", "epoch": 11, "iter": 412, "lr": 0.0, "bbox_mAP": 0.174, "bbox_mAP_50": 0.314, "bbox_mAP_75": 0.172, "bbox_mAP_s": 0.013, "bbox_mAP_m": 0.082, "bbox_mAP_l": 0.223, "bbox_mAP_copypaste": "0.174 0.314 0.172 0.013 0.082 0.223"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0, "memory": 13448, "data_time": 0.07995, "loss_rpn_cls": 0.02292, "loss_rpn_bbox": 0.0177, "loss_cls": 0.10272, "acc": 96.45312, "loss_bbox": 0.10561, "loss": 0.24895, "time": 1.03895}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0, "memory": 13448, "data_time": 0.0201, "loss_rpn_cls": 0.02949, "loss_rpn_bbox": 0.01866, "loss_cls": 0.10846, "acc": 96.30566, "loss_bbox": 0.11072, "loss": 0.26734, "time": 0.96187}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0, "memory": 13448, "data_time": 0.02047, "loss_rpn_cls": 0.02337, "loss_rpn_bbox": 0.0196, "loss_cls": 0.1025, "acc": 96.4292, "loss_bbox": 0.10934, "loss": 0.2548, "time": 0.97801}
{"mode": "train", "epoch": 12, "iter": 200, "lr": 0.0, "memory": 13448, "data_time": 0.02055, "loss_rpn_cls": 0.0296, "loss_rpn_bbox": 0.02064, "loss_cls": 0.11557, "acc": 95.979, "loss_bbox": 0.1257, "loss": 0.29151, "time": 0.994}
{"mode": "val", "epoch": 12, "iter": 412, "lr": 0.0, "bbox_mAP": 0.176, "bbox_mAP_50": 0.32, "bbox_mAP_75": 0.184, "bbox_mAP_s": 0.023, "bbox_mAP_m": 0.081, "bbox_mAP_l": 0.228, "bbox_mAP_copypaste": "0.176 0.320 0.184 0.023 0.081 0.228"}
