2022-04-02 15:42:50,008 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]
CUDA available: True
GPU 0: Tesla V100-PCIE-32GB
CUDA_HOME: None
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.5.5
MMCV: 1.4.6
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.0
MMDetection: 2.22.0+
------------------------------------------------------------

2022-04-02 15:42:51,547 - mmdet - INFO - Distributed training: False
2022-04-02 15:42:52,957 - mmdet - INFO - Config:
model = dict(
    type='CascadeRCNN',
    backbone=dict(
        type='DetectoRS_ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50'),
        conv_cfg=dict(type='ConvAWS'),
        sac=dict(type='SAC', use_deform=True),
        stage_with_sac=(False, True, True, True),
        output_img=True),
    neck=dict(
        type='RFP',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5,
        rfp_steps=2,
        aspp_out_channels=64,
        aspp_dilations=(1, 3, 6, 1),
        rfp_backbone=dict(
            rfp_inplanes=256,
            type='DetectoRS_ResNet',
            depth=50,
            num_stages=4,
            out_indices=(0, 1, 2, 3),
            frozen_stages=1,
            norm_cfg=dict(type='BN', requires_grad=True),
            norm_eval=True,
            conv_cfg=dict(type='ConvAWS'),
            sac=dict(type='SAC', use_deform=True),
            stage_with_sac=(False, True, True, True),
            pretrained='torchvision://resnet50',
            style='pytorch')),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(
            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),
    roi_head=dict(
        type='CascadeRoIHead',
        num_stages=3,
        stage_loss_weights=[1, 0.5, 0.25],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.05, 0.05, 0.1, 0.1]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.033, 0.033, 0.067, 0.067]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))
        ]),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=0,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=2000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=[
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.5,
                    neg_iou_thr=0.5,
                    min_pos_iou=0.5,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.6,
                    min_pos_iou=0.6,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.7,
                    neg_iou_thr=0.7,
                    min_pos_iou=0.7,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100)))
dataset_type = 'CocoDataset'
data_root = '/opt/ml/detection/dataset/'
classes = ('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',
           'Styrofoam', 'Plastic bag', 'Battery', 'Clothing')
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
img_scale = (800, 800)
val_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(800, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(800, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
train_pipeline = [
    dict(type='Mosaic', img_scale=(800, 800), pad_val=128.0),
    dict(
        type='PhotoMetricDistortion',
        brightness_delta=32,
        contrast_range=(0.5, 1.5),
        saturation_range=(0.5, 1.1),
        hue_delta=18),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
data = dict(
    samples_per_gpu=3,
    workers_per_gpu=2,
    train=dict(
        type='MultiImageMixDataset',
        dataset=dict(
            type='CocoDataset',
            classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
                     'Plastic', 'Styrofoam', 'Plastic bag', 'Battery',
                     'Clothing'),
            ann_file=
            '/opt/ml/detection/dataset/stratified_kfold/basic_v2/cv_train_3.json',
            img_prefix='/opt/ml/detection/dataset/',
            pipeline=[
                dict(type='LoadImageFromFile'),
                dict(type='LoadAnnotations', with_bbox=True)
            ],
            filter_empty_gt=False),
        pipeline=[
            dict(type='Mosaic', img_scale=(800, 800), pad_val=128.0),
            dict(
                type='PhotoMetricDistortion',
                brightness_delta=32,
                contrast_range=(0.5, 1.5),
                saturation_range=(0.5, 1.1),
                hue_delta=18),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),
        ann_file=
        '/opt/ml/detection/dataset/stratified_kfold/basic_v2/cv_val_3.json',
        img_prefix='/opt/ml/detection/dataset/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(800, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),
        ann_file='/opt/ml/detection/dataset/test.json',
        img_prefix='/opt/ml/detection/dataset/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(800, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='bbox', classwise=True)
optimizer = dict(
    type='AdamW',
    lr=5e-05,
    betas=(0.9, 0.999),
    weight_decay=0.05,
    paramwise_cfg=dict(
        custom_keys=dict(
            absolute_pos_embed=dict(decay_mult=0.0),
            relative_position_bias_table=dict(decay_mult=0.0),
            norm=dict(decay_mult=0.0))))
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='CosineAnnealing',
    warmup='linear',
    warmup_iters=1301,
    warmup_ratio=0.001,
    min_lr=1e-06)
runner = dict(type='EpochBasedRunner', max_epochs=36)
checkpoint_config = dict(max_keep_ckpts=5, interval=1)
log_config = dict(
    interval=50,
    hooks=[
        dict(type='TextLoggerHook'),
        dict(
            type='WandbLoggerHook',
            interval=1000,
            init_kwargs=dict(
                project='two-stage-model',
                entity='canvas11',
                name='LEE_DetectoRS_cascade_rcnn_r50_1x_Mosaic_finetune'))
    ])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = '/opt/ml/detection/SEUNGHYUN_WORKSPACE/my_mmdetection/work_dirs/detectors_cascade_rcnn_r50_1x/epoch_24.pth'
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
work_dir = 'work_dirs/detectors_cascade_rcnn_r50_1x_mosaic'
auto_resume = False
gpu_ids = [0]

2022-04-02 15:42:52,957 - mmdet - INFO - Set random seed to 2031681302, deterministic: False
2022-04-02 15:42:54,619 - mmdet - INFO - load checkpoint from torchvision path: torchvision://resnet50
2022-04-02 15:42:54,956 - mmdet - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

missing keys in source state_dict: layer2.0.conv2.weight_diff, layer2.0.conv2.switch.weight, layer2.0.conv2.switch.bias, layer2.0.conv2.pre_context.weight, layer2.0.conv2.pre_context.bias, layer2.0.conv2.post_context.weight, layer2.0.conv2.post_context.bias, layer2.0.conv2.offset_s.weight, layer2.0.conv2.offset_s.bias, layer2.0.conv2.offset_l.weight, layer2.0.conv2.offset_l.bias, layer2.1.conv2.weight_diff, layer2.1.conv2.switch.weight, layer2.1.conv2.switch.bias, layer2.1.conv2.pre_context.weight, layer2.1.conv2.pre_context.bias, layer2.1.conv2.post_context.weight, layer2.1.conv2.post_context.bias, layer2.1.conv2.offset_s.weight, layer2.1.conv2.offset_s.bias, layer2.1.conv2.offset_l.weight, layer2.1.conv2.offset_l.bias, layer2.2.conv2.weight_diff, layer2.2.conv2.switch.weight, layer2.2.conv2.switch.bias, layer2.2.conv2.pre_context.weight, layer2.2.conv2.pre_context.bias, layer2.2.conv2.post_context.weight, layer2.2.conv2.post_context.bias, layer2.2.conv2.offset_s.weight, layer2.2.conv2.offset_s.bias, layer2.2.conv2.offset_l.weight, layer2.2.conv2.offset_l.bias, layer2.3.conv2.weight_diff, layer2.3.conv2.switch.weight, layer2.3.conv2.switch.bias, layer2.3.conv2.pre_context.weight, layer2.3.conv2.pre_context.bias, layer2.3.conv2.post_context.weight, layer2.3.conv2.post_context.bias, layer2.3.conv2.offset_s.weight, layer2.3.conv2.offset_s.bias, layer2.3.conv2.offset_l.weight, layer2.3.conv2.offset_l.bias, layer3.0.conv2.weight_diff, layer3.0.conv2.switch.weight, layer3.0.conv2.switch.bias, layer3.0.conv2.pre_context.weight, layer3.0.conv2.pre_context.bias, layer3.0.conv2.post_context.weight, layer3.0.conv2.post_context.bias, layer3.0.conv2.offset_s.weight, layer3.0.conv2.offset_s.bias, layer3.0.conv2.offset_l.weight, layer3.0.conv2.offset_l.bias, layer3.1.conv2.weight_diff, layer3.1.conv2.switch.weight, layer3.1.conv2.switch.bias, layer3.1.conv2.pre_context.weight, layer3.1.conv2.pre_context.bias, layer3.1.conv2.post_context.weight, layer3.1.conv2.post_context.bias, layer3.1.conv2.offset_s.weight, layer3.1.conv2.offset_s.bias, layer3.1.conv2.offset_l.weight, layer3.1.conv2.offset_l.bias, layer3.2.conv2.weight_diff, layer3.2.conv2.switch.weight, layer3.2.conv2.switch.bias, layer3.2.conv2.pre_context.weight, layer3.2.conv2.pre_context.bias, layer3.2.conv2.post_context.weight, layer3.2.conv2.post_context.bias, layer3.2.conv2.offset_s.weight, layer3.2.conv2.offset_s.bias, layer3.2.conv2.offset_l.weight, layer3.2.conv2.offset_l.bias, layer3.3.conv2.weight_diff, layer3.3.conv2.switch.weight, layer3.3.conv2.switch.bias, layer3.3.conv2.pre_context.weight, layer3.3.conv2.pre_context.bias, layer3.3.conv2.post_context.weight, layer3.3.conv2.post_context.bias, layer3.3.conv2.offset_s.weight, layer3.3.conv2.offset_s.bias, layer3.3.conv2.offset_l.weight, layer3.3.conv2.offset_l.bias, layer3.4.conv2.weight_diff, layer3.4.conv2.switch.weight, layer3.4.conv2.switch.bias, layer3.4.conv2.pre_context.weight, layer3.4.conv2.pre_context.bias, layer3.4.conv2.post_context.weight, layer3.4.conv2.post_context.bias, layer3.4.conv2.offset_s.weight, layer3.4.conv2.offset_s.bias, layer3.4.conv2.offset_l.weight, layer3.4.conv2.offset_l.bias, layer3.5.conv2.weight_diff, layer3.5.conv2.switch.weight, layer3.5.conv2.switch.bias, layer3.5.conv2.pre_context.weight, layer3.5.conv2.pre_context.bias, layer3.5.conv2.post_context.weight, layer3.5.conv2.post_context.bias, layer3.5.conv2.offset_s.weight, layer3.5.conv2.offset_s.bias, layer3.5.conv2.offset_l.weight, layer3.5.conv2.offset_l.bias, layer4.0.conv2.weight_diff, layer4.0.conv2.switch.weight, layer4.0.conv2.switch.bias, layer4.0.conv2.pre_context.weight, layer4.0.conv2.pre_context.bias, layer4.0.conv2.post_context.weight, layer4.0.conv2.post_context.bias, layer4.0.conv2.offset_s.weight, layer4.0.conv2.offset_s.bias, layer4.0.conv2.offset_l.weight, layer4.0.conv2.offset_l.bias, layer4.1.conv2.weight_diff, layer4.1.conv2.switch.weight, layer4.1.conv2.switch.bias, layer4.1.conv2.pre_context.weight, layer4.1.conv2.pre_context.bias, layer4.1.conv2.post_context.weight, layer4.1.conv2.post_context.bias, layer4.1.conv2.offset_s.weight, layer4.1.conv2.offset_s.bias, layer4.1.conv2.offset_l.weight, layer4.1.conv2.offset_l.bias, layer4.2.conv2.weight_diff, layer4.2.conv2.switch.weight, layer4.2.conv2.switch.bias, layer4.2.conv2.pre_context.weight, layer4.2.conv2.pre_context.bias, layer4.2.conv2.post_context.weight, layer4.2.conv2.post_context.bias, layer4.2.conv2.offset_s.weight, layer4.2.conv2.offset_s.bias, layer4.2.conv2.offset_l.weight, layer4.2.conv2.offset_l.bias

2022-04-02 15:42:55,035 - mmdet - INFO - load checkpoint from torchvision path: torchvision://resnet50
2022-04-02 15:42:55,359 - mmdet - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

missing keys in source state_dict: layer2.0.conv2.weight_diff, layer2.0.conv2.switch.weight, layer2.0.conv2.switch.bias, layer2.0.conv2.pre_context.weight, layer2.0.conv2.pre_context.bias, layer2.0.conv2.post_context.weight, layer2.0.conv2.post_context.bias, layer2.0.conv2.offset_s.weight, layer2.0.conv2.offset_s.bias, layer2.0.conv2.offset_l.weight, layer2.0.conv2.offset_l.bias, layer2.0.rfp_conv.weight, layer2.0.rfp_conv.bias, layer2.1.conv2.weight_diff, layer2.1.conv2.switch.weight, layer2.1.conv2.switch.bias, layer2.1.conv2.pre_context.weight, layer2.1.conv2.pre_context.bias, layer2.1.conv2.post_context.weight, layer2.1.conv2.post_context.bias, layer2.1.conv2.offset_s.weight, layer2.1.conv2.offset_s.bias, layer2.1.conv2.offset_l.weight, layer2.1.conv2.offset_l.bias, layer2.2.conv2.weight_diff, layer2.2.conv2.switch.weight, layer2.2.conv2.switch.bias, layer2.2.conv2.pre_context.weight, layer2.2.conv2.pre_context.bias, layer2.2.conv2.post_context.weight, layer2.2.conv2.post_context.bias, layer2.2.conv2.offset_s.weight, layer2.2.conv2.offset_s.bias, layer2.2.conv2.offset_l.weight, layer2.2.conv2.offset_l.bias, layer2.3.conv2.weight_diff, layer2.3.conv2.switch.weight, layer2.3.conv2.switch.bias, layer2.3.conv2.pre_context.weight, layer2.3.conv2.pre_context.bias, layer2.3.conv2.post_context.weight, layer2.3.conv2.post_context.bias, layer2.3.conv2.offset_s.weight, layer2.3.conv2.offset_s.bias, layer2.3.conv2.offset_l.weight, layer2.3.conv2.offset_l.bias, layer3.0.conv2.weight_diff, layer3.0.conv2.switch.weight, layer3.0.conv2.switch.bias, layer3.0.conv2.pre_context.weight, layer3.0.conv2.pre_context.bias, layer3.0.conv2.post_context.weight, layer3.0.conv2.post_context.bias, layer3.0.conv2.offset_s.weight, layer3.0.conv2.offset_s.bias, layer3.0.conv2.offset_l.weight, layer3.0.conv2.offset_l.bias, layer3.0.rfp_conv.weight, layer3.0.rfp_conv.bias, layer3.1.conv2.weight_diff, layer3.1.conv2.switch.weight, layer3.1.conv2.switch.bias, layer3.1.conv2.pre_context.weight, layer3.1.conv2.pre_context.bias, layer3.1.conv2.post_context.weight, layer3.1.conv2.post_context.bias, layer3.1.conv2.offset_s.weight, layer3.1.conv2.offset_s.bias, layer3.1.conv2.offset_l.weight, layer3.1.conv2.offset_l.bias, layer3.2.conv2.weight_diff, layer3.2.conv2.switch.weight, layer3.2.conv2.switch.bias, layer3.2.conv2.pre_context.weight, layer3.2.conv2.pre_context.bias, layer3.2.conv2.post_context.weight, layer3.2.conv2.post_context.bias, layer3.2.conv2.offset_s.weight, layer3.2.conv2.offset_s.bias, layer3.2.conv2.offset_l.weight, layer3.2.conv2.offset_l.bias, layer3.3.conv2.weight_diff, layer3.3.conv2.switch.weight, layer3.3.conv2.switch.bias, layer3.3.conv2.pre_context.weight, layer3.3.conv2.pre_context.bias, layer3.3.conv2.post_context.weight, layer3.3.conv2.post_context.bias, layer3.3.conv2.offset_s.weight, layer3.3.conv2.offset_s.bias, layer3.3.conv2.offset_l.weight, layer3.3.conv2.offset_l.bias, layer3.4.conv2.weight_diff, layer3.4.conv2.switch.weight, layer3.4.conv2.switch.bias, layer3.4.conv2.pre_context.weight, layer3.4.conv2.pre_context.bias, layer3.4.conv2.post_context.weight, layer3.4.conv2.post_context.bias, layer3.4.conv2.offset_s.weight, layer3.4.conv2.offset_s.bias, layer3.4.conv2.offset_l.weight, layer3.4.conv2.offset_l.bias, layer3.5.conv2.weight_diff, layer3.5.conv2.switch.weight, layer3.5.conv2.switch.bias, layer3.5.conv2.pre_context.weight, layer3.5.conv2.pre_context.bias, layer3.5.conv2.post_context.weight, layer3.5.conv2.post_context.bias, layer3.5.conv2.offset_s.weight, layer3.5.conv2.offset_s.bias, layer3.5.conv2.offset_l.weight, layer3.5.conv2.offset_l.bias, layer4.0.conv2.weight_diff, layer4.0.conv2.switch.weight, layer4.0.conv2.switch.bias, layer4.0.conv2.pre_context.weight, layer4.0.conv2.pre_context.bias, layer4.0.conv2.post_context.weight, layer4.0.conv2.post_context.bias, layer4.0.conv2.offset_s.weight, layer4.0.conv2.offset_s.bias, layer4.0.conv2.offset_l.weight, layer4.0.conv2.offset_l.bias, layer4.0.rfp_conv.weight, layer4.0.rfp_conv.bias, layer4.1.conv2.weight_diff, layer4.1.conv2.switch.weight, layer4.1.conv2.switch.bias, layer4.1.conv2.pre_context.weight, layer4.1.conv2.pre_context.bias, layer4.1.conv2.post_context.weight, layer4.1.conv2.post_context.bias, layer4.1.conv2.offset_s.weight, layer4.1.conv2.offset_s.bias, layer4.1.conv2.offset_l.weight, layer4.1.conv2.offset_l.bias, layer4.2.conv2.weight_diff, layer4.2.conv2.switch.weight, layer4.2.conv2.switch.bias, layer4.2.conv2.pre_context.weight, layer4.2.conv2.pre_context.bias, layer4.2.conv2.post_context.weight, layer4.2.conv2.post_context.bias, layer4.2.conv2.offset_s.weight, layer4.2.conv2.offset_s.bias, layer4.2.conv2.offset_l.weight, layer4.2.conv2.offset_l.bias

2022-04-02 15:42:55,504 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2022-04-02 15:42:55,513 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2022-04-02 15:42:55,640 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2022-04-02 15:42:55,748 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.conv2.weight_diff - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.conv2.weight_diff - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.conv2.weight_diff - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.conv1.weight - torch.Size([64, 3, 7, 7]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.downsample.1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.downsample.1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.downsample.1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.downsample.1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.rfp_conv.weight - torch.Size([512, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.rfp_conv.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.downsample.1.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.downsample.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.rfp_conv.weight - torch.Size([1024, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.rfp_conv.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.conv2.weight_diff - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.downsample.1.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.downsample.1.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.rfp_conv.weight - torch.Size([2048, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.rfp_conv.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.conv2.weight_diff - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.conv2.weight_diff - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_aspp.aspp.0.weight - torch.Size([64, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_aspp.aspp.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_aspp.aspp.1.weight - torch.Size([64, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_aspp.aspp.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_aspp.aspp.2.weight - torch.Size([64, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_aspp.aspp.2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_aspp.aspp.3.weight - torch.Size([64, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_aspp.aspp.3.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_weight.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_weight.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_cls.weight - torch.Size([11, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.0.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.0.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.0.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.1.fc_cls.weight - torch.Size([11, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.1.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.1.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.1.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.1.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.1.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.2.fc_cls.weight - torch.Size([11, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.2.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.2.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.2.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.2.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.2.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 
2022-04-02 15:43:00,565 - mmdet - INFO - load checkpoint from local path: /opt/ml/detection/SEUNGHYUN_WORKSPACE/my_mmdetection/work_dirs/detectors_cascade_rcnn_r50_1x/epoch_24.pth
2022-04-02 15:43:02,019 - mmdet - INFO - resumed epoch 24, iter 11712
2022-04-02 15:43:02,024 - mmdet - INFO - Start running, host: root@0a25b60abdd2, work_dir: /opt/ml/detection/SEUNGHYUN_WORKSPACE/my_mmdetection/work_dirs/detectors_cascade_rcnn_r50_1x_mosaic
2022-04-02 15:43:02,025 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
2022-04-02 15:43:02,025 - mmdet - INFO - workflow: [('train', 1)], max: 36 epochs
2022-04-02 15:43:02,026 - mmdet - INFO - Checkpoints will be saved to /opt/ml/detection/SEUNGHYUN_WORKSPACE/my_mmdetection/work_dirs/detectors_cascade_rcnn_r50_1x_mosaic by HardDiskBackend.
2022-04-02 15:45:50,646 - mmdet - INFO - Epoch [25][50/1301]	lr: 2.575e-05, eta: 1 day, 7:31:46, time: 3.236, data_time: 0.074, memory: 29594, loss_rpn_cls: 0.0342, loss_rpn_bbox: 0.0484, s0.loss_cls: 0.3042, s0.acc: 89.8086, s0.loss_bbox: 0.1421, s1.loss_cls: 0.1358, s1.acc: 90.9273, s1.loss_bbox: 0.1358, s2.loss_cls: 0.0684, s2.acc: 90.9945, s2.loss_bbox: 0.0821, loss: 0.9511
2022-04-02 15:48:28,278 - mmdet - INFO - Epoch [25][100/1301]	lr: 2.575e-05, eta: 1 day, 7:04:41, time: 3.153, data_time: 0.016, memory: 29594, loss_rpn_cls: 0.0309, loss_rpn_bbox: 0.0516, s0.loss_cls: 0.3226, s0.acc: 89.5560, s0.loss_bbox: 0.1540, s1.loss_cls: 0.1462, s1.acc: 90.6129, s1.loss_bbox: 0.1417, s2.loss_cls: 0.0717, s2.acc: 90.6264, s2.loss_bbox: 0.0841, loss: 1.0029
2022-04-02 15:51:05,939 - mmdet - INFO - Epoch [25][150/1301]	lr: 2.575e-05, eta: 1 day, 6:54:01, time: 3.153, data_time: 0.016, memory: 29594, loss_rpn_cls: 0.0337, loss_rpn_bbox: 0.0543, s0.loss_cls: 0.3099, s0.acc: 89.8828, s0.loss_bbox: 0.1447, s1.loss_cls: 0.1398, s1.acc: 91.1058, s1.loss_bbox: 0.1329, s2.loss_cls: 0.0684, s2.acc: 91.2301, s2.loss_bbox: 0.0771, loss: 0.9607
2022-04-02 15:53:43,847 - mmdet - INFO - Epoch [25][200/1301]	lr: 2.575e-05, eta: 1 day, 6:48:05, time: 3.158, data_time: 0.016, memory: 29594, loss_rpn_cls: 0.0339, loss_rpn_bbox: 0.0452, s0.loss_cls: 0.2933, s0.acc: 90.4089, s0.loss_bbox: 0.1390, s1.loss_cls: 0.1315, s1.acc: 91.5605, s1.loss_bbox: 0.1298, s2.loss_cls: 0.0640, s2.acc: 91.7999, s2.loss_bbox: 0.0790, loss: 0.9157
2022-04-02 15:56:21,567 - mmdet - INFO - Epoch [25][250/1301]	lr: 2.575e-05, eta: 1 day, 6:43:02, time: 3.154, data_time: 0.016, memory: 29594, loss_rpn_cls: 0.0263, loss_rpn_bbox: 0.0489, s0.loss_cls: 0.2918, s0.acc: 90.2318, s0.loss_bbox: 0.1473, s1.loss_cls: 0.1305, s1.acc: 91.5730, s1.loss_bbox: 0.1417, s2.loss_cls: 0.0629, s2.acc: 91.5004, s2.loss_bbox: 0.0815, loss: 0.9309
2022-04-02 15:58:59,298 - mmdet - INFO - Epoch [25][300/1301]	lr: 2.575e-05, eta: 1 day, 6:38:49, time: 3.155, data_time: 0.016, memory: 29594, loss_rpn_cls: 0.0273, loss_rpn_bbox: 0.0499, s0.loss_cls: 0.2955, s0.acc: 90.1354, s0.loss_bbox: 0.1508, s1.loss_cls: 0.1315, s1.acc: 91.3858, s1.loss_bbox: 0.1424, s2.loss_cls: 0.0646, s2.acc: 91.4347, s2.loss_bbox: 0.0850, loss: 0.9470
2022-04-02 16:01:37,239 - mmdet - INFO - Epoch [25][350/1301]	lr: 2.575e-05, eta: 1 day, 6:35:23, time: 3.159, data_time: 0.016, memory: 29594, loss_rpn_cls: 0.0290, loss_rpn_bbox: 0.0521, s0.loss_cls: 0.2767, s0.acc: 90.6445, s0.loss_bbox: 0.1377, s1.loss_cls: 0.1243, s1.acc: 91.6420, s1.loss_bbox: 0.1241, s2.loss_cls: 0.0606, s2.acc: 91.8553, s2.loss_bbox: 0.0754, loss: 0.8798
2022-04-02 16:04:15,361 - mmdet - INFO - Epoch [25][400/1301]	lr: 2.575e-05, eta: 1 day, 6:32:26, time: 3.162, data_time: 0.016, memory: 29594, loss_rpn_cls: 0.0255, loss_rpn_bbox: 0.0462, s0.loss_cls: 0.2759, s0.acc: 90.6992, s0.loss_bbox: 0.1304, s1.loss_cls: 0.1251, s1.acc: 91.6717, s1.loss_bbox: 0.1283, s2.loss_cls: 0.0617, s2.acc: 91.7059, s2.loss_bbox: 0.0785, loss: 0.8716
2022-04-02 16:06:53,295 - mmdet - INFO - Epoch [25][450/1301]	lr: 2.575e-05, eta: 1 day, 6:29:18, time: 3.159, data_time: 0.016, memory: 29594, loss_rpn_cls: 0.0249, loss_rpn_bbox: 0.0415, s0.loss_cls: 0.2568, s0.acc: 91.3411, s0.loss_bbox: 0.1282, s1.loss_cls: 0.1079, s1.acc: 92.7678, s1.loss_bbox: 0.1227, s2.loss_cls: 0.0547, s2.acc: 92.4930, s2.loss_bbox: 0.0768, loss: 0.8135
2022-04-02 16:09:31,005 - mmdet - INFO - Epoch [25][500/1301]	lr: 2.575e-05, eta: 1 day, 6:26:01, time: 3.154, data_time: 0.016, memory: 29594, loss_rpn_cls: 0.0241, loss_rpn_bbox: 0.0438, s0.loss_cls: 0.2674, s0.acc: 90.8398, s0.loss_bbox: 0.1369, s1.loss_cls: 0.1174, s1.acc: 92.1859, s1.loss_bbox: 0.1274, s2.loss_cls: 0.0580, s2.acc: 92.1881, s2.loss_bbox: 0.0810, loss: 0.8560
2022-04-02 16:12:09,093 - mmdet - INFO - Epoch [25][550/1301]	lr: 2.575e-05, eta: 1 day, 6:23:15, time: 3.162, data_time: 0.016, memory: 29594, loss_rpn_cls: 0.0250, loss_rpn_bbox: 0.0424, s0.loss_cls: 0.2595, s0.acc: 91.3294, s0.loss_bbox: 0.1243, s1.loss_cls: 0.1113, s1.acc: 92.5338, s1.loss_bbox: 0.1199, s2.loss_cls: 0.0553, s2.acc: 92.6991, s2.loss_bbox: 0.0757, loss: 0.8135
2022-04-02 16:14:46,717 - mmdet - INFO - Epoch [25][600/1301]	lr: 2.575e-05, eta: 1 day, 6:20:03, time: 3.152, data_time: 0.016, memory: 29594, loss_rpn_cls: 0.0269, loss_rpn_bbox: 0.0443, s0.loss_cls: 0.2751, s0.acc: 90.8047, s0.loss_bbox: 0.1332, s1.loss_cls: 0.1233, s1.acc: 92.1223, s1.loss_bbox: 0.1260, s2.loss_cls: 0.0601, s2.acc: 92.2664, s2.loss_bbox: 0.0765, loss: 0.8653
2022-04-02 16:17:24,539 - mmdet - INFO - Epoch [25][650/1301]	lr: 2.575e-05, eta: 1 day, 6:17:07, time: 3.156, data_time: 0.017, memory: 29594, loss_rpn_cls: 0.0214, loss_rpn_bbox: 0.0430, s0.loss_cls: 0.2592, s0.acc: 91.0937, s0.loss_bbox: 0.1334, s1.loss_cls: 0.1144, s1.acc: 92.1478, s1.loss_bbox: 0.1261, s2.loss_cls: 0.0549, s2.acc: 92.4521, s2.loss_bbox: 0.0775, loss: 0.8298
2022-04-02 16:20:02,735 - mmdet - INFO - Epoch [25][700/1301]	lr: 2.575e-05, eta: 1 day, 6:14:32, time: 3.164, data_time: 0.017, memory: 29594, loss_rpn_cls: 0.0227, loss_rpn_bbox: 0.0452, s0.loss_cls: 0.2542, s0.acc: 91.3021, s0.loss_bbox: 0.1289, s1.loss_cls: 0.1115, s1.acc: 92.5918, s1.loss_bbox: 0.1235, s2.loss_cls: 0.0561, s2.acc: 92.5484, s2.loss_bbox: 0.0788, loss: 0.8211
2022-04-02 16:22:40,797 - mmdet - INFO - Epoch [25][750/1301]	lr: 2.575e-05, eta: 1 day, 6:11:51, time: 3.161, data_time: 0.016, memory: 29594, loss_rpn_cls: 0.0243, loss_rpn_bbox: 0.0503, s0.loss_cls: 0.2597, s0.acc: 91.0495, s0.loss_bbox: 0.1375, s1.loss_cls: 0.1132, s1.acc: 92.3298, s1.loss_bbox: 0.1287, s2.loss_cls: 0.0551, s2.acc: 92.6970, s2.loss_bbox: 0.0776, loss: 0.8463
2022-04-02 16:25:19,766 - mmdet - INFO - Epoch [25][800/1301]	lr: 2.575e-05, eta: 1 day, 6:09:48, time: 3.179, data_time: 0.017, memory: 29594, loss_rpn_cls: 0.0215, loss_rpn_bbox: 0.0419, s0.loss_cls: 0.2542, s0.acc: 91.3607, s0.loss_bbox: 0.1248, s1.loss_cls: 0.1102, s1.acc: 92.7351, s1.loss_bbox: 0.1249, s2.loss_cls: 0.0538, s2.acc: 92.9329, s2.loss_bbox: 0.0789, loss: 0.8101
2022-04-02 16:27:57,716 - mmdet - INFO - Epoch [25][850/1301]	lr: 2.575e-05, eta: 1 day, 6:07:01, time: 3.159, data_time: 0.016, memory: 29594, loss_rpn_cls: 0.0239, loss_rpn_bbox: 0.0444, s0.loss_cls: 0.2535, s0.acc: 91.2487, s0.loss_bbox: 0.1269, s1.loss_cls: 0.1125, s1.acc: 92.4007, s1.loss_bbox: 0.1239, s2.loss_cls: 0.0548, s2.acc: 92.5819, s2.loss_bbox: 0.0785, loss: 0.8185
2022-04-02 16:30:35,169 - mmdet - INFO - Epoch [25][900/1301]	lr: 2.575e-05, eta: 1 day, 6:03:55, time: 3.149, data_time: 0.016, memory: 29594, loss_rpn_cls: 0.0212, loss_rpn_bbox: 0.0434, s0.loss_cls: 0.2547, s0.acc: 91.3685, s0.loss_bbox: 0.1297, s1.loss_cls: 0.1136, s1.acc: 92.4529, s1.loss_bbox: 0.1180, s2.loss_cls: 0.0557, s2.acc: 92.4900, s2.loss_bbox: 0.0717, loss: 0.8079
2022-04-02 16:33:12,616 - mmdet - INFO - Epoch [25][950/1301]	lr: 2.575e-05, eta: 1 day, 6:00:53, time: 3.149, data_time: 0.016, memory: 29594, loss_rpn_cls: 0.0217, loss_rpn_bbox: 0.0447, s0.loss_cls: 0.2668, s0.acc: 91.1602, s0.loss_bbox: 0.1338, s1.loss_cls: 0.1155, s1.acc: 92.3750, s1.loss_bbox: 0.1311, s2.loss_cls: 0.0570, s2.acc: 92.3536, s2.loss_bbox: 0.0819, loss: 0.8525
2022-04-02 16:35:50,058 - mmdet - INFO - Epoch [25][1000/1301]	lr: 2.575e-05, eta: 1 day, 5:57:52, time: 3.149, data_time: 0.016, memory: 29594, loss_rpn_cls: 0.0187, loss_rpn_bbox: 0.0401, s0.loss_cls: 0.2339, s0.acc: 92.0729, s0.loss_bbox: 0.1240, s1.loss_cls: 0.1007, s1.acc: 93.3066, s1.loss_bbox: 0.1209, s2.loss_cls: 0.0487, s2.acc: 93.3604, s2.loss_bbox: 0.0751, loss: 0.7621
2022-04-02 16:38:27,658 - mmdet - INFO - Epoch [25][1050/1301]	lr: 2.575e-05, eta: 1 day, 5:54:59, time: 3.152, data_time: 0.017, memory: 29594, loss_rpn_cls: 0.0217, loss_rpn_bbox: 0.0456, s0.loss_cls: 0.2572, s0.acc: 91.3685, s0.loss_bbox: 0.1316, s1.loss_cls: 0.1100, s1.acc: 92.8994, s1.loss_bbox: 0.1207, s2.loss_cls: 0.0531, s2.acc: 93.0135, s2.loss_bbox: 0.0750, loss: 0.8149
2022-04-02 16:41:05,374 - mmdet - INFO - Epoch [25][1100/1301]	lr: 2.575e-05, eta: 1 day, 5:52:11, time: 3.154, data_time: 0.016, memory: 29594, loss_rpn_cls: 0.0211, loss_rpn_bbox: 0.0385, s0.loss_cls: 0.2230, s0.acc: 92.3164, s0.loss_bbox: 0.1212, s1.loss_cls: 0.0935, s1.acc: 93.6510, s1.loss_bbox: 0.1225, s2.loss_cls: 0.0473, s2.acc: 93.6009, s2.loss_bbox: 0.0765, loss: 0.7435
2022-04-02 16:43:42,651 - mmdet - INFO - Epoch [25][1150/1301]	lr: 2.575e-05, eta: 1 day, 5:49:11, time: 3.146, data_time: 0.016, memory: 29594, loss_rpn_cls: 0.0222, loss_rpn_bbox: 0.0437, s0.loss_cls: 0.2347, s0.acc: 91.9518, s0.loss_bbox: 0.1278, s1.loss_cls: 0.1018, s1.acc: 93.1478, s1.loss_bbox: 0.1163, s2.loss_cls: 0.0506, s2.acc: 93.1361, s2.loss_bbox: 0.0741, loss: 0.7712
2022-04-02 16:46:20,449 - mmdet - INFO - Epoch [25][1200/1301]	lr: 2.575e-05, eta: 1 day, 5:46:28, time: 3.156, data_time: 0.016, memory: 29594, loss_rpn_cls: 0.0210, loss_rpn_bbox: 0.0456, s0.loss_cls: 0.2544, s0.acc: 91.4674, s0.loss_bbox: 0.1305, s1.loss_cls: 0.1080, s1.acc: 92.9191, s1.loss_bbox: 0.1190, s2.loss_cls: 0.0535, s2.acc: 92.9497, s2.loss_bbox: 0.0750, loss: 0.8070
2022-04-02 16:48:58,144 - mmdet - INFO - Epoch [25][1250/1301]	lr: 2.575e-05, eta: 1 day, 5:43:42, time: 3.154, data_time: 0.016, memory: 29594, loss_rpn_cls: 0.0225, loss_rpn_bbox: 0.0468, s0.loss_cls: 0.2530, s0.acc: 91.2969, s0.loss_bbox: 0.1332, s1.loss_cls: 0.1074, s1.acc: 92.6007, s1.loss_bbox: 0.1258, s2.loss_cls: 0.0539, s2.acc: 92.6677, s2.loss_bbox: 0.0772, loss: 0.8198
2022-04-02 16:51:35,709 - mmdet - INFO - Epoch [25][1300/1301]	lr: 2.575e-05, eta: 1 day, 5:40:53, time: 3.151, data_time: 0.017, memory: 29594, loss_rpn_cls: 0.0205, loss_rpn_bbox: 0.0403, s0.loss_cls: 0.2469, s0.acc: 91.8073, s0.loss_bbox: 0.1231, s1.loss_cls: 0.1021, s1.acc: 93.3422, s1.loss_bbox: 0.1192, s2.loss_cls: 0.0498, s2.acc: 93.5561, s2.loss_bbox: 0.0758, loss: 0.7776
2022-04-02 16:51:38,911 - mmdet - INFO - Saving checkpoint at 25 epochs
2022-04-02 16:54:08,542 - mmdet - INFO - Evaluating bbox...
2022-04-02 16:54:11,890 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.396
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.531
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.423
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.009
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.076
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.462
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.522
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.522
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.522
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.032
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.213
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.589

2022-04-02 16:54:11,891 - mmdet - INFO - 
+---------------+-------+-------------+-------+------------+-------+
| category      | AP    | category    | AP    | category   | AP    |
+---------------+-------+-------------+-------+------------+-------+
| General trash | 0.220 | Paper       | 0.295 | Paper pack | 0.428 |
| Metal         | 0.445 | Glass       | 0.398 | Plastic    | 0.340 |
| Styrofoam     | 0.352 | Plastic bag | 0.513 | Battery    | 0.602 |
| Clothing      | 0.363 | None        | None  | None       | None  |
+---------------+-------+-------------+-------+------------+-------+
2022-04-02 16:54:11,938 - mmdet - INFO - Exp name: detectors_cascade_rcnn_r50_1x_coco.py
2022-04-02 16:54:11,938 - mmdet - INFO - Epoch(val) [25][982]	bbox_mAP: 0.3960, bbox_mAP_50: 0.5310, bbox_mAP_75: 0.4230, bbox_mAP_s: 0.0090, bbox_mAP_m: 0.0760, bbox_mAP_l: 0.4620, bbox_mAP_copypaste: 0.396 0.531 0.423 0.009 0.076 0.462
2022-04-02 16:56:52,673 - mmdet - INFO - Epoch [26][50/1301]	lr: 2.211e-05, eta: 1 day, 5:38:02, time: 3.214, data_time: 0.074, memory: 29594, loss_rpn_cls: 0.0166, loss_rpn_bbox: 0.0417, s0.loss_cls: 0.2053, s0.acc: 93.0625, s0.loss_bbox: 0.1129, s1.loss_cls: 0.0825, s1.acc: 94.6435, s1.loss_bbox: 0.1115, s2.loss_cls: 0.0393, s2.acc: 94.8434, s2.loss_bbox: 0.0706, loss: 0.6803
2022-04-02 16:59:30,287 - mmdet - INFO - Epoch [26][100/1301]	lr: 2.211e-05, eta: 1 day, 5:35:16, time: 3.152, data_time: 0.016, memory: 29594, loss_rpn_cls: 0.0154, loss_rpn_bbox: 0.0380, s0.loss_cls: 0.1989, s0.acc: 93.1575, s0.loss_bbox: 0.1079, s1.loss_cls: 0.0801, s1.acc: 94.6335, s1.loss_bbox: 0.1044, s2.loss_cls: 0.0398, s2.acc: 94.6213, s2.loss_bbox: 0.0678, loss: 0.6522
2022-04-02 17:02:08,128 - mmdet - INFO - Epoch [26][150/1301]	lr: 2.211e-05, eta: 1 day, 5:32:36, time: 3.157, data_time: 0.016, memory: 29594, loss_rpn_cls: 0.0174, loss_rpn_bbox: 0.0425, s0.loss_cls: 0.2082, s0.acc: 92.8060, s0.loss_bbox: 0.1140, s1.loss_cls: 0.0851, s1.acc: 94.3231, s1.loss_bbox: 0.1078, s2.loss_cls: 0.0419, s2.acc: 94.2746, s2.loss_bbox: 0.0676, loss: 0.6846
2022-04-02 17:04:45,754 - mmdet - INFO - Epoch [26][200/1301]	lr: 2.211e-05, eta: 1 day, 5:29:52, time: 3.152, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0163, loss_rpn_bbox: 0.0377, s0.loss_cls: 0.2137, s0.acc: 92.7187, s0.loss_bbox: 0.1107, s1.loss_cls: 0.0865, s1.acc: 94.4436, s1.loss_bbox: 0.1063, s2.loss_cls: 0.0425, s2.acc: 94.4554, s2.loss_bbox: 0.0692, loss: 0.6829
2022-04-02 17:07:23,222 - mmdet - INFO - Epoch [26][250/1301]	lr: 2.211e-05, eta: 1 day, 5:27:04, time: 3.149, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0131, loss_rpn_bbox: 0.0383, s0.loss_cls: 0.1942, s0.acc: 93.3516, s0.loss_bbox: 0.1111, s1.loss_cls: 0.0759, s1.acc: 94.9778, s1.loss_bbox: 0.1080, s2.loss_cls: 0.0383, s2.acc: 94.8826, s2.loss_bbox: 0.0698, loss: 0.6486
2022-04-02 17:10:00,366 - mmdet - INFO - Epoch [26][300/1301]	lr: 2.211e-05, eta: 1 day, 5:24:10, time: 3.143, data_time: 0.016, memory: 29717, loss_rpn_cls: 0.0147, loss_rpn_bbox: 0.0392, s0.loss_cls: 0.2052, s0.acc: 92.9870, s0.loss_bbox: 0.1154, s1.loss_cls: 0.0829, s1.acc: 94.5308, s1.loss_bbox: 0.1119, s2.loss_cls: 0.0412, s2.acc: 94.6450, s2.loss_bbox: 0.0712, loss: 0.6817
2022-04-02 17:12:37,656 - mmdet - INFO - Epoch [26][350/1301]	lr: 2.211e-05, eta: 1 day, 5:21:20, time: 3.146, data_time: 0.016, memory: 29717, loss_rpn_cls: 0.0163, loss_rpn_bbox: 0.0410, s0.loss_cls: 0.2072, s0.acc: 92.8867, s0.loss_bbox: 0.1130, s1.loss_cls: 0.0832, s1.acc: 94.5121, s1.loss_bbox: 0.1056, s2.loss_cls: 0.0397, s2.acc: 94.8900, s2.loss_bbox: 0.0659, loss: 0.6718
2022-04-02 17:15:15,652 - mmdet - INFO - Epoch [26][400/1301]	lr: 2.211e-05, eta: 1 day, 5:18:45, time: 3.160, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0168, loss_rpn_bbox: 0.0371, s0.loss_cls: 0.1888, s0.acc: 93.5247, s0.loss_bbox: 0.1000, s1.loss_cls: 0.0741, s1.acc: 95.0630, s1.loss_bbox: 0.0980, s2.loss_cls: 0.0367, s2.acc: 95.1035, s2.loss_bbox: 0.0654, loss: 0.6169
2022-04-02 17:17:52,991 - mmdet - INFO - Epoch [26][450/1301]	lr: 2.211e-05, eta: 1 day, 5:15:57, time: 3.147, data_time: 0.016, memory: 29717, loss_rpn_cls: 0.0160, loss_rpn_bbox: 0.0336, s0.loss_cls: 0.1856, s0.acc: 93.5352, s0.loss_bbox: 0.0973, s1.loss_cls: 0.0718, s1.acc: 95.1292, s1.loss_bbox: 0.0965, s2.loss_cls: 0.0352, s2.acc: 95.2681, s2.loss_bbox: 0.0645, loss: 0.6006
2022-04-02 17:20:30,861 - mmdet - INFO - Epoch [26][500/1301]	lr: 2.211e-05, eta: 1 day, 5:13:20, time: 3.157, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0134, loss_rpn_bbox: 0.0383, s0.loss_cls: 0.1918, s0.acc: 93.1549, s0.loss_bbox: 0.1126, s1.loss_cls: 0.0761, s1.acc: 94.6994, s1.loss_bbox: 0.1123, s2.loss_cls: 0.0386, s2.acc: 94.6307, s2.loss_bbox: 0.0729, loss: 0.6561
2022-04-02 17:23:08,029 - mmdet - INFO - Epoch [26][550/1301]	lr: 2.211e-05, eta: 1 day, 5:10:30, time: 3.143, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0139, loss_rpn_bbox: 0.0357, s0.loss_cls: 0.1887, s0.acc: 93.5664, s0.loss_bbox: 0.0977, s1.loss_cls: 0.0753, s1.acc: 95.0541, s1.loss_bbox: 0.0991, s2.loss_cls: 0.0366, s2.acc: 95.2825, s2.loss_bbox: 0.0650, loss: 0.6120
2022-04-02 17:25:45,332 - mmdet - INFO - Epoch [26][600/1301]	lr: 2.211e-05, eta: 1 day, 5:07:43, time: 3.146, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0150, loss_rpn_bbox: 0.0369, s0.loss_cls: 0.1954, s0.acc: 93.3581, s0.loss_bbox: 0.1086, s1.loss_cls: 0.0789, s1.acc: 94.7029, s1.loss_bbox: 0.1042, s2.loss_cls: 0.0388, s2.acc: 94.9212, s2.loss_bbox: 0.0668, loss: 0.6446
2022-04-02 17:28:22,547 - mmdet - INFO - Epoch [26][650/1301]	lr: 2.211e-05, eta: 1 day, 5:04:54, time: 3.144, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0123, loss_rpn_bbox: 0.0308, s0.loss_cls: 0.1791, s0.acc: 93.6263, s0.loss_bbox: 0.0966, s1.loss_cls: 0.0699, s1.acc: 95.1834, s1.loss_bbox: 0.0975, s2.loss_cls: 0.0344, s2.acc: 95.3150, s2.loss_bbox: 0.0667, loss: 0.5872
2022-04-02 17:31:00,046 - mmdet - INFO - Epoch [26][700/1301]	lr: 2.211e-05, eta: 1 day, 5:02:12, time: 3.150, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0140, loss_rpn_bbox: 0.0383, s0.loss_cls: 0.2005, s0.acc: 93.0729, s0.loss_bbox: 0.1082, s1.loss_cls: 0.0800, s1.acc: 94.6757, s1.loss_bbox: 0.1051, s2.loss_cls: 0.0382, s2.acc: 94.9179, s2.loss_bbox: 0.0709, loss: 0.6552
2022-04-02 17:33:37,477 - mmdet - INFO - Epoch [26][750/1301]	lr: 2.211e-05, eta: 1 day, 4:59:28, time: 3.149, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0145, loss_rpn_bbox: 0.0401, s0.loss_cls: 0.1953, s0.acc: 93.1953, s0.loss_bbox: 0.1079, s1.loss_cls: 0.0794, s1.acc: 94.6583, s1.loss_bbox: 0.1049, s2.loss_cls: 0.0385, s2.acc: 94.7824, s2.loss_bbox: 0.0679, loss: 0.6484
2022-04-02 17:36:14,989 - mmdet - INFO - Epoch [26][800/1301]	lr: 2.211e-05, eta: 1 day, 4:56:46, time: 3.150, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0124, loss_rpn_bbox: 0.0370, s0.loss_cls: 0.1831, s0.acc: 93.6471, s0.loss_bbox: 0.1005, s1.loss_cls: 0.0701, s1.acc: 95.3371, s1.loss_bbox: 0.0983, s2.loss_cls: 0.0343, s2.acc: 95.4474, s2.loss_bbox: 0.0654, loss: 0.6011
2022-04-02 17:38:52,653 - mmdet - INFO - Epoch [26][850/1301]	lr: 2.211e-05, eta: 1 day, 4:54:06, time: 3.153, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0157, loss_rpn_bbox: 0.0353, s0.loss_cls: 0.1798, s0.acc: 93.6602, s0.loss_bbox: 0.0983, s1.loss_cls: 0.0694, s1.acc: 95.3781, s1.loss_bbox: 0.0972, s2.loss_cls: 0.0345, s2.acc: 95.4347, s2.loss_bbox: 0.0644, loss: 0.5945
2022-04-02 17:41:30,209 - mmdet - INFO - Epoch [26][900/1301]	lr: 2.211e-05, eta: 1 day, 4:51:25, time: 3.151, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0152, loss_rpn_bbox: 0.0347, s0.loss_cls: 0.1876, s0.acc: 93.3945, s0.loss_bbox: 0.1047, s1.loss_cls: 0.0750, s1.acc: 95.0840, s1.loss_bbox: 0.1024, s2.loss_cls: 0.0355, s2.acc: 95.3785, s2.loss_bbox: 0.0669, loss: 0.6219
2022-04-02 17:44:07,716 - mmdet - INFO - Epoch [26][950/1301]	lr: 2.211e-05, eta: 1 day, 4:48:44, time: 3.150, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0141, loss_rpn_bbox: 0.0374, s0.loss_cls: 0.1995, s0.acc: 93.1562, s0.loss_bbox: 0.1085, s1.loss_cls: 0.0777, s1.acc: 94.8967, s1.loss_bbox: 0.1063, s2.loss_cls: 0.0381, s2.acc: 94.9736, s2.loss_bbox: 0.0689, loss: 0.6503
2022-04-02 17:46:45,034 - mmdet - INFO - Epoch [26][1000/1301]	lr: 2.211e-05, eta: 1 day, 4:45:59, time: 3.146, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0190, loss_rpn_bbox: 0.0385, s0.loss_cls: 0.1882, s0.acc: 93.4792, s0.loss_bbox: 0.1047, s1.loss_cls: 0.0761, s1.acc: 94.9984, s1.loss_bbox: 0.1066, s2.loss_cls: 0.0379, s2.acc: 94.8488, s2.loss_bbox: 0.0676, loss: 0.6386
2022-04-02 17:49:22,771 - mmdet - INFO - Epoch [26][1050/1301]	lr: 2.211e-05, eta: 1 day, 4:43:21, time: 3.155, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0151, loss_rpn_bbox: 0.0376, s0.loss_cls: 0.1941, s0.acc: 93.4609, s0.loss_bbox: 0.1058, s1.loss_cls: 0.0788, s1.acc: 95.0433, s1.loss_bbox: 0.1022, s2.loss_cls: 0.0378, s2.acc: 95.1017, s2.loss_bbox: 0.0657, loss: 0.6373
2022-04-02 17:52:01,002 - mmdet - INFO - Epoch [26][1100/1301]	lr: 2.211e-05, eta: 1 day, 4:40:50, time: 3.165, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0139, loss_rpn_bbox: 0.0311, s0.loss_cls: 0.1752, s0.acc: 93.8620, s0.loss_bbox: 0.0958, s1.loss_cls: 0.0686, s1.acc: 95.3790, s1.loss_bbox: 0.0935, s2.loss_cls: 0.0336, s2.acc: 95.4632, s2.loss_bbox: 0.0602, loss: 0.5718
2022-04-02 17:54:38,737 - mmdet - INFO - Epoch [26][1150/1301]	lr: 2.211e-05, eta: 1 day, 4:38:12, time: 3.155, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0149, loss_rpn_bbox: 0.0361, s0.loss_cls: 0.1914, s0.acc: 93.4023, s0.loss_bbox: 0.1061, s1.loss_cls: 0.0750, s1.acc: 94.9320, s1.loss_bbox: 0.0997, s2.loss_cls: 0.0361, s2.acc: 95.3056, s2.loss_bbox: 0.0638, loss: 0.6231
2022-04-02 17:57:16,445 - mmdet - INFO - Epoch [26][1200/1301]	lr: 2.211e-05, eta: 1 day, 4:35:33, time: 3.154, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0131, loss_rpn_bbox: 0.0350, s0.loss_cls: 0.1872, s0.acc: 93.4857, s0.loss_bbox: 0.1046, s1.loss_cls: 0.0758, s1.acc: 94.9134, s1.loss_bbox: 0.1010, s2.loss_cls: 0.0356, s2.acc: 95.0786, s2.loss_bbox: 0.0648, loss: 0.6171
2022-04-02 17:59:54,402 - mmdet - INFO - Epoch [26][1250/1301]	lr: 2.211e-05, eta: 1 day, 4:32:58, time: 3.159, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0153, loss_rpn_bbox: 0.0383, s0.loss_cls: 0.1999, s0.acc: 93.2096, s0.loss_bbox: 0.1081, s1.loss_cls: 0.0785, s1.acc: 94.8338, s1.loss_bbox: 0.1035, s2.loss_cls: 0.0382, s2.acc: 94.9437, s2.loss_bbox: 0.0693, loss: 0.6511
2022-04-02 18:02:32,632 - mmdet - INFO - Epoch [26][1300/1301]	lr: 2.211e-05, eta: 1 day, 4:30:26, time: 3.165, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0125, loss_rpn_bbox: 0.0346, s0.loss_cls: 0.1748, s0.acc: 93.8529, s0.loss_bbox: 0.1011, s1.loss_cls: 0.0710, s1.acc: 95.2020, s1.loss_bbox: 0.0962, s2.loss_cls: 0.0341, s2.acc: 95.2120, s2.loss_bbox: 0.0640, loss: 0.5883
2022-04-02 18:02:35,867 - mmdet - INFO - Saving checkpoint at 26 epochs
2022-04-02 18:05:06,204 - mmdet - INFO - Evaluating bbox...
2022-04-02 18:05:08,853 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.392
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.530
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.420
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.009
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.092
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.457
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.509
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.509
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.509
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.027
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.216
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.576

2022-04-02 18:05:08,854 - mmdet - INFO - 
+---------------+-------+-------------+-------+------------+-------+
| category      | AP    | category    | AP    | category   | AP    |
+---------------+-------+-------------+-------+------------+-------+
| General trash | 0.213 | Paper       | 0.282 | Paper pack | 0.443 |
| Metal         | 0.448 | Glass       | 0.401 | Plastic    | 0.329 |
| Styrofoam     | 0.374 | Plastic bag | 0.513 | Battery    | 0.594 |
| Clothing      | 0.327 | None        | None  | None       | None  |
+---------------+-------+-------------+-------+------------+-------+
2022-04-02 18:05:08,889 - mmdet - INFO - Exp name: detectors_cascade_rcnn_r50_1x_coco.py
2022-04-02 18:05:08,889 - mmdet - INFO - Epoch(val) [26][982]	bbox_mAP: 0.3920, bbox_mAP_50: 0.5300, bbox_mAP_75: 0.4200, bbox_mAP_s: 0.0090, bbox_mAP_m: 0.0920, bbox_mAP_l: 0.4570, bbox_mAP_copypaste: 0.392 0.530 0.420 0.009 0.092 0.457
2022-04-02 18:07:49,958 - mmdet - INFO - Epoch [27][50/1301]	lr: 1.868e-05, eta: 1 day, 4:27:47, time: 3.221, data_time: 0.073, memory: 29717, loss_rpn_cls: 0.0096, loss_rpn_bbox: 0.0336, s0.loss_cls: 0.1654, s0.acc: 94.1927, s0.loss_bbox: 0.0942, s1.loss_cls: 0.0619, s1.acc: 95.9163, s1.loss_bbox: 0.0899, s2.loss_cls: 0.0299, s2.acc: 96.0172, s2.loss_bbox: 0.0597, loss: 0.5442
2022-04-02 18:10:27,917 - mmdet - INFO - Epoch [27][100/1301]	lr: 1.868e-05, eta: 1 day, 4:25:11, time: 3.159, data_time: 0.016, memory: 29717, loss_rpn_cls: 0.0104, loss_rpn_bbox: 0.0338, s0.loss_cls: 0.1698, s0.acc: 94.1315, s0.loss_bbox: 0.0978, s1.loss_cls: 0.0644, s1.acc: 95.7466, s1.loss_bbox: 0.0955, s2.loss_cls: 0.0321, s2.acc: 95.7782, s2.loss_bbox: 0.0627, loss: 0.5666
2022-04-02 18:13:05,809 - mmdet - INFO - Epoch [27][150/1301]	lr: 1.868e-05, eta: 1 day, 4:22:34, time: 3.158, data_time: 0.016, memory: 29717, loss_rpn_cls: 0.0124, loss_rpn_bbox: 0.0370, s0.loss_cls: 0.1693, s0.acc: 94.1771, s0.loss_bbox: 0.0936, s1.loss_cls: 0.0664, s1.acc: 95.7142, s1.loss_bbox: 0.0916, s2.loss_cls: 0.0329, s2.acc: 95.6303, s2.loss_bbox: 0.0603, loss: 0.5637
2022-04-02 18:15:43,655 - mmdet - INFO - Epoch [27][200/1301]	lr: 1.868e-05, eta: 1 day, 4:19:57, time: 3.157, data_time: 0.016, memory: 29717, loss_rpn_cls: 0.0111, loss_rpn_bbox: 0.0328, s0.loss_cls: 0.1663, s0.acc: 94.2148, s0.loss_bbox: 0.0927, s1.loss_cls: 0.0641, s1.acc: 95.8187, s1.loss_bbox: 0.0891, s2.loss_cls: 0.0308, s2.acc: 95.9473, s2.loss_bbox: 0.0590, loss: 0.5460
2022-04-02 18:18:21,395 - mmdet - INFO - Epoch [27][250/1301]	lr: 1.868e-05, eta: 1 day, 4:17:19, time: 3.155, data_time: 0.016, memory: 29717, loss_rpn_cls: 0.0092, loss_rpn_bbox: 0.0322, s0.loss_cls: 0.1574, s0.acc: 94.5378, s0.loss_bbox: 0.0931, s1.loss_cls: 0.0591, s1.acc: 96.0710, s1.loss_bbox: 0.0899, s2.loss_cls: 0.0285, s2.acc: 96.2369, s2.loss_bbox: 0.0600, loss: 0.5295
2022-04-02 18:20:58,979 - mmdet - INFO - Epoch [27][300/1301]	lr: 1.868e-05, eta: 1 day, 4:14:39, time: 3.152, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0142, loss_rpn_bbox: 0.0365, s0.loss_cls: 0.1666, s0.acc: 94.1406, s0.loss_bbox: 0.0940, s1.loss_cls: 0.0648, s1.acc: 95.7105, s1.loss_bbox: 0.0931, s2.loss_cls: 0.0319, s2.acc: 95.8649, s2.loss_bbox: 0.0612, loss: 0.5623
2022-04-02 18:23:36,650 - mmdet - INFO - Epoch [27][350/1301]	lr: 1.868e-05, eta: 1 day, 4:12:00, time: 3.153, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0104, loss_rpn_bbox: 0.0346, s0.loss_cls: 0.1583, s0.acc: 94.3503, s0.loss_bbox: 0.0876, s1.loss_cls: 0.0609, s1.acc: 95.8889, s1.loss_bbox: 0.0879, s2.loss_cls: 0.0297, s2.acc: 95.9765, s2.loss_bbox: 0.0559, loss: 0.5253
2022-04-02 18:26:14,418 - mmdet - INFO - Epoch [27][400/1301]	lr: 1.868e-05, eta: 1 day, 4:09:22, time: 3.155, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0123, loss_rpn_bbox: 0.0302, s0.loss_cls: 0.1502, s0.acc: 94.8060, s0.loss_bbox: 0.0831, s1.loss_cls: 0.0554, s1.acc: 96.2668, s1.loss_bbox: 0.0831, s2.loss_cls: 0.0269, s2.acc: 96.5063, s2.loss_bbox: 0.0561, loss: 0.4973
2022-04-02 18:28:52,232 - mmdet - INFO - Epoch [27][450/1301]	lr: 1.868e-05, eta: 1 day, 4:06:45, time: 3.156, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0116, loss_rpn_bbox: 0.0330, s0.loss_cls: 0.1699, s0.acc: 94.0091, s0.loss_bbox: 0.0930, s1.loss_cls: 0.0662, s1.acc: 95.5316, s1.loss_bbox: 0.0938, s2.loss_cls: 0.0316, s2.acc: 95.7425, s2.loss_bbox: 0.0620, loss: 0.5611
2022-04-02 18:31:29,940 - mmdet - INFO - Epoch [27][500/1301]	lr: 1.868e-05, eta: 1 day, 4:04:06, time: 3.154, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0127, loss_rpn_bbox: 0.0350, s0.loss_cls: 0.1640, s0.acc: 94.1992, s0.loss_bbox: 0.0962, s1.loss_cls: 0.0621, s1.acc: 95.6938, s1.loss_bbox: 0.0937, s2.loss_cls: 0.0305, s2.acc: 95.8264, s2.loss_bbox: 0.0632, loss: 0.5574
2022-04-02 18:34:07,455 - mmdet - INFO - Epoch [27][550/1301]	lr: 1.868e-05, eta: 1 day, 4:01:26, time: 3.150, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0105, loss_rpn_bbox: 0.0330, s0.loss_cls: 0.1604, s0.acc: 94.4258, s0.loss_bbox: 0.0861, s1.loss_cls: 0.0596, s1.acc: 96.1072, s1.loss_bbox: 0.0864, s2.loss_cls: 0.0298, s2.acc: 96.0214, s2.loss_bbox: 0.0588, loss: 0.5246
2022-04-02 18:36:44,678 - mmdet - INFO - Epoch [27][600/1301]	lr: 1.868e-05, eta: 1 day, 3:58:43, time: 3.144, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0112, loss_rpn_bbox: 0.0325, s0.loss_cls: 0.1539, s0.acc: 94.5690, s0.loss_bbox: 0.0859, s1.loss_cls: 0.0579, s1.acc: 96.1190, s1.loss_bbox: 0.0864, s2.loss_cls: 0.0285, s2.acc: 96.2501, s2.loss_bbox: 0.0579, loss: 0.5142
2022-04-02 18:39:22,305 - mmdet - INFO - Epoch [27][650/1301]	lr: 1.868e-05, eta: 1 day, 3:56:03, time: 3.153, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0117, loss_rpn_bbox: 0.0307, s0.loss_cls: 0.1588, s0.acc: 94.5755, s0.loss_bbox: 0.0869, s1.loss_cls: 0.0562, s1.acc: 96.3048, s1.loss_bbox: 0.0855, s2.loss_cls: 0.0274, s2.acc: 96.4348, s2.loss_bbox: 0.0590, loss: 0.5162
2022-04-02 18:42:00,269 - mmdet - INFO - Epoch [27][700/1301]	lr: 1.868e-05, eta: 1 day, 3:53:28, time: 3.159, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0098, loss_rpn_bbox: 0.0342, s0.loss_cls: 0.1613, s0.acc: 94.2786, s0.loss_bbox: 0.0914, s1.loss_cls: 0.0607, s1.acc: 95.9589, s1.loss_bbox: 0.0908, s2.loss_cls: 0.0292, s2.acc: 96.1230, s2.loss_bbox: 0.0629, loss: 0.5403
2022-04-02 18:44:37,309 - mmdet - INFO - Epoch [27][750/1301]	lr: 1.868e-05, eta: 1 day, 3:50:43, time: 3.141, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0098, loss_rpn_bbox: 0.0336, s0.loss_cls: 0.1601, s0.acc: 94.2812, s0.loss_bbox: 0.0938, s1.loss_cls: 0.0613, s1.acc: 95.8221, s1.loss_bbox: 0.0915, s2.loss_cls: 0.0292, s2.acc: 95.9369, s2.loss_bbox: 0.0605, loss: 0.5399
2022-04-02 18:47:14,705 - mmdet - INFO - Epoch [27][800/1301]	lr: 1.868e-05, eta: 1 day, 3:48:02, time: 3.148, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0117, loss_rpn_bbox: 0.0318, s0.loss_cls: 0.1541, s0.acc: 94.5495, s0.loss_bbox: 0.0871, s1.loss_cls: 0.0571, s1.acc: 96.1074, s1.loss_bbox: 0.0854, s2.loss_cls: 0.0268, s2.acc: 96.2749, s2.loss_bbox: 0.0563, loss: 0.5102
2022-04-02 18:49:52,685 - mmdet - INFO - Epoch [27][850/1301]	lr: 1.868e-05, eta: 1 day, 3:45:26, time: 3.160, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0106, loss_rpn_bbox: 0.0322, s0.loss_cls: 0.1583, s0.acc: 94.3190, s0.loss_bbox: 0.0876, s1.loss_cls: 0.0597, s1.acc: 95.8279, s1.loss_bbox: 0.0897, s2.loss_cls: 0.0287, s2.acc: 96.1467, s2.loss_bbox: 0.0602, loss: 0.5269
2022-04-02 18:52:29,738 - mmdet - INFO - Epoch [27][900/1301]	lr: 1.868e-05, eta: 1 day, 3:42:42, time: 3.141, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0106, loss_rpn_bbox: 0.0279, s0.loss_cls: 0.1474, s0.acc: 94.7812, s0.loss_bbox: 0.0850, s1.loss_cls: 0.0541, s1.acc: 96.3916, s1.loss_bbox: 0.0814, s2.loss_cls: 0.0264, s2.acc: 96.6270, s2.loss_bbox: 0.0536, loss: 0.4863
2022-04-02 18:55:07,331 - mmdet - INFO - Epoch [27][950/1301]	lr: 1.868e-05, eta: 1 day, 3:40:03, time: 3.152, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0116, loss_rpn_bbox: 0.0343, s0.loss_cls: 0.1686, s0.acc: 94.2786, s0.loss_bbox: 0.0933, s1.loss_cls: 0.0645, s1.acc: 95.7312, s1.loss_bbox: 0.0907, s2.loss_cls: 0.0306, s2.acc: 95.9756, s2.loss_bbox: 0.0608, loss: 0.5544
2022-04-02 18:57:45,123 - mmdet - INFO - Epoch [27][1000/1301]	lr: 1.868e-05, eta: 1 day, 3:37:26, time: 3.156, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0102, loss_rpn_bbox: 0.0329, s0.loss_cls: 0.1556, s0.acc: 94.5430, s0.loss_bbox: 0.0906, s1.loss_cls: 0.0595, s1.acc: 95.9421, s1.loss_bbox: 0.0900, s2.loss_cls: 0.0293, s2.acc: 95.9572, s2.loss_bbox: 0.0612, loss: 0.5293
2022-04-02 19:00:22,318 - mmdet - INFO - Epoch [27][1050/1301]	lr: 1.868e-05, eta: 1 day, 3:34:43, time: 3.144, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0112, loss_rpn_bbox: 0.0336, s0.loss_cls: 0.1626, s0.acc: 94.2083, s0.loss_bbox: 0.0910, s1.loss_cls: 0.0639, s1.acc: 95.6670, s1.loss_bbox: 0.0907, s2.loss_cls: 0.0311, s2.acc: 95.7957, s2.loss_bbox: 0.0608, loss: 0.5449
2022-04-02 19:02:59,942 - mmdet - INFO - Epoch [27][1100/1301]	lr: 1.868e-05, eta: 1 day, 3:32:05, time: 3.152, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0109, loss_rpn_bbox: 0.0285, s0.loss_cls: 0.1488, s0.acc: 94.8034, s0.loss_bbox: 0.0878, s1.loss_cls: 0.0541, s1.acc: 96.3017, s1.loss_bbox: 0.0859, s2.loss_cls: 0.0271, s2.acc: 96.3326, s2.loss_bbox: 0.0576, loss: 0.5008
2022-04-02 19:05:37,905 - mmdet - INFO - Epoch [27][1150/1301]	lr: 1.868e-05, eta: 1 day, 3:29:29, time: 3.159, data_time: 0.019, memory: 29717, loss_rpn_cls: 0.0093, loss_rpn_bbox: 0.0311, s0.loss_cls: 0.1586, s0.acc: 94.3620, s0.loss_bbox: 0.0911, s1.loss_cls: 0.0574, s1.acc: 96.1420, s1.loss_bbox: 0.0859, s2.loss_cls: 0.0274, s2.acc: 96.3725, s2.loss_bbox: 0.0572, loss: 0.5180
2022-04-02 19:08:15,669 - mmdet - INFO - Epoch [27][1200/1301]	lr: 1.868e-05, eta: 1 day, 3:26:51, time: 3.155, data_time: 0.019, memory: 29717, loss_rpn_cls: 0.0088, loss_rpn_bbox: 0.0317, s0.loss_cls: 0.1610, s0.acc: 94.2083, s0.loss_bbox: 0.0933, s1.loss_cls: 0.0604, s1.acc: 95.8977, s1.loss_bbox: 0.0902, s2.loss_cls: 0.0294, s2.acc: 96.0392, s2.loss_bbox: 0.0594, loss: 0.5341
2022-04-02 19:10:52,979 - mmdet - INFO - Epoch [27][1250/1301]	lr: 1.868e-05, eta: 1 day, 3:24:10, time: 3.146, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0105, loss_rpn_bbox: 0.0327, s0.loss_cls: 0.1559, s0.acc: 94.4779, s0.loss_bbox: 0.0882, s1.loss_cls: 0.0571, s1.acc: 96.1148, s1.loss_bbox: 0.0843, s2.loss_cls: 0.0271, s2.acc: 96.3673, s2.loss_bbox: 0.0569, loss: 0.5127
2022-04-02 19:13:30,479 - mmdet - INFO - Epoch [27][1300/1301]	lr: 1.868e-05, eta: 1 day, 3:21:30, time: 3.150, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0102, loss_rpn_bbox: 0.0289, s0.loss_cls: 0.1461, s0.acc: 94.8542, s0.loss_bbox: 0.0843, s1.loss_cls: 0.0533, s1.acc: 96.3299, s1.loss_bbox: 0.0806, s2.loss_cls: 0.0249, s2.acc: 96.6365, s2.loss_bbox: 0.0557, loss: 0.4841
2022-04-02 19:13:33,698 - mmdet - INFO - Saving checkpoint at 27 epochs
2022-04-02 19:16:02,856 - mmdet - INFO - Evaluating bbox...
2022-04-02 19:16:05,654 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.393
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.526
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.414
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.008
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.105
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.458
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.504
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.504
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.504
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.010
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.192
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.574

2022-04-02 19:16:05,655 - mmdet - INFO - 
+---------------+-------+-------------+-------+------------+-------+
| category      | AP    | category    | AP    | category   | AP    |
+---------------+-------+-------------+-------+------------+-------+
| General trash | 0.208 | Paper       | 0.281 | Paper pack | 0.442 |
| Metal         | 0.458 | Glass       | 0.404 | Plastic    | 0.315 |
| Styrofoam     | 0.349 | Plastic bag | 0.515 | Battery    | 0.595 |
| Clothing      | 0.364 | None        | None  | None       | None  |
+---------------+-------+-------------+-------+------------+-------+
2022-04-02 19:16:05,691 - mmdet - INFO - Exp name: detectors_cascade_rcnn_r50_1x_coco.py
2022-04-02 19:16:05,691 - mmdet - INFO - Epoch(val) [27][982]	bbox_mAP: 0.3930, bbox_mAP_50: 0.5260, bbox_mAP_75: 0.4140, bbox_mAP_s: 0.0080, bbox_mAP_m: 0.1050, bbox_mAP_l: 0.4580, bbox_mAP_copypaste: 0.393 0.526 0.414 0.008 0.105 0.458
2022-04-02 19:18:45,805 - mmdet - INFO - Epoch [28][50/1301]	lr: 1.550e-05, eta: 1 day, 3:18:43, time: 3.202, data_time: 0.074, memory: 29717, loss_rpn_cls: 0.0081, loss_rpn_bbox: 0.0285, s0.loss_cls: 0.1337, s0.acc: 95.0859, s0.loss_bbox: 0.0774, s1.loss_cls: 0.0477, s1.acc: 96.6062, s1.loss_bbox: 0.0787, s2.loss_cls: 0.0227, s2.acc: 96.8773, s2.loss_bbox: 0.0550, loss: 0.4519
2022-04-02 19:21:23,665 - mmdet - INFO - Epoch [28][100/1301]	lr: 1.550e-05, eta: 1 day, 3:16:07, time: 3.157, data_time: 0.016, memory: 29717, loss_rpn_cls: 0.0084, loss_rpn_bbox: 0.0306, s0.loss_cls: 0.1470, s0.acc: 94.7982, s0.loss_bbox: 0.0854, s1.loss_cls: 0.0514, s1.acc: 96.4202, s1.loss_bbox: 0.0828, s2.loss_cls: 0.0241, s2.acc: 96.9190, s2.loss_bbox: 0.0578, loss: 0.4875
2022-04-02 19:24:01,134 - mmdet - INFO - Epoch [28][150/1301]	lr: 1.550e-05, eta: 1 day, 3:13:27, time: 3.149, data_time: 0.016, memory: 29717, loss_rpn_cls: 0.0101, loss_rpn_bbox: 0.0325, s0.loss_cls: 0.1380, s0.acc: 94.9648, s0.loss_bbox: 0.0789, s1.loss_cls: 0.0508, s1.acc: 96.4091, s1.loss_bbox: 0.0825, s2.loss_cls: 0.0249, s2.acc: 96.4923, s2.loss_bbox: 0.0559, loss: 0.4737
2022-04-02 19:26:38,699 - mmdet - INFO - Epoch [28][200/1301]	lr: 1.550e-05, eta: 1 day, 3:10:48, time: 3.151, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0101, loss_rpn_bbox: 0.0296, s0.loss_cls: 0.1446, s0.acc: 94.9479, s0.loss_bbox: 0.0814, s1.loss_cls: 0.0527, s1.acc: 96.4627, s1.loss_bbox: 0.0786, s2.loss_cls: 0.0247, s2.acc: 96.7437, s2.loss_bbox: 0.0524, loss: 0.4741
2022-04-02 19:29:16,339 - mmdet - INFO - Epoch [28][250/1301]	lr: 1.550e-05, eta: 1 day, 3:08:10, time: 3.153, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0094, loss_rpn_bbox: 0.0279, s0.loss_cls: 0.1361, s0.acc: 95.1628, s0.loss_bbox: 0.0786, s1.loss_cls: 0.0486, s1.acc: 96.7187, s1.loss_bbox: 0.0760, s2.loss_cls: 0.0229, s2.acc: 96.8923, s2.loss_bbox: 0.0528, loss: 0.4523
2022-04-02 19:31:53,716 - mmdet - INFO - Epoch [28][300/1301]	lr: 1.550e-05, eta: 1 day, 3:05:30, time: 3.148, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0092, loss_rpn_bbox: 0.0301, s0.loss_cls: 0.1440, s0.acc: 94.8255, s0.loss_bbox: 0.0829, s1.loss_cls: 0.0531, s1.acc: 96.3727, s1.loss_bbox: 0.0816, s2.loss_cls: 0.0259, s2.acc: 96.2529, s2.loss_bbox: 0.0560, loss: 0.4828
2022-04-02 19:34:31,209 - mmdet - INFO - Epoch [28][350/1301]	lr: 1.550e-05, eta: 1 day, 3:02:50, time: 3.150, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0086, loss_rpn_bbox: 0.0306, s0.loss_cls: 0.1496, s0.acc: 94.7578, s0.loss_bbox: 0.0820, s1.loss_cls: 0.0559, s1.acc: 96.2905, s1.loss_bbox: 0.0790, s2.loss_cls: 0.0274, s2.acc: 96.3493, s2.loss_bbox: 0.0533, loss: 0.4863
2022-04-02 19:37:08,292 - mmdet - INFO - Epoch [28][400/1301]	lr: 1.550e-05, eta: 1 day, 3:00:08, time: 3.142, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0103, loss_rpn_bbox: 0.0257, s0.loss_cls: 0.1327, s0.acc: 95.3516, s0.loss_bbox: 0.0712, s1.loss_cls: 0.0462, s1.acc: 96.8478, s1.loss_bbox: 0.0709, s2.loss_cls: 0.0222, s2.acc: 97.0815, s2.loss_bbox: 0.0499, loss: 0.4290
2022-04-02 19:39:45,835 - mmdet - INFO - Epoch [28][450/1301]	lr: 1.550e-05, eta: 1 day, 2:57:29, time: 3.151, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0099, loss_rpn_bbox: 0.0268, s0.loss_cls: 0.1405, s0.acc: 95.0677, s0.loss_bbox: 0.0778, s1.loss_cls: 0.0525, s1.acc: 96.4690, s1.loss_bbox: 0.0793, s2.loss_cls: 0.0257, s2.acc: 96.5985, s2.loss_bbox: 0.0553, loss: 0.4679
2022-04-02 19:42:23,664 - mmdet - INFO - Epoch [28][500/1301]	lr: 1.550e-05, eta: 1 day, 2:54:53, time: 3.157, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0091, loss_rpn_bbox: 0.0291, s0.loss_cls: 0.1488, s0.acc: 94.7005, s0.loss_bbox: 0.0879, s1.loss_cls: 0.0544, s1.acc: 96.3953, s1.loss_bbox: 0.0872, s2.loss_cls: 0.0261, s2.acc: 96.4175, s2.loss_bbox: 0.0586, loss: 0.5012
2022-04-02 19:45:01,234 - mmdet - INFO - Epoch [28][550/1301]	lr: 1.550e-05, eta: 1 day, 2:52:14, time: 3.151, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0076, loss_rpn_bbox: 0.0258, s0.loss_cls: 0.1288, s0.acc: 95.4818, s0.loss_bbox: 0.0722, s1.loss_cls: 0.0456, s1.acc: 96.9603, s1.loss_bbox: 0.0729, s2.loss_cls: 0.0220, s2.acc: 96.9908, s2.loss_bbox: 0.0519, loss: 0.4267
2022-04-02 19:47:38,998 - mmdet - INFO - Epoch [28][600/1301]	lr: 1.550e-05, eta: 1 day, 2:49:37, time: 3.155, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0083, loss_rpn_bbox: 0.0272, s0.loss_cls: 0.1411, s0.acc: 95.0911, s0.loss_bbox: 0.0796, s1.loss_cls: 0.0525, s1.acc: 96.5270, s1.loss_bbox: 0.0743, s2.loss_cls: 0.0245, s2.acc: 96.7209, s2.loss_bbox: 0.0488, loss: 0.4563
2022-04-02 19:50:16,470 - mmdet - INFO - Epoch [28][650/1301]	lr: 1.550e-05, eta: 1 day, 2:46:58, time: 3.149, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0079, loss_rpn_bbox: 0.0265, s0.loss_cls: 0.1384, s0.acc: 95.2526, s0.loss_bbox: 0.0763, s1.loss_cls: 0.0490, s1.acc: 96.7321, s1.loss_bbox: 0.0736, s2.loss_cls: 0.0234, s2.acc: 96.9068, s2.loss_bbox: 0.0533, loss: 0.4484
2022-04-02 19:52:54,062 - mmdet - INFO - Epoch [28][700/1301]	lr: 1.550e-05, eta: 1 day, 2:44:19, time: 3.152, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0109, loss_rpn_bbox: 0.0292, s0.loss_cls: 0.1325, s0.acc: 95.2969, s0.loss_bbox: 0.0735, s1.loss_cls: 0.0489, s1.acc: 96.6977, s1.loss_bbox: 0.0738, s2.loss_cls: 0.0231, s2.acc: 96.9415, s2.loss_bbox: 0.0512, loss: 0.4431
2022-04-02 19:55:31,956 - mmdet - INFO - Epoch [28][750/1301]	lr: 1.550e-05, eta: 1 day, 2:41:43, time: 3.158, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0099, loss_rpn_bbox: 0.0309, s0.loss_cls: 0.1469, s0.acc: 94.8581, s0.loss_bbox: 0.0856, s1.loss_cls: 0.0540, s1.acc: 96.3714, s1.loss_bbox: 0.0840, s2.loss_cls: 0.0267, s2.acc: 96.3980, s2.loss_bbox: 0.0580, loss: 0.4960
2022-04-02 19:58:09,519 - mmdet - INFO - Epoch [28][800/1301]	lr: 1.550e-05, eta: 1 day, 2:39:04, time: 3.151, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0088, loss_rpn_bbox: 0.0295, s0.loss_cls: 0.1385, s0.acc: 95.2070, s0.loss_bbox: 0.0776, s1.loss_cls: 0.0482, s1.acc: 96.8388, s1.loss_bbox: 0.0754, s2.loss_cls: 0.0231, s2.acc: 96.8940, s2.loss_bbox: 0.0521, loss: 0.4531
2022-04-02 20:00:47,031 - mmdet - INFO - Epoch [28][850/1301]	lr: 1.550e-05, eta: 1 day, 2:36:25, time: 3.150, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0105, loss_rpn_bbox: 0.0305, s0.loss_cls: 0.1498, s0.acc: 94.8060, s0.loss_bbox: 0.0832, s1.loss_cls: 0.0562, s1.acc: 96.2767, s1.loss_bbox: 0.0813, s2.loss_cls: 0.0259, s2.acc: 96.6704, s2.loss_bbox: 0.0544, loss: 0.4918
2022-04-02 20:03:24,695 - mmdet - INFO - Epoch [28][900/1301]	lr: 1.550e-05, eta: 1 day, 2:33:47, time: 3.153, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0089, loss_rpn_bbox: 0.0286, s0.loss_cls: 0.1422, s0.acc: 94.9687, s0.loss_bbox: 0.0828, s1.loss_cls: 0.0512, s1.acc: 96.4707, s1.loss_bbox: 0.0794, s2.loss_cls: 0.0247, s2.acc: 96.5683, s2.loss_bbox: 0.0541, loss: 0.4720
2022-04-02 20:06:02,328 - mmdet - INFO - Epoch [28][950/1301]	lr: 1.550e-05, eta: 1 day, 2:31:09, time: 3.153, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0079, loss_rpn_bbox: 0.0314, s0.loss_cls: 0.1452, s0.acc: 94.9388, s0.loss_bbox: 0.0799, s1.loss_cls: 0.0543, s1.acc: 96.4352, s1.loss_bbox: 0.0776, s2.loss_cls: 0.0264, s2.acc: 96.5641, s2.loss_bbox: 0.0534, loss: 0.4761
2022-04-02 20:08:39,627 - mmdet - INFO - Epoch [28][1000/1301]	lr: 1.550e-05, eta: 1 day, 2:28:29, time: 3.146, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0109, loss_rpn_bbox: 0.0292, s0.loss_cls: 0.1418, s0.acc: 95.0768, s0.loss_bbox: 0.0801, s1.loss_cls: 0.0545, s1.acc: 96.4586, s1.loss_bbox: 0.0809, s2.loss_cls: 0.0263, s2.acc: 96.6002, s2.loss_bbox: 0.0537, loss: 0.4775
2022-04-02 20:11:16,895 - mmdet - INFO - Epoch [28][1050/1301]	lr: 1.550e-05, eta: 1 day, 2:25:49, time: 3.145, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0083, loss_rpn_bbox: 0.0282, s0.loss_cls: 0.1334, s0.acc: 95.4518, s0.loss_bbox: 0.0753, s1.loss_cls: 0.0493, s1.acc: 96.8278, s1.loss_bbox: 0.0751, s2.loss_cls: 0.0238, s2.acc: 96.8460, s2.loss_bbox: 0.0526, loss: 0.4462
2022-04-02 20:13:54,419 - mmdet - INFO - Epoch [28][1100/1301]	lr: 1.550e-05, eta: 1 day, 2:23:10, time: 3.150, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0089, loss_rpn_bbox: 0.0245, s0.loss_cls: 0.1226, s0.acc: 95.5885, s0.loss_bbox: 0.0727, s1.loss_cls: 0.0432, s1.acc: 97.0204, s1.loss_bbox: 0.0731, s2.loss_cls: 0.0207, s2.acc: 97.1666, s2.loss_bbox: 0.0506, loss: 0.4162
2022-04-02 20:16:31,672 - mmdet - INFO - Epoch [28][1150/1301]	lr: 1.550e-05, eta: 1 day, 2:20:30, time: 3.145, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0076, loss_rpn_bbox: 0.0279, s0.loss_cls: 0.1321, s0.acc: 95.1341, s0.loss_bbox: 0.0798, s1.loss_cls: 0.0458, s1.acc: 96.7977, s1.loss_bbox: 0.0773, s2.loss_cls: 0.0227, s2.acc: 96.7484, s2.loss_bbox: 0.0523, loss: 0.4456
2022-04-02 20:19:09,224 - mmdet - INFO - Epoch [28][1200/1301]	lr: 1.550e-05, eta: 1 day, 2:17:52, time: 3.151, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0090, loss_rpn_bbox: 0.0295, s0.loss_cls: 0.1427, s0.acc: 94.8971, s0.loss_bbox: 0.0817, s1.loss_cls: 0.0534, s1.acc: 96.3321, s1.loss_bbox: 0.0796, s2.loss_cls: 0.0257, s2.acc: 96.5235, s2.loss_bbox: 0.0529, loss: 0.4745
2022-04-02 20:21:47,010 - mmdet - INFO - Epoch [28][1250/1301]	lr: 1.550e-05, eta: 1 day, 2:15:15, time: 3.156, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0100, loss_rpn_bbox: 0.0302, s0.loss_cls: 0.1401, s0.acc: 95.1432, s0.loss_bbox: 0.0788, s1.loss_cls: 0.0477, s1.acc: 96.7847, s1.loss_bbox: 0.0756, s2.loss_cls: 0.0227, s2.acc: 96.9661, s2.loss_bbox: 0.0524, loss: 0.4575
2022-04-02 20:24:24,134 - mmdet - INFO - Epoch [28][1300/1301]	lr: 1.550e-05, eta: 1 day, 2:12:34, time: 3.142, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0073, loss_rpn_bbox: 0.0254, s0.loss_cls: 0.1291, s0.acc: 95.3542, s0.loss_bbox: 0.0737, s1.loss_cls: 0.0469, s1.acc: 96.8899, s1.loss_bbox: 0.0730, s2.loss_cls: 0.0217, s2.acc: 97.0603, s2.loss_bbox: 0.0504, loss: 0.4275
2022-04-02 20:24:27,393 - mmdet - INFO - Saving checkpoint at 28 epochs
2022-04-02 20:26:57,100 - mmdet - INFO - Evaluating bbox...
2022-04-02 20:26:59,590 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.392
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.527
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.413
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.008
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.102
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.457
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.491
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.491
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.491
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.017
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.185
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.562

2022-04-02 20:26:59,591 - mmdet - INFO - 
+---------------+-------+-------------+-------+------------+-------+
| category      | AP    | category    | AP    | category   | AP    |
+---------------+-------+-------------+-------+------------+-------+
| General trash | 0.213 | Paper       | 0.280 | Paper pack | 0.425 |
| Metal         | 0.437 | Glass       | 0.394 | Plastic    | 0.324 |
| Styrofoam     | 0.343 | Plastic bag | 0.511 | Battery    | 0.623 |
| Clothing      | 0.374 | None        | None  | None       | None  |
+---------------+-------+-------------+-------+------------+-------+
2022-04-02 20:26:59,628 - mmdet - INFO - Exp name: detectors_cascade_rcnn_r50_1x_coco.py
2022-04-02 20:26:59,629 - mmdet - INFO - Epoch(val) [28][982]	bbox_mAP: 0.3920, bbox_mAP_50: 0.5270, bbox_mAP_75: 0.4130, bbox_mAP_s: 0.0080, bbox_mAP_m: 0.1020, bbox_mAP_l: 0.4570, bbox_mAP_copypaste: 0.392 0.527 0.413 0.008 0.102 0.457
2022-04-02 20:29:39,924 - mmdet - INFO - Epoch [29][50/1301]	lr: 1.258e-05, eta: 1 day, 2:09:50, time: 3.205, data_time: 0.073, memory: 29717, loss_rpn_cls: 0.0067, loss_rpn_bbox: 0.0281, s0.loss_cls: 0.1326, s0.acc: 95.1784, s0.loss_bbox: 0.0780, s1.loss_cls: 0.0472, s1.acc: 96.6792, s1.loss_bbox: 0.0791, s2.loss_cls: 0.0233, s2.acc: 96.9373, s2.loss_bbox: 0.0550, loss: 0.4499
2022-04-02 20:32:17,456 - mmdet - INFO - Epoch [29][100/1301]	lr: 1.258e-05, eta: 1 day, 2:07:11, time: 3.151, data_time: 0.016, memory: 29717, loss_rpn_cls: 0.0082, loss_rpn_bbox: 0.0265, s0.loss_cls: 0.1246, s0.acc: 95.4245, s0.loss_bbox: 0.0742, s1.loss_cls: 0.0446, s1.acc: 96.9327, s1.loss_bbox: 0.0732, s2.loss_cls: 0.0213, s2.acc: 97.0691, s2.loss_bbox: 0.0508, loss: 0.4235
2022-04-02 20:34:54,793 - mmdet - INFO - Epoch [29][150/1301]	lr: 1.258e-05, eta: 1 day, 2:04:32, time: 3.147, data_time: 0.016, memory: 29717, loss_rpn_cls: 0.0076, loss_rpn_bbox: 0.0314, s0.loss_cls: 0.1345, s0.acc: 95.1641, s0.loss_bbox: 0.0743, s1.loss_cls: 0.0499, s1.acc: 96.7236, s1.loss_bbox: 0.0747, s2.loss_cls: 0.0235, s2.acc: 96.9450, s2.loss_bbox: 0.0520, loss: 0.4478
2022-04-02 20:37:32,456 - mmdet - INFO - Epoch [29][200/1301]	lr: 1.258e-05, eta: 1 day, 2:01:54, time: 3.153, data_time: 0.016, memory: 29717, loss_rpn_cls: 0.0094, loss_rpn_bbox: 0.0266, s0.loss_cls: 0.1289, s0.acc: 95.4700, s0.loss_bbox: 0.0713, s1.loss_cls: 0.0461, s1.acc: 96.9464, s1.loss_bbox: 0.0702, s2.loss_cls: 0.0215, s2.acc: 97.1011, s2.loss_bbox: 0.0494, loss: 0.4235
2022-04-02 20:40:10,374 - mmdet - INFO - Epoch [29][250/1301]	lr: 1.258e-05, eta: 1 day, 1:59:18, time: 3.158, data_time: 0.016, memory: 29717, loss_rpn_cls: 0.0076, loss_rpn_bbox: 0.0268, s0.loss_cls: 0.1267, s0.acc: 95.4115, s0.loss_bbox: 0.0771, s1.loss_cls: 0.0455, s1.acc: 96.8295, s1.loss_bbox: 0.0728, s2.loss_cls: 0.0214, s2.acc: 97.0601, s2.loss_bbox: 0.0507, loss: 0.4286
2022-04-02 20:42:48,365 - mmdet - INFO - Epoch [29][300/1301]	lr: 1.258e-05, eta: 1 day, 1:56:42, time: 3.160, data_time: 0.016, memory: 29717, loss_rpn_cls: 0.0094, loss_rpn_bbox: 0.0282, s0.loss_cls: 0.1302, s0.acc: 95.4258, s0.loss_bbox: 0.0771, s1.loss_cls: 0.0476, s1.acc: 96.7324, s1.loss_bbox: 0.0731, s2.loss_cls: 0.0227, s2.acc: 96.8930, s2.loss_bbox: 0.0508, loss: 0.4392
2022-04-02 20:45:26,207 - mmdet - INFO - Epoch [29][350/1301]	lr: 1.258e-05, eta: 1 day, 1:54:05, time: 3.157, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0064, loss_rpn_bbox: 0.0269, s0.loss_cls: 0.1241, s0.acc: 95.5872, s0.loss_bbox: 0.0692, s1.loss_cls: 0.0433, s1.acc: 97.0217, s1.loss_bbox: 0.0702, s2.loss_cls: 0.0206, s2.acc: 97.2082, s2.loss_bbox: 0.0466, loss: 0.4073
2022-04-02 20:48:03,677 - mmdet - INFO - Epoch [29][400/1301]	lr: 1.258e-05, eta: 1 day, 1:51:27, time: 3.149, data_time: 0.016, memory: 29717, loss_rpn_cls: 0.0072, loss_rpn_bbox: 0.0240, s0.loss_cls: 0.1230, s0.acc: 95.6289, s0.loss_bbox: 0.0685, s1.loss_cls: 0.0407, s1.acc: 97.3110, s1.loss_bbox: 0.0680, s2.loss_cls: 0.0192, s2.acc: 97.4013, s2.loss_bbox: 0.0476, loss: 0.3983
2022-04-02 20:50:41,031 - mmdet - INFO - Epoch [29][450/1301]	lr: 1.258e-05, eta: 1 day, 1:48:47, time: 3.147, data_time: 0.016, memory: 29717, loss_rpn_cls: 0.0093, loss_rpn_bbox: 0.0245, s0.loss_cls: 0.1249, s0.acc: 95.4232, s0.loss_bbox: 0.0713, s1.loss_cls: 0.0460, s1.acc: 96.7689, s1.loss_bbox: 0.0737, s2.loss_cls: 0.0220, s2.acc: 96.9995, s2.loss_bbox: 0.0517, loss: 0.4234
2022-04-02 20:53:18,846 - mmdet - INFO - Epoch [29][500/1301]	lr: 1.258e-05, eta: 1 day, 1:46:10, time: 3.156, data_time: 0.016, memory: 29717, loss_rpn_cls: 0.0083, loss_rpn_bbox: 0.0288, s0.loss_cls: 0.1297, s0.acc: 95.3151, s0.loss_bbox: 0.0791, s1.loss_cls: 0.0451, s1.acc: 96.8105, s1.loss_bbox: 0.0776, s2.loss_cls: 0.0228, s2.acc: 96.8856, s2.loss_bbox: 0.0516, loss: 0.4429
2022-04-02 20:55:56,027 - mmdet - INFO - Epoch [29][550/1301]	lr: 1.258e-05, eta: 1 day, 1:43:30, time: 3.144, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0088, loss_rpn_bbox: 0.0238, s0.loss_cls: 0.1170, s0.acc: 95.8477, s0.loss_bbox: 0.0636, s1.loss_cls: 0.0395, s1.acc: 97.3101, s1.loss_bbox: 0.0653, s2.loss_cls: 0.0183, s2.acc: 97.5306, s2.loss_bbox: 0.0461, loss: 0.3823
2022-04-02 20:58:33,514 - mmdet - INFO - Epoch [29][600/1301]	lr: 1.258e-05, eta: 1 day, 1:40:52, time: 3.150, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0078, loss_rpn_bbox: 0.0265, s0.loss_cls: 0.1259, s0.acc: 95.4766, s0.loss_bbox: 0.0734, s1.loss_cls: 0.0454, s1.acc: 96.8790, s1.loss_bbox: 0.0700, s2.loss_cls: 0.0217, s2.acc: 97.0549, s2.loss_bbox: 0.0476, loss: 0.4182
2022-04-02 21:01:11,165 - mmdet - INFO - Epoch [29][650/1301]	lr: 1.258e-05, eta: 1 day, 1:38:14, time: 3.153, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0062, loss_rpn_bbox: 0.0249, s0.loss_cls: 0.1237, s0.acc: 95.6003, s0.loss_bbox: 0.0671, s1.loss_cls: 0.0435, s1.acc: 96.9820, s1.loss_bbox: 0.0657, s2.loss_cls: 0.0205, s2.acc: 97.2304, s2.loss_bbox: 0.0465, loss: 0.3982
2022-04-02 21:03:48,777 - mmdet - INFO - Epoch [29][700/1301]	lr: 1.258e-05, eta: 1 day, 1:35:36, time: 3.152, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0073, loss_rpn_bbox: 0.0278, s0.loss_cls: 0.1304, s0.acc: 95.4883, s0.loss_bbox: 0.0693, s1.loss_cls: 0.0477, s1.acc: 96.9305, s1.loss_bbox: 0.0702, s2.loss_cls: 0.0221, s2.acc: 97.2334, s2.loss_bbox: 0.0492, loss: 0.4241
2022-04-02 21:06:26,083 - mmdet - INFO - Epoch [29][750/1301]	lr: 1.258e-05, eta: 1 day, 1:32:57, time: 3.146, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0084, loss_rpn_bbox: 0.0296, s0.loss_cls: 0.1357, s0.acc: 95.1419, s0.loss_bbox: 0.0796, s1.loss_cls: 0.0507, s1.acc: 96.5607, s1.loss_bbox: 0.0820, s2.loss_cls: 0.0244, s2.acc: 96.7731, s2.loss_bbox: 0.0546, loss: 0.4649
2022-04-02 21:09:03,466 - mmdet - INFO - Epoch [29][800/1301]	lr: 1.258e-05, eta: 1 day, 1:30:18, time: 3.148, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0077, loss_rpn_bbox: 0.0241, s0.loss_cls: 0.1272, s0.acc: 95.5924, s0.loss_bbox: 0.0706, s1.loss_cls: 0.0455, s1.acc: 96.9596, s1.loss_bbox: 0.0685, s2.loss_cls: 0.0210, s2.acc: 97.2411, s2.loss_bbox: 0.0471, loss: 0.4118
2022-04-02 21:11:41,314 - mmdet - INFO - Epoch [29][850/1301]	lr: 1.258e-05, eta: 1 day, 1:27:41, time: 3.157, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0065, loss_rpn_bbox: 0.0258, s0.loss_cls: 0.1215, s0.acc: 95.6029, s0.loss_bbox: 0.0705, s1.loss_cls: 0.0457, s1.acc: 96.8024, s1.loss_bbox: 0.0688, s2.loss_cls: 0.0214, s2.acc: 97.0805, s2.loss_bbox: 0.0483, loss: 0.4085
2022-04-02 21:14:18,457 - mmdet - INFO - Epoch [29][900/1301]	lr: 1.258e-05, eta: 1 day, 1:25:01, time: 3.143, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0070, loss_rpn_bbox: 0.0244, s0.loss_cls: 0.1183, s0.acc: 95.8503, s0.loss_bbox: 0.0678, s1.loss_cls: 0.0417, s1.acc: 97.2305, s1.loss_bbox: 0.0685, s2.loss_cls: 0.0196, s2.acc: 97.3515, s2.loss_bbox: 0.0472, loss: 0.3944
2022-04-02 21:16:56,024 - mmdet - INFO - Epoch [29][950/1301]	lr: 1.258e-05, eta: 1 day, 1:22:23, time: 3.151, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0072, loss_rpn_bbox: 0.0256, s0.loss_cls: 0.1274, s0.acc: 95.3698, s0.loss_bbox: 0.0720, s1.loss_cls: 0.0458, s1.acc: 96.8597, s1.loss_bbox: 0.0734, s2.loss_cls: 0.0219, s2.acc: 97.0289, s2.loss_bbox: 0.0502, loss: 0.4236
2022-04-02 21:19:33,578 - mmdet - INFO - Epoch [29][1000/1301]	lr: 1.258e-05, eta: 1 day, 1:19:45, time: 3.151, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0076, loss_rpn_bbox: 0.0269, s0.loss_cls: 0.1270, s0.acc: 95.4740, s0.loss_bbox: 0.0691, s1.loss_cls: 0.0472, s1.acc: 96.8573, s1.loss_bbox: 0.0715, s2.loss_cls: 0.0225, s2.acc: 96.9850, s2.loss_bbox: 0.0504, loss: 0.4220
2022-04-02 21:22:11,096 - mmdet - INFO - Epoch [29][1050/1301]	lr: 1.258e-05, eta: 1 day, 1:17:06, time: 3.150, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0060, loss_rpn_bbox: 0.0247, s0.loss_cls: 0.1153, s0.acc: 95.7891, s0.loss_bbox: 0.0657, s1.loss_cls: 0.0406, s1.acc: 97.1657, s1.loss_bbox: 0.0641, s2.loss_cls: 0.0197, s2.acc: 97.2632, s2.loss_bbox: 0.0460, loss: 0.3822
2022-04-02 21:24:48,483 - mmdet - INFO - Epoch [29][1100/1301]	lr: 1.258e-05, eta: 1 day, 1:14:27, time: 3.148, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0066, loss_rpn_bbox: 0.0226, s0.loss_cls: 0.1123, s0.acc: 95.9635, s0.loss_bbox: 0.0649, s1.loss_cls: 0.0376, s1.acc: 97.4407, s1.loss_bbox: 0.0656, s2.loss_cls: 0.0187, s2.acc: 97.3769, s2.loss_bbox: 0.0442, loss: 0.3724
2022-04-02 21:27:26,039 - mmdet - INFO - Epoch [29][1150/1301]	lr: 1.258e-05, eta: 1 day, 1:11:49, time: 3.151, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0085, loss_rpn_bbox: 0.0260, s0.loss_cls: 0.1223, s0.acc: 95.7917, s0.loss_bbox: 0.0712, s1.loss_cls: 0.0436, s1.acc: 97.2220, s1.loss_bbox: 0.0683, s2.loss_cls: 0.0198, s2.acc: 97.3838, s2.loss_bbox: 0.0472, loss: 0.4068
2022-04-02 21:30:04,186 - mmdet - INFO - Epoch [29][1200/1301]	lr: 1.258e-05, eta: 1 day, 1:09:14, time: 3.163, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0109, loss_rpn_bbox: 0.0267, s0.loss_cls: 0.1278, s0.acc: 95.4453, s0.loss_bbox: 0.0717, s1.loss_cls: 0.0455, s1.acc: 96.9415, s1.loss_bbox: 0.0701, s2.loss_cls: 0.0218, s2.acc: 97.1750, s2.loss_bbox: 0.0488, loss: 0.4231
2022-04-02 21:32:42,035 - mmdet - INFO - Epoch [29][1250/1301]	lr: 1.258e-05, eta: 1 day, 1:06:37, time: 3.157, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0075, loss_rpn_bbox: 0.0272, s0.loss_cls: 0.1193, s0.acc: 95.6849, s0.loss_bbox: 0.0700, s1.loss_cls: 0.0410, s1.acc: 97.1878, s1.loss_bbox: 0.0685, s2.loss_cls: 0.0197, s2.acc: 97.2302, s2.loss_bbox: 0.0481, loss: 0.4012
2022-04-02 21:35:19,660 - mmdet - INFO - Epoch [29][1300/1301]	lr: 1.258e-05, eta: 1 day, 1:03:59, time: 3.152, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0099, loss_rpn_bbox: 0.0239, s0.loss_cls: 0.1196, s0.acc: 95.6263, s0.loss_bbox: 0.0709, s1.loss_cls: 0.0428, s1.acc: 97.0285, s1.loss_bbox: 0.0663, s2.loss_cls: 0.0207, s2.acc: 97.1861, s2.loss_bbox: 0.0455, loss: 0.3995
2022-04-02 21:35:22,891 - mmdet - INFO - Saving checkpoint at 29 epochs
2022-04-02 21:37:52,931 - mmdet - INFO - Evaluating bbox...
2022-04-02 21:37:55,363 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.392
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.523
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.415
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.006
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.104
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.456
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.489
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.489
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.489
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.011
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.184
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.558

2022-04-02 21:37:55,365 - mmdet - INFO - 
+---------------+-------+-------------+-------+------------+-------+
| category      | AP    | category    | AP    | category   | AP    |
+---------------+-------+-------------+-------+------------+-------+
| General trash | 0.205 | Paper       | 0.278 | Paper pack | 0.413 |
| Metal         | 0.436 | Glass       | 0.424 | Plastic    | 0.311 |
| Styrofoam     | 0.343 | Plastic bag | 0.509 | Battery    | 0.628 |
| Clothing      | 0.373 | None        | None  | None       | None  |
+---------------+-------+-------------+-------+------------+-------+
2022-04-02 21:37:55,402 - mmdet - INFO - Exp name: detectors_cascade_rcnn_r50_1x_coco.py
2022-04-02 21:37:55,403 - mmdet - INFO - Epoch(val) [29][982]	bbox_mAP: 0.3920, bbox_mAP_50: 0.5230, bbox_mAP_75: 0.4150, bbox_mAP_s: 0.0060, bbox_mAP_m: 0.1040, bbox_mAP_l: 0.4560, bbox_mAP_copypaste: 0.392 0.523 0.415 0.006 0.104 0.456
2022-04-02 21:40:36,191 - mmdet - INFO - Epoch [30][50/1301]	lr: 9.952e-06, eta: 1 day, 1:01:18, time: 3.215, data_time: 0.074, memory: 29717, loss_rpn_cls: 0.0056, loss_rpn_bbox: 0.0245, s0.loss_cls: 0.1078, s0.acc: 96.0208, s0.loss_bbox: 0.0670, s1.loss_cls: 0.0373, s1.acc: 97.4720, s1.loss_bbox: 0.0635, s2.loss_cls: 0.0174, s2.acc: 97.5997, s2.loss_bbox: 0.0449, loss: 0.3679
2022-04-02 21:43:14,142 - mmdet - INFO - Epoch [30][100/1301]	lr: 9.952e-06, eta: 1 day, 0:58:42, time: 3.159, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0071, loss_rpn_bbox: 0.0258, s0.loss_cls: 0.1261, s0.acc: 95.4583, s0.loss_bbox: 0.0704, s1.loss_cls: 0.0423, s1.acc: 97.1906, s1.loss_bbox: 0.0695, s2.loss_cls: 0.0196, s2.acc: 97.4011, s2.loss_bbox: 0.0480, loss: 0.4089
2022-04-02 21:45:52,177 - mmdet - INFO - Epoch [30][150/1301]	lr: 9.952e-06, eta: 1 day, 0:56:06, time: 3.161, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0070, loss_rpn_bbox: 0.0264, s0.loss_cls: 0.1204, s0.acc: 95.6966, s0.loss_bbox: 0.0688, s1.loss_cls: 0.0424, s1.acc: 97.0829, s1.loss_bbox: 0.0673, s2.loss_cls: 0.0208, s2.acc: 97.2370, s2.loss_bbox: 0.0466, loss: 0.3996
2022-04-02 21:48:29,782 - mmdet - INFO - Epoch [30][200/1301]	lr: 9.952e-06, eta: 1 day, 0:53:28, time: 3.152, data_time: 0.016, memory: 29717, loss_rpn_cls: 0.0088, loss_rpn_bbox: 0.0256, s0.loss_cls: 0.1244, s0.acc: 95.5885, s0.loss_bbox: 0.0710, s1.loss_cls: 0.0446, s1.acc: 97.0060, s1.loss_bbox: 0.0703, s2.loss_cls: 0.0214, s2.acc: 97.1598, s2.loss_bbox: 0.0482, loss: 0.4144
2022-04-02 21:51:06,679 - mmdet - INFO - Epoch [30][250/1301]	lr: 9.952e-06, eta: 1 day, 0:50:47, time: 3.138, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0044, loss_rpn_bbox: 0.0230, s0.loss_cls: 0.1021, s0.acc: 96.2096, s0.loss_bbox: 0.0618, s1.loss_cls: 0.0350, s1.acc: 97.5104, s1.loss_bbox: 0.0609, s2.loss_cls: 0.0166, s2.acc: 97.7462, s2.loss_bbox: 0.0446, loss: 0.3484
2022-04-02 21:53:43,937 - mmdet - INFO - Epoch [30][300/1301]	lr: 9.952e-06, eta: 1 day, 0:48:08, time: 3.145, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0096, loss_rpn_bbox: 0.0264, s0.loss_cls: 0.1232, s0.acc: 95.7135, s0.loss_bbox: 0.0667, s1.loss_cls: 0.0444, s1.acc: 97.0389, s1.loss_bbox: 0.0635, s2.loss_cls: 0.0198, s2.acc: 97.2645, s2.loss_bbox: 0.0438, loss: 0.3974
2022-04-02 21:56:21,870 - mmdet - INFO - Epoch [30][350/1301]	lr: 9.952e-06, eta: 1 day, 0:45:32, time: 3.159, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0080, loss_rpn_bbox: 0.0275, s0.loss_cls: 0.1149, s0.acc: 95.9128, s0.loss_bbox: 0.0656, s1.loss_cls: 0.0419, s1.acc: 97.1775, s1.loss_bbox: 0.0660, s2.loss_cls: 0.0192, s2.acc: 97.3593, s2.loss_bbox: 0.0444, loss: 0.3876
2022-04-02 21:58:59,493 - mmdet - INFO - Epoch [30][400/1301]	lr: 9.952e-06, eta: 1 day, 0:42:54, time: 3.152, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0055, loss_rpn_bbox: 0.0203, s0.loss_cls: 0.0947, s0.acc: 96.4987, s0.loss_bbox: 0.0541, s1.loss_cls: 0.0316, s1.acc: 97.7893, s1.loss_bbox: 0.0528, s2.loss_cls: 0.0146, s2.acc: 98.0309, s2.loss_bbox: 0.0388, loss: 0.3125
2022-04-02 22:01:37,227 - mmdet - INFO - Epoch [30][450/1301]	lr: 9.952e-06, eta: 1 day, 0:40:16, time: 3.155, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0094, loss_rpn_bbox: 0.0230, s0.loss_cls: 0.1085, s0.acc: 96.1250, s0.loss_bbox: 0.0603, s1.loss_cls: 0.0386, s1.acc: 97.4343, s1.loss_bbox: 0.0624, s2.loss_cls: 0.0186, s2.acc: 97.5673, s2.loss_bbox: 0.0442, loss: 0.3651
2022-04-02 22:04:14,257 - mmdet - INFO - Epoch [30][500/1301]	lr: 9.952e-06, eta: 1 day, 0:37:36, time: 3.141, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0068, loss_rpn_bbox: 0.0223, s0.loss_cls: 0.1132, s0.acc: 95.8932, s0.loss_bbox: 0.0679, s1.loss_cls: 0.0398, s1.acc: 97.2449, s1.loss_bbox: 0.0691, s2.loss_cls: 0.0191, s2.acc: 97.4424, s2.loss_bbox: 0.0473, loss: 0.3855
2022-04-02 22:06:52,175 - mmdet - INFO - Epoch [30][550/1301]	lr: 9.952e-06, eta: 1 day, 0:35:00, time: 3.158, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0063, loss_rpn_bbox: 0.0206, s0.loss_cls: 0.0973, s0.acc: 96.4648, s0.loss_bbox: 0.0575, s1.loss_cls: 0.0298, s1.acc: 97.9667, s1.loss_bbox: 0.0551, s2.loss_cls: 0.0137, s2.acc: 98.1611, s2.loss_bbox: 0.0396, loss: 0.3199
2022-04-02 22:09:29,833 - mmdet - INFO - Epoch [30][600/1301]	lr: 9.952e-06, eta: 1 day, 0:32:22, time: 3.153, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0069, loss_rpn_bbox: 0.0247, s0.loss_cls: 0.1189, s0.acc: 95.6888, s0.loss_bbox: 0.0714, s1.loss_cls: 0.0415, s1.acc: 97.0338, s1.loss_bbox: 0.0666, s2.loss_cls: 0.0193, s2.acc: 97.3458, s2.loss_bbox: 0.0457, loss: 0.3952
2022-04-02 22:12:07,255 - mmdet - INFO - Epoch [30][650/1301]	lr: 9.952e-06, eta: 1 day, 0:29:44, time: 3.148, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0101, loss_rpn_bbox: 0.0262, s0.loss_cls: 0.1297, s0.acc: 95.4857, s0.loss_bbox: 0.0747, s1.loss_cls: 0.0465, s1.acc: 96.8257, s1.loss_bbox: 0.0707, s2.loss_cls: 0.0219, s2.acc: 97.0294, s2.loss_bbox: 0.0472, loss: 0.4270
2022-04-02 22:14:44,398 - mmdet - INFO - Epoch [30][700/1301]	lr: 9.952e-06, eta: 1 day, 0:27:04, time: 3.143, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0066, loss_rpn_bbox: 0.0262, s0.loss_cls: 0.1242, s0.acc: 95.5469, s0.loss_bbox: 0.0685, s1.loss_cls: 0.0440, s1.acc: 96.9597, s1.loss_bbox: 0.0678, s2.loss_cls: 0.0205, s2.acc: 97.2808, s2.loss_bbox: 0.0471, loss: 0.4050
2022-04-02 22:17:21,852 - mmdet - INFO - Epoch [30][750/1301]	lr: 9.952e-06, eta: 1 day, 0:24:26, time: 3.149, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0068, loss_rpn_bbox: 0.0271, s0.loss_cls: 0.1192, s0.acc: 95.6536, s0.loss_bbox: 0.0695, s1.loss_cls: 0.0435, s1.acc: 96.9915, s1.loss_bbox: 0.0694, s2.loss_cls: 0.0208, s2.acc: 97.1996, s2.loss_bbox: 0.0460, loss: 0.4021
2022-04-02 22:19:59,502 - mmdet - INFO - Epoch [30][800/1301]	lr: 9.952e-06, eta: 1 day, 0:21:48, time: 3.153, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0064, loss_rpn_bbox: 0.0226, s0.loss_cls: 0.1083, s0.acc: 96.1055, s0.loss_bbox: 0.0618, s1.loss_cls: 0.0368, s1.acc: 97.5100, s1.loss_bbox: 0.0607, s2.loss_cls: 0.0174, s2.acc: 97.6047, s2.loss_bbox: 0.0434, loss: 0.3573
2022-04-02 22:22:36,957 - mmdet - INFO - Epoch [30][850/1301]	lr: 9.952e-06, eta: 1 day, 0:19:10, time: 3.149, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0081, loss_rpn_bbox: 0.0231, s0.loss_cls: 0.1146, s0.acc: 95.9479, s0.loss_bbox: 0.0636, s1.loss_cls: 0.0401, s1.acc: 97.1980, s1.loss_bbox: 0.0623, s2.loss_cls: 0.0192, s2.acc: 97.3725, s2.loss_bbox: 0.0436, loss: 0.3746
2022-04-02 22:25:14,741 - mmdet - INFO - Epoch [30][900/1301]	lr: 9.952e-06, eta: 1 day, 0:16:33, time: 3.156, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0063, loss_rpn_bbox: 0.0246, s0.loss_cls: 0.1173, s0.acc: 95.7617, s0.loss_bbox: 0.0673, s1.loss_cls: 0.0410, s1.acc: 97.1944, s1.loss_bbox: 0.0701, s2.loss_cls: 0.0199, s2.acc: 97.3365, s2.loss_bbox: 0.0476, loss: 0.3941
2022-04-02 22:27:52,369 - mmdet - INFO - Epoch [30][950/1301]	lr: 9.952e-06, eta: 1 day, 0:13:55, time: 3.153, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0072, loss_rpn_bbox: 0.0239, s0.loss_cls: 0.1123, s0.acc: 95.8464, s0.loss_bbox: 0.0617, s1.loss_cls: 0.0384, s1.acc: 97.2725, s1.loss_bbox: 0.0598, s2.loss_cls: 0.0186, s2.acc: 97.3986, s2.loss_bbox: 0.0423, loss: 0.3642
2022-04-02 22:30:29,889 - mmdet - INFO - Epoch [30][1000/1301]	lr: 9.952e-06, eta: 1 day, 0:11:17, time: 3.150, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0062, loss_rpn_bbox: 0.0226, s0.loss_cls: 0.1070, s0.acc: 96.1693, s0.loss_bbox: 0.0614, s1.loss_cls: 0.0360, s1.acc: 97.4984, s1.loss_bbox: 0.0605, s2.loss_cls: 0.0170, s2.acc: 97.6149, s2.loss_bbox: 0.0429, loss: 0.3535
2022-04-02 22:33:07,047 - mmdet - INFO - Epoch [30][1050/1301]	lr: 9.952e-06, eta: 1 day, 0:08:37, time: 3.143, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0098, loss_rpn_bbox: 0.0260, s0.loss_cls: 0.1197, s0.acc: 95.7656, s0.loss_bbox: 0.0676, s1.loss_cls: 0.0429, s1.acc: 97.1745, s1.loss_bbox: 0.0649, s2.loss_cls: 0.0206, s2.acc: 97.2804, s2.loss_bbox: 0.0451, loss: 0.3967
2022-04-02 22:35:44,468 - mmdet - INFO - Epoch [30][1100/1301]	lr: 9.952e-06, eta: 1 day, 0:05:59, time: 3.148, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0071, loss_rpn_bbox: 0.0206, s0.loss_cls: 0.1027, s0.acc: 96.2448, s0.loss_bbox: 0.0600, s1.loss_cls: 0.0350, s1.acc: 97.6189, s1.loss_bbox: 0.0591, s2.loss_cls: 0.0169, s2.acc: 97.6535, s2.loss_bbox: 0.0425, loss: 0.3440
2022-04-02 22:38:21,647 - mmdet - INFO - Epoch [30][1150/1301]	lr: 9.952e-06, eta: 1 day, 0:03:20, time: 3.144, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0067, loss_rpn_bbox: 0.0249, s0.loss_cls: 0.1145, s0.acc: 95.8789, s0.loss_bbox: 0.0663, s1.loss_cls: 0.0408, s1.acc: 97.2467, s1.loss_bbox: 0.0647, s2.loss_cls: 0.0192, s2.acc: 97.4279, s2.loss_bbox: 0.0444, loss: 0.3815
2022-04-02 22:40:58,872 - mmdet - INFO - Epoch [30][1200/1301]	lr: 9.952e-06, eta: 1 day, 0:00:41, time: 3.144, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0074, loss_rpn_bbox: 0.0252, s0.loss_cls: 0.1181, s0.acc: 95.7878, s0.loss_bbox: 0.0691, s1.loss_cls: 0.0410, s1.acc: 97.1951, s1.loss_bbox: 0.0676, s2.loss_cls: 0.0199, s2.acc: 97.2650, s2.loss_bbox: 0.0469, loss: 0.3953
2022-04-02 22:43:36,038 - mmdet - INFO - Epoch [30][1250/1301]	lr: 9.952e-06, eta: 23:58:01, time: 3.143, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0073, loss_rpn_bbox: 0.0242, s0.loss_cls: 0.1169, s0.acc: 95.7917, s0.loss_bbox: 0.0653, s1.loss_cls: 0.0400, s1.acc: 97.1805, s1.loss_bbox: 0.0660, s2.loss_cls: 0.0194, s2.acc: 97.3975, s2.loss_bbox: 0.0462, loss: 0.3853
2022-04-02 22:46:13,208 - mmdet - INFO - Epoch [30][1300/1301]	lr: 9.952e-06, eta: 23:55:22, time: 3.143, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0065, loss_rpn_bbox: 0.0219, s0.loss_cls: 0.1144, s0.acc: 95.9115, s0.loss_bbox: 0.0634, s1.loss_cls: 0.0402, s1.acc: 97.2993, s1.loss_bbox: 0.0619, s2.loss_cls: 0.0193, s2.acc: 97.4232, s2.loss_bbox: 0.0439, loss: 0.3716
2022-04-02 22:46:16,448 - mmdet - INFO - Saving checkpoint at 30 epochs
2022-04-02 22:48:46,597 - mmdet - INFO - Evaluating bbox...
2022-04-02 22:48:48,959 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.388
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.518
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.408
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.007
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.104
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.452
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.489
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.489
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.489
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.014
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.173
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.560

2022-04-02 22:48:48,960 - mmdet - INFO - 
+---------------+-------+-------------+-------+------------+-------+
| category      | AP    | category    | AP    | category   | AP    |
+---------------+-------+-------------+-------+------------+-------+
| General trash | 0.206 | Paper       | 0.275 | Paper pack | 0.440 |
| Metal         | 0.440 | Glass       | 0.407 | Plastic    | 0.301 |
| Styrofoam     | 0.350 | Plastic bag | 0.509 | Battery    | 0.602 |
| Clothing      | 0.348 | None        | None  | None       | None  |
+---------------+-------+-------------+-------+------------+-------+
2022-04-02 22:48:48,991 - mmdet - INFO - Exp name: detectors_cascade_rcnn_r50_1x_coco.py
2022-04-02 22:48:48,991 - mmdet - INFO - Epoch(val) [30][982]	bbox_mAP: 0.3880, bbox_mAP_50: 0.5180, bbox_mAP_75: 0.4080, bbox_mAP_s: 0.0070, bbox_mAP_m: 0.1040, bbox_mAP_l: 0.4520, bbox_mAP_copypaste: 0.388 0.518 0.408 0.007 0.104 0.452
2022-04-02 22:51:29,451 - mmdet - INFO - Epoch [31][50/1301]	lr: 7.632e-06, eta: 23:52:40, time: 3.209, data_time: 0.075, memory: 29717, loss_rpn_cls: 0.0066, loss_rpn_bbox: 0.0266, s0.loss_cls: 0.1148, s0.acc: 95.8242, s0.loss_bbox: 0.0668, s1.loss_cls: 0.0400, s1.acc: 97.2257, s1.loss_bbox: 0.0670, s2.loss_cls: 0.0197, s2.acc: 97.2319, s2.loss_bbox: 0.0478, loss: 0.3892
2022-04-02 22:54:07,256 - mmdet - INFO - Epoch [31][100/1301]	lr: 7.632e-06, eta: 23:50:03, time: 3.156, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0077, loss_rpn_bbox: 0.0232, s0.loss_cls: 0.1091, s0.acc: 96.0456, s0.loss_bbox: 0.0659, s1.loss_cls: 0.0380, s1.acc: 97.3622, s1.loss_bbox: 0.0634, s2.loss_cls: 0.0182, s2.acc: 97.5558, s2.loss_bbox: 0.0442, loss: 0.3696
2022-04-02 22:56:45,060 - mmdet - INFO - Epoch [31][150/1301]	lr: 7.632e-06, eta: 23:47:26, time: 3.156, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0082, loss_rpn_bbox: 0.0249, s0.loss_cls: 0.1139, s0.acc: 96.0065, s0.loss_bbox: 0.0644, s1.loss_cls: 0.0411, s1.acc: 97.2669, s1.loss_bbox: 0.0630, s2.loss_cls: 0.0193, s2.acc: 97.4063, s2.loss_bbox: 0.0444, loss: 0.3793
2022-04-02 22:59:22,263 - mmdet - INFO - Epoch [31][200/1301]	lr: 7.632e-06, eta: 23:44:47, time: 3.144, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0058, loss_rpn_bbox: 0.0223, s0.loss_cls: 0.1092, s0.acc: 96.2253, s0.loss_bbox: 0.0624, s1.loss_cls: 0.0378, s1.acc: 97.4921, s1.loss_bbox: 0.0615, s2.loss_cls: 0.0181, s2.acc: 97.5844, s2.loss_bbox: 0.0433, loss: 0.3604
2022-04-02 23:01:59,661 - mmdet - INFO - Epoch [31][250/1301]	lr: 7.632e-06, eta: 23:42:09, time: 3.148, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0063, loss_rpn_bbox: 0.0236, s0.loss_cls: 0.1070, s0.acc: 96.1914, s0.loss_bbox: 0.0629, s1.loss_cls: 0.0363, s1.acc: 97.5634, s1.loss_bbox: 0.0612, s2.loss_cls: 0.0174, s2.acc: 97.6495, s2.loss_bbox: 0.0447, loss: 0.3594
2022-04-02 23:04:36,986 - mmdet - INFO - Epoch [31][300/1301]	lr: 7.632e-06, eta: 23:39:30, time: 3.146, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0047, loss_rpn_bbox: 0.0228, s0.loss_cls: 0.1072, s0.acc: 96.0104, s0.loss_bbox: 0.0631, s1.loss_cls: 0.0343, s1.acc: 97.6356, s1.loss_bbox: 0.0610, s2.loss_cls: 0.0168, s2.acc: 97.6302, s2.loss_bbox: 0.0450, loss: 0.3549
2022-04-02 23:07:14,796 - mmdet - INFO - Epoch [31][350/1301]	lr: 7.632e-06, eta: 23:36:53, time: 3.156, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0063, loss_rpn_bbox: 0.0228, s0.loss_cls: 0.1050, s0.acc: 96.1589, s0.loss_bbox: 0.0608, s1.loss_cls: 0.0353, s1.acc: 97.5546, s1.loss_bbox: 0.0582, s2.loss_cls: 0.0169, s2.acc: 97.5583, s2.loss_bbox: 0.0419, loss: 0.3472
2022-04-02 23:09:52,062 - mmdet - INFO - Epoch [31][400/1301]	lr: 7.632e-06, eta: 23:34:14, time: 3.145, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0056, loss_rpn_bbox: 0.0200, s0.loss_cls: 0.0995, s0.acc: 96.5325, s0.loss_bbox: 0.0552, s1.loss_cls: 0.0351, s1.acc: 97.5914, s1.loss_bbox: 0.0551, s2.loss_cls: 0.0161, s2.acc: 97.7875, s2.loss_bbox: 0.0386, loss: 0.3253
2022-04-02 23:12:29,480 - mmdet - INFO - Epoch [31][450/1301]	lr: 7.632e-06, eta: 23:31:36, time: 3.148, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0065, loss_rpn_bbox: 0.0200, s0.loss_cls: 0.0976, s0.acc: 96.4700, s0.loss_bbox: 0.0554, s1.loss_cls: 0.0331, s1.acc: 97.7243, s1.loss_bbox: 0.0566, s2.loss_cls: 0.0158, s2.acc: 97.8920, s2.loss_bbox: 0.0402, loss: 0.3251
2022-04-02 23:15:07,065 - mmdet - INFO - Epoch [31][500/1301]	lr: 7.632e-06, eta: 23:28:58, time: 3.152, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0084, loss_rpn_bbox: 0.0231, s0.loss_cls: 0.1157, s0.acc: 95.9687, s0.loss_bbox: 0.0634, s1.loss_cls: 0.0402, s1.acc: 97.3859, s1.loss_bbox: 0.0656, s2.loss_cls: 0.0186, s2.acc: 97.6326, s2.loss_bbox: 0.0451, loss: 0.3801
2022-04-02 23:17:45,034 - mmdet - INFO - Epoch [31][550/1301]	lr: 7.632e-06, eta: 23:26:22, time: 3.159, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0063, loss_rpn_bbox: 0.0208, s0.loss_cls: 0.0991, s0.acc: 96.3971, s0.loss_bbox: 0.0549, s1.loss_cls: 0.0314, s1.acc: 97.7877, s1.loss_bbox: 0.0560, s2.loss_cls: 0.0145, s2.acc: 98.0733, s2.loss_bbox: 0.0401, loss: 0.3233
2022-04-02 23:20:22,358 - mmdet - INFO - Epoch [31][600/1301]	lr: 7.632e-06, eta: 23:23:43, time: 3.146, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0047, loss_rpn_bbox: 0.0214, s0.loss_cls: 0.0983, s0.acc: 96.3737, s0.loss_bbox: 0.0609, s1.loss_cls: 0.0345, s1.acc: 97.4871, s1.loss_bbox: 0.0608, s2.loss_cls: 0.0156, s2.acc: 97.8370, s2.loss_bbox: 0.0419, loss: 0.3382
2022-04-02 23:22:59,586 - mmdet - INFO - Epoch [31][650/1301]	lr: 7.632e-06, eta: 23:21:04, time: 3.145, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0062, loss_rpn_bbox: 0.0206, s0.loss_cls: 0.1016, s0.acc: 96.3529, s0.loss_bbox: 0.0568, s1.loss_cls: 0.0350, s1.acc: 97.6166, s1.loss_bbox: 0.0563, s2.loss_cls: 0.0164, s2.acc: 97.7910, s2.loss_bbox: 0.0398, loss: 0.3328
2022-04-02 23:25:37,209 - mmdet - INFO - Epoch [31][700/1301]	lr: 7.632e-06, eta: 23:18:27, time: 3.152, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0064, loss_rpn_bbox: 0.0235, s0.loss_cls: 0.1102, s0.acc: 96.0104, s0.loss_bbox: 0.0606, s1.loss_cls: 0.0388, s1.acc: 97.3469, s1.loss_bbox: 0.0612, s2.loss_cls: 0.0189, s2.acc: 97.4645, s2.loss_bbox: 0.0425, loss: 0.3620
2022-04-02 23:28:14,548 - mmdet - INFO - Epoch [31][750/1301]	lr: 7.632e-06, eta: 23:15:48, time: 3.147, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0061, loss_rpn_bbox: 0.0252, s0.loss_cls: 0.1135, s0.acc: 95.7839, s0.loss_bbox: 0.0660, s1.loss_cls: 0.0402, s1.acc: 97.1897, s1.loss_bbox: 0.0649, s2.loss_cls: 0.0193, s2.acc: 97.3206, s2.loss_bbox: 0.0446, loss: 0.3798
2022-04-02 23:30:51,904 - mmdet - INFO - Epoch [31][800/1301]	lr: 7.632e-06, eta: 23:13:10, time: 3.147, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0074, loss_rpn_bbox: 0.0209, s0.loss_cls: 0.0981, s0.acc: 96.4635, s0.loss_bbox: 0.0548, s1.loss_cls: 0.0329, s1.acc: 97.7573, s1.loss_bbox: 0.0536, s2.loss_cls: 0.0152, s2.acc: 97.9206, s2.loss_bbox: 0.0377, loss: 0.3205
2022-04-02 23:33:29,309 - mmdet - INFO - Epoch [31][850/1301]	lr: 7.632e-06, eta: 23:10:32, time: 3.148, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0061, loss_rpn_bbox: 0.0208, s0.loss_cls: 0.1035, s0.acc: 96.3333, s0.loss_bbox: 0.0593, s1.loss_cls: 0.0343, s1.acc: 97.6911, s1.loss_bbox: 0.0578, s2.loss_cls: 0.0161, s2.acc: 97.7888, s2.loss_bbox: 0.0408, loss: 0.3387
2022-04-02 23:36:07,089 - mmdet - INFO - Epoch [31][900/1301]	lr: 7.632e-06, eta: 23:07:55, time: 3.156, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0067, loss_rpn_bbox: 0.0222, s0.loss_cls: 0.1118, s0.acc: 95.9362, s0.loss_bbox: 0.0658, s1.loss_cls: 0.0387, s1.acc: 97.3372, s1.loss_bbox: 0.0665, s2.loss_cls: 0.0188, s2.acc: 97.3905, s2.loss_bbox: 0.0439, loss: 0.3742
2022-04-02 23:38:44,385 - mmdet - INFO - Epoch [31][950/1301]	lr: 7.632e-06, eta: 23:05:16, time: 3.146, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0106, loss_rpn_bbox: 0.0251, s0.loss_cls: 0.1052, s0.acc: 96.0898, s0.loss_bbox: 0.0598, s1.loss_cls: 0.0373, s1.acc: 97.3545, s1.loss_bbox: 0.0603, s2.loss_cls: 0.0177, s2.acc: 97.5130, s2.loss_bbox: 0.0418, loss: 0.3578
2022-04-02 23:41:21,522 - mmdet - INFO - Epoch [31][1000/1301]	lr: 7.632e-06, eta: 23:02:37, time: 3.143, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0041, loss_rpn_bbox: 0.0209, s0.loss_cls: 0.0969, s0.acc: 96.5612, s0.loss_bbox: 0.0549, s1.loss_cls: 0.0330, s1.acc: 97.8030, s1.loss_bbox: 0.0547, s2.loss_cls: 0.0157, s2.acc: 98.0014, s2.loss_bbox: 0.0399, loss: 0.3201
2022-04-02 23:43:58,620 - mmdet - INFO - Epoch [31][1050/1301]	lr: 7.632e-06, eta: 22:59:58, time: 3.142, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0058, loss_rpn_bbox: 0.0221, s0.loss_cls: 0.1026, s0.acc: 96.2839, s0.loss_bbox: 0.0572, s1.loss_cls: 0.0343, s1.acc: 97.5592, s1.loss_bbox: 0.0561, s2.loss_cls: 0.0157, s2.acc: 97.7273, s2.loss_bbox: 0.0411, loss: 0.3349
2022-04-02 23:46:36,269 - mmdet - INFO - Epoch [31][1100/1301]	lr: 7.632e-06, eta: 22:57:20, time: 3.153, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0066, loss_rpn_bbox: 0.0219, s0.loss_cls: 0.1011, s0.acc: 96.3099, s0.loss_bbox: 0.0595, s1.loss_cls: 0.0374, s1.acc: 97.4036, s1.loss_bbox: 0.0580, s2.loss_cls: 0.0182, s2.acc: 97.4822, s2.loss_bbox: 0.0407, loss: 0.3435
2022-04-02 23:49:14,027 - mmdet - INFO - Epoch [31][1150/1301]	lr: 7.632e-06, eta: 22:54:43, time: 3.155, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0052, loss_rpn_bbox: 0.0247, s0.loss_cls: 0.1094, s0.acc: 95.9961, s0.loss_bbox: 0.0637, s1.loss_cls: 0.0375, s1.acc: 97.3514, s1.loss_bbox: 0.0630, s2.loss_cls: 0.0176, s2.acc: 97.5386, s2.loss_bbox: 0.0454, loss: 0.3665
2022-04-02 23:51:51,552 - mmdet - INFO - Epoch [31][1200/1301]	lr: 7.632e-06, eta: 22:52:05, time: 3.151, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0051, loss_rpn_bbox: 0.0218, s0.loss_cls: 0.1008, s0.acc: 96.3047, s0.loss_bbox: 0.0580, s1.loss_cls: 0.0336, s1.acc: 97.7073, s1.loss_bbox: 0.0577, s2.loss_cls: 0.0153, s2.acc: 97.8771, s2.loss_bbox: 0.0410, loss: 0.3333
2022-04-02 23:54:29,186 - mmdet - INFO - Epoch [31][1250/1301]	lr: 7.632e-06, eta: 22:49:28, time: 3.153, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0064, loss_rpn_bbox: 0.0245, s0.loss_cls: 0.1111, s0.acc: 95.9635, s0.loss_bbox: 0.0641, s1.loss_cls: 0.0383, s1.acc: 97.4067, s1.loss_bbox: 0.0634, s2.loss_cls: 0.0181, s2.acc: 97.4814, s2.loss_bbox: 0.0460, loss: 0.3720
2022-04-02 23:57:06,331 - mmdet - INFO - Epoch [31][1300/1301]	lr: 7.632e-06, eta: 22:46:49, time: 3.143, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0052, loss_rpn_bbox: 0.0187, s0.loss_cls: 0.0956, s0.acc: 96.3906, s0.loss_bbox: 0.0540, s1.loss_cls: 0.0307, s1.acc: 97.7504, s1.loss_bbox: 0.0538, s2.loss_cls: 0.0148, s2.acc: 97.8754, s2.loss_bbox: 0.0391, loss: 0.3118
2022-04-02 23:57:09,530 - mmdet - INFO - Saving checkpoint at 31 epochs
2022-04-02 23:59:39,779 - mmdet - INFO - Evaluating bbox...
2022-04-02 23:59:42,187 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.391
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.524
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.413
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.006
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.100
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.456
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.490
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.490
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.490
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.012
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.183
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.560

2022-04-02 23:59:42,188 - mmdet - INFO - 
+---------------+-------+-------------+-------+------------+-------+
| category      | AP    | category    | AP    | category   | AP    |
+---------------+-------+-------------+-------+------------+-------+
| General trash | 0.210 | Paper       | 0.280 | Paper pack | 0.436 |
| Metal         | 0.445 | Glass       | 0.401 | Plastic    | 0.316 |
| Styrofoam     | 0.343 | Plastic bag | 0.505 | Battery    | 0.620 |
| Clothing      | 0.354 | None        | None  | None       | None  |
+---------------+-------+-------------+-------+------------+-------+
2022-04-02 23:59:42,221 - mmdet - INFO - Exp name: detectors_cascade_rcnn_r50_1x_coco.py
2022-04-02 23:59:42,221 - mmdet - INFO - Epoch(val) [31][982]	bbox_mAP: 0.3910, bbox_mAP_50: 0.5240, bbox_mAP_75: 0.4130, bbox_mAP_s: 0.0060, bbox_mAP_m: 0.1000, bbox_mAP_l: 0.4560, bbox_mAP_copypaste: 0.391 0.524 0.413 0.006 0.100 0.456
2022-04-03 00:02:22,693 - mmdet - INFO - Epoch [32][50/1301]	lr: 5.638e-06, eta: 22:44:07, time: 3.209, data_time: 0.075, memory: 29717, loss_rpn_cls: 0.0058, loss_rpn_bbox: 0.0228, s0.loss_cls: 0.1078, s0.acc: 96.1224, s0.loss_bbox: 0.0618, s1.loss_cls: 0.0385, s1.acc: 97.4666, s1.loss_bbox: 0.0608, s2.loss_cls: 0.0187, s2.acc: 97.4902, s2.loss_bbox: 0.0411, loss: 0.3573
2022-04-03 00:05:00,238 - mmdet - INFO - Epoch [32][100/1301]	lr: 5.638e-06, eta: 22:41:30, time: 3.151, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0070, loss_rpn_bbox: 0.0207, s0.loss_cls: 0.0981, s0.acc: 96.4167, s0.loss_bbox: 0.0597, s1.loss_cls: 0.0336, s1.acc: 97.6560, s1.loss_bbox: 0.0569, s2.loss_cls: 0.0161, s2.acc: 97.7958, s2.loss_bbox: 0.0411, loss: 0.3332
2022-04-03 00:07:37,557 - mmdet - INFO - Epoch [32][150/1301]	lr: 5.638e-06, eta: 22:38:51, time: 3.146, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0060, loss_rpn_bbox: 0.0244, s0.loss_cls: 0.1093, s0.acc: 96.0990, s0.loss_bbox: 0.0592, s1.loss_cls: 0.0390, s1.acc: 97.3427, s1.loss_bbox: 0.0588, s2.loss_cls: 0.0181, s2.acc: 97.4740, s2.loss_bbox: 0.0401, loss: 0.3550
2022-04-03 00:10:15,041 - mmdet - INFO - Epoch [32][200/1301]	lr: 5.638e-06, eta: 22:36:13, time: 3.150, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0049, loss_rpn_bbox: 0.0214, s0.loss_cls: 0.1098, s0.acc: 96.1211, s0.loss_bbox: 0.0575, s1.loss_cls: 0.0387, s1.acc: 97.4346, s1.loss_bbox: 0.0555, s2.loss_cls: 0.0187, s2.acc: 97.4963, s2.loss_bbox: 0.0394, loss: 0.3460
2022-04-03 00:12:52,836 - mmdet - INFO - Epoch [32][250/1301]	lr: 5.638e-06, eta: 22:33:36, time: 3.156, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0083, loss_rpn_bbox: 0.0215, s0.loss_cls: 0.0916, s0.acc: 96.6380, s0.loss_bbox: 0.0538, s1.loss_cls: 0.0295, s1.acc: 97.9834, s1.loss_bbox: 0.0521, s2.loss_cls: 0.0137, s2.acc: 98.1508, s2.loss_bbox: 0.0369, loss: 0.3074
2022-04-03 00:15:30,725 - mmdet - INFO - Epoch [32][300/1301]	lr: 5.638e-06, eta: 22:30:59, time: 3.158, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0058, loss_rpn_bbox: 0.0206, s0.loss_cls: 0.1060, s0.acc: 96.2292, s0.loss_bbox: 0.0568, s1.loss_cls: 0.0343, s1.acc: 97.6741, s1.loss_bbox: 0.0542, s2.loss_cls: 0.0161, s2.acc: 97.8473, s2.loss_bbox: 0.0387, loss: 0.3326
2022-04-03 00:18:07,974 - mmdet - INFO - Epoch [32][350/1301]	lr: 5.638e-06, eta: 22:28:21, time: 3.145, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0051, loss_rpn_bbox: 0.0236, s0.loss_cls: 0.1031, s0.acc: 96.3503, s0.loss_bbox: 0.0595, s1.loss_cls: 0.0353, s1.acc: 97.5983, s1.loss_bbox: 0.0572, s2.loss_cls: 0.0171, s2.acc: 97.6289, s2.loss_bbox: 0.0419, loss: 0.3428
2022-04-03 00:20:45,634 - mmdet - INFO - Epoch [32][400/1301]	lr: 5.638e-06, eta: 22:25:43, time: 3.153, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0053, loss_rpn_bbox: 0.0201, s0.loss_cls: 0.1044, s0.acc: 96.3255, s0.loss_bbox: 0.0562, s1.loss_cls: 0.0353, s1.acc: 97.5509, s1.loss_bbox: 0.0557, s2.loss_cls: 0.0173, s2.acc: 97.4807, s2.loss_bbox: 0.0383, loss: 0.3327
2022-04-03 00:23:22,758 - mmdet - INFO - Epoch [32][450/1301]	lr: 5.638e-06, eta: 22:23:05, time: 3.142, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0049, loss_rpn_bbox: 0.0200, s0.loss_cls: 0.0933, s0.acc: 96.6419, s0.loss_bbox: 0.0549, s1.loss_cls: 0.0300, s1.acc: 97.9195, s1.loss_bbox: 0.0543, s2.loss_cls: 0.0141, s2.acc: 98.0639, s2.loss_bbox: 0.0371, loss: 0.3087
2022-04-03 00:26:00,110 - mmdet - INFO - Epoch [32][500/1301]	lr: 5.638e-06, eta: 22:20:26, time: 3.147, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0065, loss_rpn_bbox: 0.0217, s0.loss_cls: 0.1019, s0.acc: 96.2682, s0.loss_bbox: 0.0591, s1.loss_cls: 0.0340, s1.acc: 97.7086, s1.loss_bbox: 0.0569, s2.loss_cls: 0.0163, s2.acc: 97.7053, s2.loss_bbox: 0.0402, loss: 0.3366
2022-04-03 00:28:37,491 - mmdet - INFO - Epoch [32][550/1301]	lr: 5.638e-06, eta: 22:17:48, time: 3.148, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0042, loss_rpn_bbox: 0.0191, s0.loss_cls: 0.0879, s0.acc: 96.7214, s0.loss_bbox: 0.0497, s1.loss_cls: 0.0296, s1.acc: 97.9055, s1.loss_bbox: 0.0517, s2.loss_cls: 0.0143, s2.acc: 97.9821, s2.loss_bbox: 0.0372, loss: 0.2936
2022-04-03 00:31:14,390 - mmdet - INFO - Epoch [32][600/1301]	lr: 5.638e-06, eta: 22:15:09, time: 3.138, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0046, loss_rpn_bbox: 0.0200, s0.loss_cls: 0.0941, s0.acc: 96.6289, s0.loss_bbox: 0.0564, s1.loss_cls: 0.0301, s1.acc: 98.0146, s1.loss_bbox: 0.0527, s2.loss_cls: 0.0142, s2.acc: 98.0584, s2.loss_bbox: 0.0374, loss: 0.3094
2022-04-03 00:33:51,335 - mmdet - INFO - Epoch [32][650/1301]	lr: 5.638e-06, eta: 22:12:29, time: 3.139, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0052, loss_rpn_bbox: 0.0214, s0.loss_cls: 0.1035, s0.acc: 96.3503, s0.loss_bbox: 0.0581, s1.loss_cls: 0.0371, s1.acc: 97.4922, s1.loss_bbox: 0.0580, s2.loss_cls: 0.0177, s2.acc: 97.6327, s2.loss_bbox: 0.0408, loss: 0.3418
2022-04-03 00:36:28,326 - mmdet - INFO - Epoch [32][700/1301]	lr: 5.638e-06, eta: 22:09:50, time: 3.140, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0054, loss_rpn_bbox: 0.0216, s0.loss_cls: 0.0977, s0.acc: 96.4427, s0.loss_bbox: 0.0547, s1.loss_cls: 0.0316, s1.acc: 97.8335, s1.loss_bbox: 0.0554, s2.loss_cls: 0.0150, s2.acc: 97.9167, s2.loss_bbox: 0.0397, loss: 0.3212
2022-04-03 00:39:05,572 - mmdet - INFO - Epoch [32][750/1301]	lr: 5.638e-06, eta: 22:07:12, time: 3.145, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0065, loss_rpn_bbox: 0.0241, s0.loss_cls: 0.1004, s0.acc: 96.3646, s0.loss_bbox: 0.0609, s1.loss_cls: 0.0339, s1.acc: 97.6406, s1.loss_bbox: 0.0585, s2.loss_cls: 0.0163, s2.acc: 97.7493, s2.loss_bbox: 0.0388, loss: 0.3394
2022-04-03 00:41:42,572 - mmdet - INFO - Epoch [32][800/1301]	lr: 5.638e-06, eta: 22:04:33, time: 3.140, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0048, loss_rpn_bbox: 0.0199, s0.loss_cls: 0.0956, s0.acc: 96.5143, s0.loss_bbox: 0.0566, s1.loss_cls: 0.0303, s1.acc: 97.9319, s1.loss_bbox: 0.0529, s2.loss_cls: 0.0145, s2.acc: 97.9908, s2.loss_bbox: 0.0376, loss: 0.3122
2022-04-03 00:44:19,514 - mmdet - INFO - Epoch [32][850/1301]	lr: 5.638e-06, eta: 22:01:54, time: 3.139, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0052, loss_rpn_bbox: 0.0204, s0.loss_cls: 0.1015, s0.acc: 96.3333, s0.loss_bbox: 0.0580, s1.loss_cls: 0.0332, s1.acc: 97.7344, s1.loss_bbox: 0.0559, s2.loss_cls: 0.0153, s2.acc: 97.9284, s2.loss_bbox: 0.0396, loss: 0.3292
2022-04-03 00:46:56,569 - mmdet - INFO - Epoch [32][900/1301]	lr: 5.638e-06, eta: 21:59:15, time: 3.141, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0066, loss_rpn_bbox: 0.0193, s0.loss_cls: 0.0931, s0.acc: 96.5404, s0.loss_bbox: 0.0527, s1.loss_cls: 0.0299, s1.acc: 97.9438, s1.loss_bbox: 0.0516, s2.loss_cls: 0.0137, s2.acc: 98.1666, s2.loss_bbox: 0.0371, loss: 0.3040
2022-04-03 00:49:33,885 - mmdet - INFO - Epoch [32][950/1301]	lr: 5.638e-06, eta: 21:56:37, time: 3.146, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0075, loss_rpn_bbox: 0.0219, s0.loss_cls: 0.0989, s0.acc: 96.4727, s0.loss_bbox: 0.0568, s1.loss_cls: 0.0321, s1.acc: 97.6540, s1.loss_bbox: 0.0558, s2.loss_cls: 0.0151, s2.acc: 97.8434, s2.loss_bbox: 0.0392, loss: 0.3273
2022-04-03 00:52:11,224 - mmdet - INFO - Epoch [32][1000/1301]	lr: 5.638e-06, eta: 21:53:58, time: 3.147, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0050, loss_rpn_bbox: 0.0196, s0.loss_cls: 0.0889, s0.acc: 96.7786, s0.loss_bbox: 0.0500, s1.loss_cls: 0.0295, s1.acc: 97.9267, s1.loss_bbox: 0.0494, s2.loss_cls: 0.0145, s2.acc: 97.9030, s2.loss_bbox: 0.0357, loss: 0.2926
2022-04-03 00:54:48,342 - mmdet - INFO - Epoch [32][1050/1301]	lr: 5.638e-06, eta: 21:51:20, time: 3.142, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0054, loss_rpn_bbox: 0.0214, s0.loss_cls: 0.0980, s0.acc: 96.4453, s0.loss_bbox: 0.0576, s1.loss_cls: 0.0337, s1.acc: 97.6648, s1.loss_bbox: 0.0552, s2.loss_cls: 0.0156, s2.acc: 97.8856, s2.loss_bbox: 0.0388, loss: 0.3256
2022-04-03 00:57:25,522 - mmdet - INFO - Epoch [32][1100/1301]	lr: 5.638e-06, eta: 21:48:41, time: 3.144, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0059, loss_rpn_bbox: 0.0199, s0.loss_cls: 0.0959, s0.acc: 96.5846, s0.loss_bbox: 0.0536, s1.loss_cls: 0.0331, s1.acc: 97.7039, s1.loss_bbox: 0.0520, s2.loss_cls: 0.0154, s2.acc: 97.8161, s2.loss_bbox: 0.0381, loss: 0.3140
2022-04-03 01:00:02,929 - mmdet - INFO - Epoch [32][1150/1301]	lr: 5.638e-06, eta: 21:46:03, time: 3.148, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0053, loss_rpn_bbox: 0.0223, s0.loss_cls: 0.0990, s0.acc: 96.3958, s0.loss_bbox: 0.0594, s1.loss_cls: 0.0331, s1.acc: 97.6790, s1.loss_bbox: 0.0562, s2.loss_cls: 0.0156, s2.acc: 97.8719, s2.loss_bbox: 0.0399, loss: 0.3308
2022-04-03 01:02:39,917 - mmdet - INFO - Epoch [32][1200/1301]	lr: 5.638e-06, eta: 21:43:24, time: 3.140, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0054, loss_rpn_bbox: 0.0206, s0.loss_cls: 0.0952, s0.acc: 96.5260, s0.loss_bbox: 0.0546, s1.loss_cls: 0.0317, s1.acc: 97.7645, s1.loss_bbox: 0.0552, s2.loss_cls: 0.0148, s2.acc: 97.9238, s2.loss_bbox: 0.0380, loss: 0.3156
2022-04-03 01:05:16,953 - mmdet - INFO - Epoch [32][1250/1301]	lr: 5.638e-06, eta: 21:40:45, time: 3.141, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0061, loss_rpn_bbox: 0.0247, s0.loss_cls: 0.1091, s0.acc: 96.0156, s0.loss_bbox: 0.0623, s1.loss_cls: 0.0374, s1.acc: 97.4306, s1.loss_bbox: 0.0611, s2.loss_cls: 0.0189, s2.acc: 97.4541, s2.loss_bbox: 0.0431, loss: 0.3626
2022-04-03 01:07:54,298 - mmdet - INFO - Epoch [32][1300/1301]	lr: 5.638e-06, eta: 21:38:07, time: 3.147, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0096, loss_rpn_bbox: 0.0200, s0.loss_cls: 0.0954, s0.acc: 96.5378, s0.loss_bbox: 0.0565, s1.loss_cls: 0.0329, s1.acc: 97.7393, s1.loss_bbox: 0.0529, s2.loss_cls: 0.0155, s2.acc: 97.9928, s2.loss_bbox: 0.0375, loss: 0.3202
2022-04-03 01:07:57,515 - mmdet - INFO - Saving checkpoint at 32 epochs
2022-04-03 01:10:27,509 - mmdet - INFO - Evaluating bbox...
2022-04-03 01:10:29,805 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.388
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.523
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.404
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.003
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.102
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.452
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.484
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.484
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.484
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.011
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.174
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.554

2022-04-03 01:10:29,806 - mmdet - INFO - 
+---------------+-------+-------------+-------+------------+-------+
| category      | AP    | category    | AP    | category   | AP    |
+---------------+-------+-------------+-------+------------+-------+
| General trash | 0.204 | Paper       | 0.279 | Paper pack | 0.436 |
| Metal         | 0.436 | Glass       | 0.398 | Plastic    | 0.310 |
| Styrofoam     | 0.340 | Plastic bag | 0.508 | Battery    | 0.620 |
| Clothing      | 0.346 | None        | None  | None       | None  |
+---------------+-------+-------------+-------+------------+-------+
2022-04-03 01:10:29,839 - mmdet - INFO - Exp name: detectors_cascade_rcnn_r50_1x_coco.py
2022-04-03 01:10:29,839 - mmdet - INFO - Epoch(val) [32][982]	bbox_mAP: 0.3880, bbox_mAP_50: 0.5230, bbox_mAP_75: 0.4040, bbox_mAP_s: 0.0030, bbox_mAP_m: 0.1020, bbox_mAP_l: 0.4520, bbox_mAP_copypaste: 0.388 0.523 0.404 0.003 0.102 0.452
2022-04-03 01:13:10,589 - mmdet - INFO - Epoch [33][50/1301]	lr: 3.985e-06, eta: 21:35:27, time: 3.214, data_time: 0.075, memory: 29717, loss_rpn_cls: 0.0055, loss_rpn_bbox: 0.0215, s0.loss_cls: 0.1017, s0.acc: 96.3281, s0.loss_bbox: 0.0595, s1.loss_cls: 0.0345, s1.acc: 97.6468, s1.loss_bbox: 0.0569, s2.loss_cls: 0.0164, s2.acc: 97.8124, s2.loss_bbox: 0.0383, loss: 0.3343
2022-04-03 01:15:48,254 - mmdet - INFO - Epoch [33][100/1301]	lr: 3.985e-06, eta: 21:32:49, time: 3.153, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0050, loss_rpn_bbox: 0.0194, s0.loss_cls: 0.0999, s0.acc: 96.3841, s0.loss_bbox: 0.0573, s1.loss_cls: 0.0351, s1.acc: 97.6460, s1.loss_bbox: 0.0566, s2.loss_cls: 0.0159, s2.acc: 97.8202, s2.loss_bbox: 0.0391, loss: 0.3284
2022-04-03 01:18:25,624 - mmdet - INFO - Epoch [33][150/1301]	lr: 3.985e-06, eta: 21:30:11, time: 3.147, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0071, loss_rpn_bbox: 0.0227, s0.loss_cls: 0.1022, s0.acc: 96.3203, s0.loss_bbox: 0.0570, s1.loss_cls: 0.0351, s1.acc: 97.6479, s1.loss_bbox: 0.0567, s2.loss_cls: 0.0168, s2.acc: 97.7381, s2.loss_bbox: 0.0401, loss: 0.3376
2022-04-03 01:21:03,047 - mmdet - INFO - Epoch [33][200/1301]	lr: 3.985e-06, eta: 21:27:33, time: 3.148, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0049, loss_rpn_bbox: 0.0208, s0.loss_cls: 0.1030, s0.acc: 96.3997, s0.loss_bbox: 0.0535, s1.loss_cls: 0.0338, s1.acc: 97.7858, s1.loss_bbox: 0.0503, s2.loss_cls: 0.0165, s2.acc: 97.8905, s2.loss_bbox: 0.0353, loss: 0.3181
2022-04-03 01:23:40,318 - mmdet - INFO - Epoch [33][250/1301]	lr: 3.985e-06, eta: 21:24:55, time: 3.145, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0056, loss_rpn_bbox: 0.0200, s0.loss_cls: 0.0893, s0.acc: 96.7174, s0.loss_bbox: 0.0544, s1.loss_cls: 0.0288, s1.acc: 97.9975, s1.loss_bbox: 0.0499, s2.loss_cls: 0.0139, s2.acc: 98.1016, s2.loss_bbox: 0.0350, loss: 0.2968
2022-04-03 01:26:17,895 - mmdet - INFO - Epoch [33][300/1301]	lr: 3.985e-06, eta: 21:22:18, time: 3.152, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0069, loss_rpn_bbox: 0.0229, s0.loss_cls: 0.1085, s0.acc: 96.0703, s0.loss_bbox: 0.0628, s1.loss_cls: 0.0370, s1.acc: 97.5115, s1.loss_bbox: 0.0586, s2.loss_cls: 0.0176, s2.acc: 97.7382, s2.loss_bbox: 0.0398, loss: 0.3541
2022-04-03 01:28:55,134 - mmdet - INFO - Epoch [33][350/1301]	lr: 3.985e-06, eta: 21:19:39, time: 3.145, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0057, loss_rpn_bbox: 0.0220, s0.loss_cls: 0.1007, s0.acc: 96.3633, s0.loss_bbox: 0.0563, s1.loss_cls: 0.0334, s1.acc: 97.6914, s1.loss_bbox: 0.0565, s2.loss_cls: 0.0162, s2.acc: 97.6869, s2.loss_bbox: 0.0407, loss: 0.3315
2022-04-03 01:31:32,199 - mmdet - INFO - Epoch [33][400/1301]	lr: 3.985e-06, eta: 21:17:01, time: 3.141, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0054, loss_rpn_bbox: 0.0193, s0.loss_cls: 0.0952, s0.acc: 96.5833, s0.loss_bbox: 0.0525, s1.loss_cls: 0.0323, s1.acc: 97.7777, s1.loss_bbox: 0.0512, s2.loss_cls: 0.0155, s2.acc: 97.8982, s2.loss_bbox: 0.0362, loss: 0.3075
2022-04-03 01:34:09,249 - mmdet - INFO - Epoch [33][450/1301]	lr: 3.985e-06, eta: 21:14:22, time: 3.141, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0054, loss_rpn_bbox: 0.0178, s0.loss_cls: 0.0926, s0.acc: 96.6172, s0.loss_bbox: 0.0524, s1.loss_cls: 0.0294, s1.acc: 97.9791, s1.loss_bbox: 0.0520, s2.loss_cls: 0.0139, s2.acc: 98.1269, s2.loss_bbox: 0.0376, loss: 0.3012
2022-04-03 01:36:46,628 - mmdet - INFO - Epoch [33][500/1301]	lr: 3.985e-06, eta: 21:11:44, time: 3.148, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0047, loss_rpn_bbox: 0.0212, s0.loss_cls: 0.0948, s0.acc: 96.5117, s0.loss_bbox: 0.0569, s1.loss_cls: 0.0314, s1.acc: 97.8140, s1.loss_bbox: 0.0555, s2.loss_cls: 0.0156, s2.acc: 97.8660, s2.loss_bbox: 0.0404, loss: 0.3204
2022-04-03 01:39:24,212 - mmdet - INFO - Epoch [33][550/1301]	lr: 3.985e-06, eta: 21:09:07, time: 3.152, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0062, loss_rpn_bbox: 0.0194, s0.loss_cls: 0.0883, s0.acc: 96.7930, s0.loss_bbox: 0.0495, s1.loss_cls: 0.0282, s1.acc: 97.9608, s1.loss_bbox: 0.0489, s2.loss_cls: 0.0122, s2.acc: 98.3225, s2.loss_bbox: 0.0345, loss: 0.2872
2022-04-03 01:42:01,464 - mmdet - INFO - Epoch [33][600/1301]	lr: 3.985e-06, eta: 21:06:28, time: 3.145, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0050, loss_rpn_bbox: 0.0207, s0.loss_cls: 0.0909, s0.acc: 96.7031, s0.loss_bbox: 0.0541, s1.loss_cls: 0.0292, s1.acc: 97.9245, s1.loss_bbox: 0.0524, s2.loss_cls: 0.0132, s2.acc: 98.1700, s2.loss_bbox: 0.0370, loss: 0.3024
2022-04-03 01:44:39,612 - mmdet - INFO - Epoch [33][650/1301]	lr: 3.985e-06, eta: 21:03:52, time: 3.163, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0043, loss_rpn_bbox: 0.0171, s0.loss_cls: 0.0892, s0.acc: 96.7031, s0.loss_bbox: 0.0509, s1.loss_cls: 0.0304, s1.acc: 97.8865, s1.loss_bbox: 0.0466, s2.loss_cls: 0.0134, s2.acc: 98.1096, s2.loss_bbox: 0.0325, loss: 0.2844
2022-04-03 01:47:16,883 - mmdet - INFO - Epoch [33][700/1301]	lr: 3.985e-06, eta: 21:01:14, time: 3.145, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0054, loss_rpn_bbox: 0.0196, s0.loss_cls: 0.0888, s0.acc: 96.7148, s0.loss_bbox: 0.0510, s1.loss_cls: 0.0293, s1.acc: 97.9299, s1.loss_bbox: 0.0519, s2.loss_cls: 0.0141, s2.acc: 97.9120, s2.loss_bbox: 0.0355, loss: 0.2956
2022-04-03 01:49:54,532 - mmdet - INFO - Epoch [33][750/1301]	lr: 3.985e-06, eta: 20:58:37, time: 3.153, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0057, loss_rpn_bbox: 0.0238, s0.loss_cls: 0.1005, s0.acc: 96.3958, s0.loss_bbox: 0.0559, s1.loss_cls: 0.0352, s1.acc: 97.6399, s1.loss_bbox: 0.0572, s2.loss_cls: 0.0170, s2.acc: 97.7218, s2.loss_bbox: 0.0396, loss: 0.3349
2022-04-03 01:52:31,715 - mmdet - INFO - Epoch [33][800/1301]	lr: 3.985e-06, eta: 20:55:58, time: 3.144, data_time: 0.017, memory: 29717, loss_rpn_cls: 0.0046, loss_rpn_bbox: 0.0179, s0.loss_cls: 0.0889, s0.acc: 96.7904, s0.loss_bbox: 0.0504, s1.loss_cls: 0.0287, s1.acc: 97.9587, s1.loss_bbox: 0.0480, s2.loss_cls: 0.0137, s2.acc: 98.1373, s2.loss_bbox: 0.0334, loss: 0.2857
2022-04-03 01:55:08,883 - mmdet - INFO - Epoch [33][850/1301]	lr: 3.985e-06, eta: 20:53:20, time: 3.143, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0055, loss_rpn_bbox: 0.0204, s0.loss_cls: 0.0998, s0.acc: 96.4870, s0.loss_bbox: 0.0545, s1.loss_cls: 0.0326, s1.acc: 97.7010, s1.loss_bbox: 0.0513, s2.loss_cls: 0.0156, s2.acc: 97.8143, s2.loss_bbox: 0.0368, loss: 0.3166
2022-04-03 01:57:46,391 - mmdet - INFO - Epoch [33][900/1301]	lr: 3.985e-06, eta: 20:50:42, time: 3.150, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0043, loss_rpn_bbox: 0.0181, s0.loss_cls: 0.0927, s0.acc: 96.6706, s0.loss_bbox: 0.0558, s1.loss_cls: 0.0294, s1.acc: 97.9369, s1.loss_bbox: 0.0561, s2.loss_cls: 0.0136, s2.acc: 98.0732, s2.loss_bbox: 0.0393, loss: 0.3092
2022-04-03 02:00:23,416 - mmdet - INFO - Epoch [33][950/1301]	lr: 3.985e-06, eta: 20:48:04, time: 3.140, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0040, loss_rpn_bbox: 0.0202, s0.loss_cls: 0.0927, s0.acc: 96.5716, s0.loss_bbox: 0.0521, s1.loss_cls: 0.0297, s1.acc: 97.9466, s1.loss_bbox: 0.0516, s2.loss_cls: 0.0136, s2.acc: 98.1360, s2.loss_bbox: 0.0365, loss: 0.3003
2022-04-03 02:03:00,875 - mmdet - INFO - Epoch [33][1000/1301]	lr: 3.985e-06, eta: 20:45:26, time: 3.149, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0040, loss_rpn_bbox: 0.0190, s0.loss_cls: 0.0900, s0.acc: 96.7474, s0.loss_bbox: 0.0511, s1.loss_cls: 0.0294, s1.acc: 97.9193, s1.loss_bbox: 0.0504, s2.loss_cls: 0.0138, s2.acc: 98.0563, s2.loss_bbox: 0.0361, loss: 0.2936
2022-04-03 02:05:38,516 - mmdet - INFO - Epoch [33][1050/1301]	lr: 3.985e-06, eta: 20:42:49, time: 3.153, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0057, loss_rpn_bbox: 0.0217, s0.loss_cls: 0.0926, s0.acc: 96.5990, s0.loss_bbox: 0.0513, s1.loss_cls: 0.0313, s1.acc: 97.8273, s1.loss_bbox: 0.0513, s2.loss_cls: 0.0146, s2.acc: 97.9186, s2.loss_bbox: 0.0364, loss: 0.3050
2022-04-03 02:08:16,453 - mmdet - INFO - Epoch [33][1100/1301]	lr: 3.985e-06, eta: 20:40:12, time: 3.159, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0064, loss_rpn_bbox: 0.0193, s0.loss_cls: 0.0939, s0.acc: 96.5599, s0.loss_bbox: 0.0528, s1.loss_cls: 0.0313, s1.acc: 97.8217, s1.loss_bbox: 0.0529, s2.loss_cls: 0.0153, s2.acc: 97.8503, s2.loss_bbox: 0.0374, loss: 0.3093
2022-04-03 02:10:54,219 - mmdet - INFO - Epoch [33][1150/1301]	lr: 3.985e-06, eta: 20:37:35, time: 3.155, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0043, loss_rpn_bbox: 0.0205, s0.loss_cls: 0.0921, s0.acc: 96.6354, s0.loss_bbox: 0.0541, s1.loss_cls: 0.0298, s1.acc: 97.8515, s1.loss_bbox: 0.0519, s2.loss_cls: 0.0139, s2.acc: 98.1806, s2.loss_bbox: 0.0362, loss: 0.3028
2022-04-03 02:13:31,826 - mmdet - INFO - Epoch [33][1200/1301]	lr: 3.985e-06, eta: 20:34:57, time: 3.152, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0048, loss_rpn_bbox: 0.0208, s0.loss_cls: 0.0934, s0.acc: 96.5768, s0.loss_bbox: 0.0517, s1.loss_cls: 0.0304, s1.acc: 97.9470, s1.loss_bbox: 0.0495, s2.loss_cls: 0.0145, s2.acc: 98.0145, s2.loss_bbox: 0.0359, loss: 0.3010
2022-04-03 02:16:09,703 - mmdet - INFO - Epoch [33][1250/1301]	lr: 3.985e-06, eta: 20:32:21, time: 3.158, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0050, loss_rpn_bbox: 0.0209, s0.loss_cls: 0.1019, s0.acc: 96.3932, s0.loss_bbox: 0.0570, s1.loss_cls: 0.0343, s1.acc: 97.6057, s1.loss_bbox: 0.0570, s2.loss_cls: 0.0167, s2.acc: 97.7101, s2.loss_bbox: 0.0395, loss: 0.3323
2022-04-03 02:18:46,940 - mmdet - INFO - Epoch [33][1300/1301]	lr: 3.985e-06, eta: 20:29:42, time: 3.145, data_time: 0.018, memory: 29717, loss_rpn_cls: 0.0040, loss_rpn_bbox: 0.0162, s0.loss_cls: 0.0812, s0.acc: 96.9453, s0.loss_bbox: 0.0457, s1.loss_cls: 0.0263, s1.acc: 98.0267, s1.loss_bbox: 0.0468, s2.loss_cls: 0.0120, s2.acc: 98.2683, s2.loss_bbox: 0.0325, loss: 0.2647
2022-04-03 02:18:50,163 - mmdet - INFO - Saving checkpoint at 33 epochs
