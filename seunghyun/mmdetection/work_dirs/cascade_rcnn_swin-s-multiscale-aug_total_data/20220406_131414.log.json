{"mmdet_version": "2.22.0", "CLASSES": ["General trash", "Paper", "Paper pack", "Metal", "Glass", "Plastic", "Styrofoam", "Plastic bag", "Battery", "Clothing"], "env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-PCIE-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.5\nMMCV: 1.4.6\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.22.0+", "config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=96,\n        depths=[2, 2, 18, 2],\n        num_heads=[3, 6, 12, 24],\n        window_size=7,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.2,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[96, 192, 384, 768],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = '/opt/ml/detection/dataset/'\nclasses = ('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n           'Styrofoam', 'Plastic bag', 'Battery', 'Clothing')\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\nimg_scale = (1024, 1024)\nalbu_train_transforms = [\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Flip', p=1.0),\n            dict(type='RandomRotate90', p=1.0)\n        ],\n        p=0.5),\n    dict(\n        type='RandomBrightnessContrast',\n        brightness_limit=0.1,\n        contrast_limit=0.15,\n        p=0.5),\n    dict(\n        type='HueSaturationValue',\n        hue_shift_limit=15,\n        sat_shift_limit=25,\n        val_shift_limit=10,\n        p=0.5),\n    dict(type='GaussNoise', p=0.3),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Blur', p=1.0),\n            dict(type='GaussianBlur', p=1.0),\n            dict(type='MedianBlur', blur_limit=5, p=1.0),\n            dict(type='MotionBlur', p=1.0)\n        ],\n        p=0.1)\n]\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='RandomFlip', flip_ratio=0.0),\n    dict(\n        type='Resize',\n        img_scale=[(768, 768), (800, 800), (832, 832), (864, 864), (896, 896),\n                   (928, 928), (960, 960), (992, 992), (1024, 1024)],\n        multiscale_mode='value'),\n    dict(\n        type='Albu',\n        transforms=[\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Flip', p=1.0),\n                    dict(type='RandomRotate90', p=1.0)\n                ],\n                p=0.5),\n            dict(\n                type='RandomBrightnessContrast',\n                brightness_limit=0.1,\n                contrast_limit=0.15,\n                p=0.5),\n            dict(\n                type='HueSaturationValue',\n                hue_shift_limit=15,\n                sat_shift_limit=25,\n                val_shift_limit=10,\n                p=0.5),\n            dict(type='GaussNoise', p=0.3),\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Blur', p=1.0),\n                    dict(type='GaussianBlur', p=1.0),\n                    dict(type='MedianBlur', blur_limit=5, p=1.0),\n                    dict(type='MotionBlur', p=1.0)\n                ],\n                p=0.1)\n        ],\n        bbox_params=dict(\n            type='BboxParams',\n            format='pascal_voc',\n            label_fields=['gt_labels'],\n            min_visibility=0.0,\n            filter_lost_elements=True),\n        keymap=dict(img='image', gt_bboxes='bboxes'),\n        update_pad_shape=False,\n        skip_img_without_anno=True),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\nval_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        ann_file=\n        '/opt/ml/detection/dataset/stratified_kfold/basic_v2/cv_train_3.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(\n                type='Resize',\n                img_scale=[(768, 768), (800, 800), (832, 832), (864, 864),\n                           (896, 896), (928, 928), (960, 960), (992, 992),\n                           (1024, 1024)],\n                multiscale_mode='value'),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Flip', p=1.0),\n                            dict(type='RandomRotate90', p=1.0)\n                        ],\n                        p=0.5),\n                    dict(\n                        type='RandomBrightnessContrast',\n                        brightness_limit=0.1,\n                        contrast_limit=0.15,\n                        p=0.5),\n                    dict(\n                        type='HueSaturationValue',\n                        hue_shift_limit=15,\n                        sat_shift_limit=25,\n                        val_shift_limit=10,\n                        p=0.5),\n                    dict(type='GaussNoise', p=0.3),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Blur', p=1.0),\n                            dict(type='GaussianBlur', p=1.0),\n                            dict(type='MedianBlur', blur_limit=5, p=1.0),\n                            dict(type='MotionBlur', p=1.0)\n                        ],\n                        p=0.1)\n                ],\n                bbox_params=dict(\n                    type='BboxParams',\n                    format='pascal_voc',\n                    label_fields=['gt_labels'],\n                    min_visibility=0.0,\n                    filter_lost_elements=True),\n                keymap=dict(img='image', gt_bboxes='bboxes'),\n                update_pad_shape=False,\n                skip_img_without_anno=True),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        ann_file=\n        '/opt/ml/detection/dataset/stratified_kfold/basic_v2/cv_val_3.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        ann_file='/opt/ml/detection/dataset/test.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox', classwise=True)\noptimizer = dict(\n    type='AdamW',\n    lr=0.0001,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='CosineAnnealing',\n    warmup='linear',\n    warmup_iters=488,\n    warmup_ratio=0.001,\n    min_lr=1e-06)\nrunner = dict(type='EpochBasedRunner', max_epochs=24)\ncheckpoint_config = dict(max_keep_ckpts=5, interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(\n            type='WandbLoggerHook',\n            interval=1000,\n            init_kwargs=dict(\n                project='two-stage-model',\n                entity='canvas11',\n                name='LEE_cascade-rcnn-swins-multiscale-aug'))\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_small_patch4_window7_224.pth'\nfp16 = dict(loss_scale=512.0)\nwork_dir = 'work_dirs/cascade_rcnn_swin-s-multiscale-aug'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 301700385, "exp_name": "cascade_rcnn_swin-s-p4-w7_fpn_fp16_ms-crop-3x_coco.py", "fp16": {"loss_scaler": {"scale": 512.0, "growth_factor": 2.0, "backoff_factor": 0.5, "growth_interval": 2000, "_growth_tracker": 0}}, "epoch": 24, "iter": 11712, "mmcv_version": "1.4.6", "time": "Tue Mar 29 12:28:09 2022", "hook_msgs": {"last_ckpt": "/opt/ml/detection/SEUNGHYUN_WORKSPACE/my_mmdetection/work_dirs/cascade_rcnn_swin-s-multiscale-aug/epoch_23.pth"}}
{"mode": "train", "epoch": 25, "iter": 50, "lr": 1e-05, "memory": 28856, "data_time": 0.08514, "loss_rpn_cls": 0.01773, "loss_rpn_bbox": 0.02097, "s0.loss_cls": 0.12112, "s0.acc": 96.00537, "s0.loss_bbox": 0.06955, "s1.loss_cls": 0.05642, "s1.acc": 96.32656, "s1.loss_bbox": 0.06698, "s2.loss_cls": 0.02784, "s2.acc": 96.39406, "s2.loss_bbox": 0.03938, "loss": 0.42, "time": 1.62371}
{"mode": "train", "epoch": 25, "iter": 100, "lr": 1e-05, "memory": 28856, "data_time": 0.02104, "loss_rpn_cls": 0.02017, "loss_rpn_bbox": 0.02593, "s0.loss_cls": 0.14844, "s0.acc": 95.11621, "s0.loss_bbox": 0.08297, "s1.loss_cls": 0.06953, "s1.acc": 95.53083, "s1.loss_bbox": 0.07917, "s2.loss_cls": 0.03412, "s2.acc": 95.43435, "s2.loss_bbox": 0.04772, "loss": 0.50804, "time": 1.5615}
{"mode": "train", "epoch": 25, "iter": 150, "lr": 1e-05, "memory": 28856, "data_time": 0.02164, "loss_rpn_cls": 0.01812, "loss_rpn_bbox": 0.02162, "s0.loss_cls": 0.14, "s0.acc": 95.38818, "s0.loss_bbox": 0.08255, "s1.loss_cls": 0.06658, "s1.acc": 95.7326, "s1.loss_bbox": 0.07868, "s2.loss_cls": 0.03201, "s2.acc": 95.82499, "s2.loss_bbox": 0.04453, "loss": 0.48411, "time": 1.57119}
{"mode": "train", "epoch": 25, "iter": 200, "lr": 1e-05, "memory": 28856, "data_time": 0.02145, "loss_rpn_cls": 0.01745, "loss_rpn_bbox": 0.02116, "s0.loss_cls": 0.12326, "s0.acc": 95.8501, "s0.loss_bbox": 0.07263, "s1.loss_cls": 0.05756, "s1.acc": 96.27037, "s1.loss_bbox": 0.07158, "s2.loss_cls": 0.02836, "s2.acc": 96.23571, "s2.loss_bbox": 0.04273, "loss": 0.43472, "time": 1.55782}
{"mode": "train", "epoch": 25, "iter": 250, "lr": 1e-05, "memory": 28856, "data_time": 0.02141, "loss_rpn_cls": 0.02266, "loss_rpn_bbox": 0.02127, "s0.loss_cls": 0.14192, "s0.acc": 95.45996, "s0.loss_bbox": 0.0782, "s1.loss_cls": 0.06618, "s1.acc": 95.89816, "s1.loss_bbox": 0.07525, "s2.loss_cls": 0.03227, "s2.acc": 95.94622, "s2.loss_bbox": 0.04482, "loss": 0.48257, "time": 1.5809}
{"mode": "train", "epoch": 25, "iter": 300, "lr": 1e-05, "memory": 28856, "data_time": 0.02115, "loss_rpn_cls": 0.03333, "loss_rpn_bbox": 0.02293, "s0.loss_cls": 0.14677, "s0.acc": 95.12988, "s0.loss_bbox": 0.08199, "s1.loss_cls": 0.06879, "s1.acc": 95.56626, "s1.loss_bbox": 0.07801, "s2.loss_cls": 0.03398, "s2.acc": 95.60743, "s2.loss_bbox": 0.04533, "loss": 0.51112, "time": 1.55528}
{"mode": "train", "epoch": 25, "iter": 350, "lr": 1e-05, "memory": 28856, "data_time": 0.02145, "loss_rpn_cls": 0.0167, "loss_rpn_bbox": 0.02305, "s0.loss_cls": 0.1362, "s0.acc": 95.63574, "s0.loss_bbox": 0.07689, "s1.loss_cls": 0.06339, "s1.acc": 95.98362, "s1.loss_bbox": 0.0754, "s2.loss_cls": 0.03164, "s2.acc": 96.02387, "s2.loss_bbox": 0.04584, "loss": 0.46912, "time": 1.55995}
{"mode": "train", "epoch": 25, "iter": 400, "lr": 1e-05, "memory": 28856, "data_time": 0.02134, "loss_rpn_cls": 0.02184, "loss_rpn_bbox": 0.0211, "s0.loss_cls": 0.12879, "s0.acc": 95.6709, "s0.loss_bbox": 0.07617, "s1.loss_cls": 0.06049, "s1.acc": 96.03934, "s1.loss_bbox": 0.07143, "s2.loss_cls": 0.0291, "s2.acc": 96.06629, "s2.loss_bbox": 0.04174, "loss": 0.45066, "time": 1.56099}
{"mode": "train", "epoch": 25, "iter": 450, "lr": 1e-05, "memory": 28856, "data_time": 0.02123, "loss_rpn_cls": 0.01849, "loss_rpn_bbox": 0.02011, "s0.loss_cls": 0.11803, "s0.acc": 96.17627, "s0.loss_bbox": 0.06582, "s1.loss_cls": 0.05477, "s1.acc": 96.58028, "s1.loss_bbox": 0.06127, "s2.loss_cls": 0.0266, "s2.acc": 96.63398, "s2.loss_bbox": 0.03838, "loss": 0.40348, "time": 1.56475}
{"mode": "train", "epoch": 25, "iter": 500, "lr": 1e-05, "memory": 28856, "data_time": 0.02197, "loss_rpn_cls": 0.01952, "loss_rpn_bbox": 0.01798, "s0.loss_cls": 0.12439, "s0.acc": 95.82959, "s0.loss_bbox": 0.07339, "s1.loss_cls": 0.05643, "s1.acc": 96.27255, "s1.loss_bbox": 0.0707, "s2.loss_cls": 0.02745, "s2.acc": 96.30122, "s2.loss_bbox": 0.04192, "loss": 0.43179, "time": 1.56552}
{"mode": "train", "epoch": 25, "iter": 550, "lr": 1e-05, "memory": 28856, "data_time": 0.02165, "loss_rpn_cls": 0.02405, "loss_rpn_bbox": 0.02224, "s0.loss_cls": 0.13227, "s0.acc": 95.54688, "s0.loss_bbox": 0.07797, "s1.loss_cls": 0.06068, "s1.acc": 95.91788, "s1.loss_bbox": 0.07236, "s2.loss_cls": 0.02939, "s2.acc": 95.98185, "s2.loss_bbox": 0.04287, "loss": 0.46184, "time": 1.55786}
{"mode": "train", "epoch": 25, "iter": 600, "lr": 1e-05, "memory": 28856, "data_time": 0.02137, "loss_rpn_cls": 0.02029, "loss_rpn_bbox": 0.0213, "s0.loss_cls": 0.14615, "s0.acc": 95.30615, "s0.loss_bbox": 0.07782, "s1.loss_cls": 0.0688, "s1.acc": 95.60139, "s1.loss_bbox": 0.07495, "s2.loss_cls": 0.03428, "s2.acc": 95.53101, "s2.loss_bbox": 0.04545, "loss": 0.48904, "time": 1.56297}
{"mode": "val", "epoch": 25, "iter": 982, "lr": 1e-05, "bbox_mAP": 0.492, "bbox_mAP_50": 0.657, "bbox_mAP_75": 0.524, "bbox_mAP_s": 0.018, "bbox_mAP_m": 0.187, "bbox_mAP_l": 0.557, "bbox_mAP_copypaste": "0.492 0.657 0.524 0.018 0.187 0.557"}
{"mode": "train", "epoch": 26, "iter": 50, "lr": 1e-05, "memory": 28856, "data_time": 0.08481, "loss_rpn_cls": 0.01885, "loss_rpn_bbox": 0.02074, "s0.loss_cls": 0.12146, "s0.acc": 95.94336, "s0.loss_bbox": 0.06866, "s1.loss_cls": 0.05454, "s1.acc": 96.45119, "s1.loss_bbox": 0.06609, "s2.loss_cls": 0.02632, "s2.acc": 96.5465, "s2.loss_bbox": 0.04104, "loss": 0.41769, "time": 1.61701}
{"mode": "train", "epoch": 26, "iter": 100, "lr": 1e-05, "memory": 28856, "data_time": 0.02131, "loss_rpn_cls": 0.01431, "loss_rpn_bbox": 0.01652, "s0.loss_cls": 0.10988, "s0.acc": 96.38428, "s0.loss_bbox": 0.0611, "s1.loss_cls": 0.05023, "s1.acc": 96.71109, "s1.loss_bbox": 0.05938, "s2.loss_cls": 0.02447, "s2.acc": 96.75687, "s2.loss_bbox": 0.03666, "loss": 0.37255, "time": 1.54109}
{"mode": "train", "epoch": 26, "iter": 150, "lr": 1e-05, "memory": 28856, "data_time": 0.02137, "loss_rpn_cls": 0.01606, "loss_rpn_bbox": 0.01929, "s0.loss_cls": 0.12965, "s0.acc": 95.69238, "s0.loss_bbox": 0.07539, "s1.loss_cls": 0.05734, "s1.acc": 96.32786, "s1.loss_bbox": 0.07104, "s2.loss_cls": 0.02756, "s2.acc": 96.38085, "s2.loss_bbox": 0.04434, "loss": 0.44067, "time": 1.56209}
{"mode": "train", "epoch": 26, "iter": 200, "lr": 1e-05, "memory": 28856, "data_time": 0.02103, "loss_rpn_cls": 0.01776, "loss_rpn_bbox": 0.02116, "s0.loss_cls": 0.13769, "s0.acc": 95.43262, "s0.loss_bbox": 0.07961, "s1.loss_cls": 0.06125, "s1.acc": 95.94221, "s1.loss_bbox": 0.0735, "s2.loss_cls": 0.0297, "s2.acc": 96.04189, "s2.loss_bbox": 0.04372, "loss": 0.46439, "time": 1.54021}
{"mode": "train", "epoch": 26, "iter": 250, "lr": 1e-05, "memory": 28856, "data_time": 0.02143, "loss_rpn_cls": 0.01543, "loss_rpn_bbox": 0.01909, "s0.loss_cls": 0.12331, "s0.acc": 95.61426, "s0.loss_bbox": 0.07767, "s1.loss_cls": 0.05589, "s1.acc": 96.05504, "s1.loss_bbox": 0.07392, "s2.loss_cls": 0.02785, "s2.acc": 96.094, "s2.loss_bbox": 0.04474, "loss": 0.43789, "time": 1.56661}
{"mode": "train", "epoch": 26, "iter": 300, "lr": 1e-05, "memory": 28856, "data_time": 0.0218, "loss_rpn_cls": 0.01937, "loss_rpn_bbox": 0.02282, "s0.loss_cls": 0.13193, "s0.acc": 95.58594, "s0.loss_bbox": 0.07784, "s1.loss_cls": 0.0592, "s1.acc": 96.02899, "s1.loss_bbox": 0.07498, "s2.loss_cls": 0.02895, "s2.acc": 96.1162, "s2.loss_bbox": 0.0449, "loss": 0.45999, "time": 1.57959}
{"mode": "train", "epoch": 26, "iter": 350, "lr": 1e-05, "memory": 28856, "data_time": 0.02169, "loss_rpn_cls": 0.02011, "loss_rpn_bbox": 0.02162, "s0.loss_cls": 0.13403, "s0.acc": 95.55225, "s0.loss_bbox": 0.07843, "s1.loss_cls": 0.06029, "s1.acc": 96.06182, "s1.loss_bbox": 0.07405, "s2.loss_cls": 0.02905, "s2.acc": 96.0825, "s2.loss_bbox": 0.04515, "loss": 0.46272, "time": 1.57255}
{"mode": "train", "epoch": 26, "iter": 400, "lr": 1e-05, "memory": 28856, "data_time": 0.02143, "loss_rpn_cls": 0.02109, "loss_rpn_bbox": 0.02261, "s0.loss_cls": 0.12378, "s0.acc": 95.75488, "s0.loss_bbox": 0.07606, "s1.loss_cls": 0.05558, "s1.acc": 96.30034, "s1.loss_bbox": 0.0715, "s2.loss_cls": 0.02712, "s2.acc": 96.26597, "s2.loss_bbox": 0.04286, "loss": 0.44062, "time": 1.57857}
{"mode": "train", "epoch": 26, "iter": 450, "lr": 1e-05, "memory": 28856, "data_time": 0.02167, "loss_rpn_cls": 0.01839, "loss_rpn_bbox": 0.02, "s0.loss_cls": 0.11988, "s0.acc": 95.93896, "s0.loss_bbox": 0.07233, "s1.loss_cls": 0.0556, "s1.acc": 96.29694, "s1.loss_bbox": 0.06943, "s2.loss_cls": 0.0267, "s2.acc": 96.47761, "s2.loss_bbox": 0.04155, "loss": 0.42388, "time": 1.57573}
{"mode": "train", "epoch": 26, "iter": 500, "lr": 1e-05, "memory": 28856, "data_time": 0.0218, "loss_rpn_cls": 0.01992, "loss_rpn_bbox": 0.02434, "s0.loss_cls": 0.13631, "s0.acc": 95.35986, "s0.loss_bbox": 0.08244, "s1.loss_cls": 0.06073, "s1.acc": 95.97748, "s1.loss_bbox": 0.07712, "s2.loss_cls": 0.02955, "s2.acc": 96.08203, "s2.loss_bbox": 0.04554, "loss": 0.47595, "time": 1.55353}
{"mode": "train", "epoch": 26, "iter": 550, "lr": 1e-05, "memory": 28856, "data_time": 0.02128, "loss_rpn_cls": 0.01752, "loss_rpn_bbox": 0.02358, "s0.loss_cls": 0.12654, "s0.acc": 95.67432, "s0.loss_bbox": 0.07684, "s1.loss_cls": 0.05821, "s1.acc": 96.17767, "s1.loss_bbox": 0.07381, "s2.loss_cls": 0.02873, "s2.acc": 96.21807, "s2.loss_bbox": 0.04471, "loss": 0.44993, "time": 1.57119}
{"mode": "train", "epoch": 26, "iter": 600, "lr": 1e-05, "memory": 28856, "data_time": 0.02158, "loss_rpn_cls": 0.01448, "loss_rpn_bbox": 0.01901, "s0.loss_cls": 0.11675, "s0.acc": 96.00098, "s0.loss_bbox": 0.072, "s1.loss_cls": 0.0527, "s1.acc": 96.44203, "s1.loss_bbox": 0.0667, "s2.loss_cls": 0.02543, "s2.acc": 96.55786, "s2.loss_bbox": 0.03892, "loss": 0.40599, "time": 1.56023}
{"mode": "val", "epoch": 26, "iter": 982, "lr": 1e-05, "bbox_mAP": 0.521, "bbox_mAP_50": 0.686, "bbox_mAP_75": 0.55, "bbox_mAP_s": 0.019, "bbox_mAP_m": 0.203, "bbox_mAP_l": 0.588, "bbox_mAP_copypaste": "0.521 0.686 0.550 0.019 0.203 0.588"}
{"mode": "train", "epoch": 27, "iter": 50, "lr": 1e-05, "memory": 28856, "data_time": 0.08585, "loss_rpn_cls": 0.01446, "loss_rpn_bbox": 0.01803, "s0.loss_cls": 0.11395, "s0.acc": 96.07422, "s0.loss_bbox": 0.07062, "s1.loss_cls": 0.05062, "s1.acc": 96.58773, "s1.loss_bbox": 0.06912, "s2.loss_cls": 0.02386, "s2.acc": 96.69663, "s2.loss_bbox": 0.04121, "loss": 0.40188, "time": 1.62757}
{"mode": "train", "epoch": 27, "iter": 100, "lr": 1e-05, "memory": 28856, "data_time": 0.02172, "loss_rpn_cls": 0.02021, "loss_rpn_bbox": 0.02181, "s0.loss_cls": 0.12886, "s0.acc": 95.73242, "s0.loss_bbox": 0.07423, "s1.loss_cls": 0.05919, "s1.acc": 96.06227, "s1.loss_bbox": 0.0687, "s2.loss_cls": 0.02938, "s2.acc": 96.03962, "s2.loss_bbox": 0.04151, "loss": 0.44388, "time": 1.55434}
{"mode": "train", "epoch": 27, "iter": 150, "lr": 1e-05, "memory": 28856, "data_time": 0.02182, "loss_rpn_cls": 0.01791, "loss_rpn_bbox": 0.02121, "s0.loss_cls": 0.12569, "s0.acc": 95.59277, "s0.loss_bbox": 0.07426, "s1.loss_cls": 0.05633, "s1.acc": 96.09634, "s1.loss_bbox": 0.07363, "s2.loss_cls": 0.02738, "s2.acc": 96.19698, "s2.loss_bbox": 0.04547, "loss": 0.44188, "time": 1.55219}
{"mode": "train", "epoch": 27, "iter": 200, "lr": 1e-05, "memory": 28856, "data_time": 0.02263, "loss_rpn_cls": 0.01578, "loss_rpn_bbox": 0.02028, "s0.loss_cls": 0.12215, "s0.acc": 95.82959, "s0.loss_bbox": 0.07451, "s1.loss_cls": 0.05604, "s1.acc": 96.26858, "s1.loss_bbox": 0.06949, "s2.loss_cls": 0.02736, "s2.acc": 96.38567, "s2.loss_bbox": 0.04275, "loss": 0.42835, "time": 1.56358}
{"mode": "train", "epoch": 27, "iter": 250, "lr": 1e-05, "memory": 28856, "data_time": 0.02207, "loss_rpn_cls": 0.02062, "loss_rpn_bbox": 0.02265, "s0.loss_cls": 0.13366, "s0.acc": 95.40479, "s0.loss_bbox": 0.08436, "s1.loss_cls": 0.06, "s1.acc": 95.99529, "s1.loss_bbox": 0.0772, "s2.loss_cls": 0.02891, "s2.acc": 96.11222, "s2.loss_bbox": 0.04767, "loss": 0.47507, "time": 1.57376}
{"mode": "train", "epoch": 27, "iter": 300, "lr": 1e-05, "memory": 28856, "data_time": 0.02236, "loss_rpn_cls": 0.01786, "loss_rpn_bbox": 0.02031, "s0.loss_cls": 0.11753, "s0.acc": 95.99072, "s0.loss_bbox": 0.0744, "s1.loss_cls": 0.05236, "s1.acc": 96.45045, "s1.loss_bbox": 0.06887, "s2.loss_cls": 0.02561, "s2.acc": 96.47094, "s2.loss_bbox": 0.04172, "loss": 0.41866, "time": 1.5834}
{"mode": "train", "epoch": 27, "iter": 350, "lr": 1e-05, "memory": 28856, "data_time": 0.02294, "loss_rpn_cls": 0.0187, "loss_rpn_bbox": 0.01991, "s0.loss_cls": 0.11888, "s0.acc": 95.88965, "s0.loss_bbox": 0.07199, "s1.loss_cls": 0.05272, "s1.acc": 96.38855, "s1.loss_bbox": 0.07016, "s2.loss_cls": 0.02548, "s2.acc": 96.48991, "s2.loss_bbox": 0.04209, "loss": 0.41994, "time": 1.56006}
{"mode": "train", "epoch": 27, "iter": 400, "lr": 1e-05, "memory": 28856, "data_time": 0.02226, "loss_rpn_cls": 0.01634, "loss_rpn_bbox": 0.01929, "s0.loss_cls": 0.12219, "s0.acc": 95.75879, "s0.loss_bbox": 0.07301, "s1.loss_cls": 0.05467, "s1.acc": 96.26425, "s1.loss_bbox": 0.07113, "s2.loss_cls": 0.02658, "s2.acc": 96.30792, "s2.loss_bbox": 0.0435, "loss": 0.42671, "time": 1.56667}
{"mode": "train", "epoch": 27, "iter": 450, "lr": 1e-05, "memory": 28856, "data_time": 0.0222, "loss_rpn_cls": 0.01345, "loss_rpn_bbox": 0.01655, "s0.loss_cls": 0.10845, "s0.acc": 96.29785, "s0.loss_bbox": 0.06339, "s1.loss_cls": 0.04923, "s1.acc": 96.67926, "s1.loss_bbox": 0.06172, "s2.loss_cls": 0.02382, "s2.acc": 96.70714, "s2.loss_bbox": 0.03775, "loss": 0.37436, "time": 1.56514}
{"mode": "train", "epoch": 27, "iter": 500, "lr": 1e-05, "memory": 28856, "data_time": 0.02195, "loss_rpn_cls": 0.02057, "loss_rpn_bbox": 0.0251, "s0.loss_cls": 0.13734, "s0.acc": 95.26514, "s0.loss_bbox": 0.08618, "s1.loss_cls": 0.06138, "s1.acc": 95.84454, "s1.loss_bbox": 0.0804, "s2.loss_cls": 0.02933, "s2.acc": 95.93781, "s2.loss_bbox": 0.04736, "loss": 0.48765, "time": 1.54737}
{"mode": "train", "epoch": 27, "iter": 550, "lr": 1e-05, "memory": 28856, "data_time": 0.02218, "loss_rpn_cls": 0.01737, "loss_rpn_bbox": 0.02082, "s0.loss_cls": 0.11792, "s0.acc": 96.00635, "s0.loss_bbox": 0.06982, "s1.loss_cls": 0.05353, "s1.acc": 96.4444, "s1.loss_bbox": 0.06723, "s2.loss_cls": 0.02583, "s2.acc": 96.63479, "s2.loss_bbox": 0.04169, "loss": 0.4142, "time": 1.57173}
{"mode": "train", "epoch": 27, "iter": 600, "lr": 1e-05, "memory": 28856, "data_time": 0.02227, "loss_rpn_cls": 0.01799, "loss_rpn_bbox": 0.01887, "s0.loss_cls": 0.12734, "s0.acc": 95.70312, "s0.loss_bbox": 0.07605, "s1.loss_cls": 0.05599, "s1.acc": 96.26165, "s1.loss_bbox": 0.07075, "s2.loss_cls": 0.02667, "s2.acc": 96.48139, "s2.loss_bbox": 0.04156, "loss": 0.43522, "time": 1.56144}
{"mode": "val", "epoch": 27, "iter": 982, "lr": 1e-05, "bbox_mAP": 0.534, "bbox_mAP_50": 0.704, "bbox_mAP_75": 0.564, "bbox_mAP_s": 0.021, "bbox_mAP_m": 0.224, "bbox_mAP_l": 0.6, "bbox_mAP_copypaste": "0.534 0.704 0.564 0.021 0.224 0.600"}
{"mode": "train", "epoch": 28, "iter": 50, "lr": 0.0, "memory": 28856, "data_time": 0.0845, "loss_rpn_cls": 0.01515, "loss_rpn_bbox": 0.01683, "s0.loss_cls": 0.11643, "s0.acc": 96.04199, "s0.loss_bbox": 0.0704, "s1.loss_cls": 0.05076, "s1.acc": 96.56747, "s1.loss_bbox": 0.06727, "s2.loss_cls": 0.02451, "s2.acc": 96.59754, "s2.loss_bbox": 0.04183, "loss": 0.40318, "time": 1.60817}
{"mode": "train", "epoch": 28, "iter": 100, "lr": 0.0, "memory": 28856, "data_time": 0.02171, "loss_rpn_cls": 0.01919, "loss_rpn_bbox": 0.02492, "s0.loss_cls": 0.12946, "s0.acc": 95.5332, "s0.loss_bbox": 0.0834, "s1.loss_cls": 0.0568, "s1.acc": 96.125, "s1.loss_bbox": 0.07662, "s2.loss_cls": 0.02688, "s2.acc": 96.32336, "s2.loss_bbox": 0.04501, "loss": 0.46229, "time": 1.55638}
{"mode": "train", "epoch": 28, "iter": 150, "lr": 0.0, "memory": 28856, "data_time": 0.02185, "loss_rpn_cls": 0.01583, "loss_rpn_bbox": 0.01922, "s0.loss_cls": 0.11368, "s0.acc": 96.03711, "s0.loss_bbox": 0.07379, "s1.loss_cls": 0.051, "s1.acc": 96.5516, "s1.loss_bbox": 0.06963, "s2.loss_cls": 0.02467, "s2.acc": 96.60531, "s2.loss_bbox": 0.04441, "loss": 0.41223, "time": 1.57255}
{"mode": "train", "epoch": 28, "iter": 200, "lr": 0.0, "memory": 28856, "data_time": 0.02101, "loss_rpn_cls": 0.01739, "loss_rpn_bbox": 0.01861, "s0.loss_cls": 0.11835, "s0.acc": 95.94727, "s0.loss_bbox": 0.06976, "s1.loss_cls": 0.05278, "s1.acc": 96.43119, "s1.loss_bbox": 0.0664, "s2.loss_cls": 0.02563, "s2.acc": 96.4791, "s2.loss_bbox": 0.04197, "loss": 0.41089, "time": 1.55875}
{"mode": "train", "epoch": 28, "iter": 250, "lr": 0.0, "memory": 28856, "data_time": 0.02146, "loss_rpn_cls": 0.01747, "loss_rpn_bbox": 0.02368, "s0.loss_cls": 0.12119, "s0.acc": 95.81201, "s0.loss_bbox": 0.0737, "s1.loss_cls": 0.05449, "s1.acc": 96.29629, "s1.loss_bbox": 0.06893, "s2.loss_cls": 0.02632, "s2.acc": 96.42108, "s2.loss_bbox": 0.03902, "loss": 0.4248, "time": 1.56516}
{"mode": "train", "epoch": 28, "iter": 300, "lr": 0.0, "memory": 28856, "data_time": 0.02148, "loss_rpn_cls": 0.01731, "loss_rpn_bbox": 0.01972, "s0.loss_cls": 0.12236, "s0.acc": 95.72217, "s0.loss_bbox": 0.07485, "s1.loss_cls": 0.05446, "s1.acc": 96.26721, "s1.loss_bbox": 0.07086, "s2.loss_cls": 0.02691, "s2.acc": 96.34234, "s2.loss_bbox": 0.04287, "loss": 0.42934, "time": 1.54671}
{"mode": "train", "epoch": 28, "iter": 350, "lr": 0.0, "memory": 28856, "data_time": 0.02105, "loss_rpn_cls": 0.01682, "loss_rpn_bbox": 0.0216, "s0.loss_cls": 0.11684, "s0.acc": 96.03467, "s0.loss_bbox": 0.07042, "s1.loss_cls": 0.05172, "s1.acc": 96.52942, "s1.loss_bbox": 0.06704, "s2.loss_cls": 0.02465, "s2.acc": 96.65336, "s2.loss_bbox": 0.04091, "loss": 0.40999, "time": 1.56848}
{"mode": "train", "epoch": 28, "iter": 400, "lr": 0.0, "memory": 28856, "data_time": 0.0216, "loss_rpn_cls": 0.0193, "loss_rpn_bbox": 0.02067, "s0.loss_cls": 0.12963, "s0.acc": 95.66406, "s0.loss_bbox": 0.0766, "s1.loss_cls": 0.05788, "s1.acc": 96.2263, "s1.loss_bbox": 0.0709, "s2.loss_cls": 0.02793, "s2.acc": 96.22777, "s2.loss_bbox": 0.04177, "loss": 0.44467, "time": 1.56289}
{"mode": "train", "epoch": 28, "iter": 450, "lr": 0.0, "memory": 28856, "data_time": 0.0223, "loss_rpn_cls": 0.01696, "loss_rpn_bbox": 0.01972, "s0.loss_cls": 0.11298, "s0.acc": 96.07178, "s0.loss_bbox": 0.06971, "s1.loss_cls": 0.04944, "s1.acc": 96.63974, "s1.loss_bbox": 0.06678, "s2.loss_cls": 0.02378, "s2.acc": 96.66045, "s2.loss_bbox": 0.04007, "loss": 0.39944, "time": 1.56609}
{"mode": "train", "epoch": 28, "iter": 500, "lr": 0.0, "memory": 28856, "data_time": 0.02121, "loss_rpn_cls": 0.01586, "loss_rpn_bbox": 0.02105, "s0.loss_cls": 0.12828, "s0.acc": 95.73633, "s0.loss_bbox": 0.0764, "s1.loss_cls": 0.05661, "s1.acc": 96.26028, "s1.loss_bbox": 0.0726, "s2.loss_cls": 0.02645, "s2.acc": 96.37979, "s2.loss_bbox": 0.04411, "loss": 0.44136, "time": 1.55084}
{"mode": "train", "epoch": 28, "iter": 550, "lr": 0.0, "memory": 28856, "data_time": 0.02134, "loss_rpn_cls": 0.01743, "loss_rpn_bbox": 0.01855, "s0.loss_cls": 0.12236, "s0.acc": 95.75684, "s0.loss_bbox": 0.07653, "s1.loss_cls": 0.05438, "s1.acc": 96.26737, "s1.loss_bbox": 0.07398, "s2.loss_cls": 0.02664, "s2.acc": 96.27786, "s2.loss_bbox": 0.04485, "loss": 0.43472, "time": 1.55696}
{"mode": "train", "epoch": 28, "iter": 600, "lr": 0.0, "memory": 28856, "data_time": 0.02158, "loss_rpn_cls": 0.01614, "loss_rpn_bbox": 0.02053, "s0.loss_cls": 0.11694, "s0.acc": 95.93896, "s0.loss_bbox": 0.07438, "s1.loss_cls": 0.05298, "s1.acc": 96.4169, "s1.loss_bbox": 0.07027, "s2.loss_cls": 0.02561, "s2.acc": 96.46857, "s2.loss_bbox": 0.04214, "loss": 0.41898, "time": 1.55209}
{"mode": "val", "epoch": 28, "iter": 982, "lr": 0.0, "bbox_mAP": 0.547, "bbox_mAP_50": 0.717, "bbox_mAP_75": 0.578, "bbox_mAP_s": 0.024, "bbox_mAP_m": 0.228, "bbox_mAP_l": 0.614, "bbox_mAP_copypaste": "0.547 0.717 0.578 0.024 0.228 0.614"}
{"mode": "train", "epoch": 29, "iter": 50, "lr": 0.0, "memory": 28856, "data_time": 0.08535, "loss_rpn_cls": 0.01649, "loss_rpn_bbox": 0.01906, "s0.loss_cls": 0.11381, "s0.acc": 96.11621, "s0.loss_bbox": 0.06972, "s1.loss_cls": 0.0507, "s1.acc": 96.60638, "s1.loss_bbox": 0.06693, "s2.loss_cls": 0.02468, "s2.acc": 96.68423, "s2.loss_bbox": 0.04103, "loss": 0.40242, "time": 1.61172}
{"mode": "train", "epoch": 29, "iter": 100, "lr": 0.0, "memory": 28856, "data_time": 0.02187, "loss_rpn_cls": 0.01593, "loss_rpn_bbox": 0.02041, "s0.loss_cls": 0.12182, "s0.acc": 95.82812, "s0.loss_bbox": 0.0773, "s1.loss_cls": 0.0526, "s1.acc": 96.48435, "s1.loss_bbox": 0.07279, "s2.loss_cls": 0.02509, "s2.acc": 96.5862, "s2.loss_bbox": 0.04403, "loss": 0.42998, "time": 1.56579}
{"mode": "train", "epoch": 29, "iter": 150, "lr": 0.0, "memory": 28856, "data_time": 0.02183, "loss_rpn_cls": 0.01766, "loss_rpn_bbox": 0.02339, "s0.loss_cls": 0.12483, "s0.acc": 95.6416, "s0.loss_bbox": 0.07823, "s1.loss_cls": 0.05508, "s1.acc": 96.17653, "s1.loss_bbox": 0.0736, "s2.loss_cls": 0.02643, "s2.acc": 96.3084, "s2.loss_bbox": 0.04276, "loss": 0.44198, "time": 1.55858}
{"mode": "train", "epoch": 29, "iter": 200, "lr": 0.0, "memory": 28856, "data_time": 0.02229, "loss_rpn_cls": 0.01755, "loss_rpn_bbox": 0.01836, "s0.loss_cls": 0.11831, "s0.acc": 95.93994, "s0.loss_bbox": 0.07385, "s1.loss_cls": 0.05209, "s1.acc": 96.45568, "s1.loss_bbox": 0.07217, "s2.loss_cls": 0.02512, "s2.acc": 96.6261, "s2.loss_bbox": 0.0435, "loss": 0.42095, "time": 1.55444}
{"mode": "train", "epoch": 29, "iter": 250, "lr": 0.0, "memory": 28856, "data_time": 0.02222, "loss_rpn_cls": 0.01565, "loss_rpn_bbox": 0.01847, "s0.loss_cls": 0.11591, "s0.acc": 95.97461, "s0.loss_bbox": 0.07024, "s1.loss_cls": 0.05117, "s1.acc": 96.48386, "s1.loss_bbox": 0.07019, "s2.loss_cls": 0.02479, "s2.acc": 96.45231, "s2.loss_bbox": 0.04261, "loss": 0.40902, "time": 1.5713}
{"mode": "train", "epoch": 29, "iter": 300, "lr": 0.0, "memory": 28856, "data_time": 0.0219, "loss_rpn_cls": 0.0207, "loss_rpn_bbox": 0.02056, "s0.loss_cls": 0.12314, "s0.acc": 95.72119, "s0.loss_bbox": 0.0767, "s1.loss_cls": 0.0558, "s1.acc": 96.14184, "s1.loss_bbox": 0.07275, "s2.loss_cls": 0.02695, "s2.acc": 96.16905, "s2.loss_bbox": 0.0441, "loss": 0.4407, "time": 1.58086}
{"mode": "train", "epoch": 29, "iter": 350, "lr": 0.0, "memory": 28856, "data_time": 0.02179, "loss_rpn_cls": 0.01651, "loss_rpn_bbox": 0.01901, "s0.loss_cls": 0.11141, "s0.acc": 96.26758, "s0.loss_bbox": 0.06934, "s1.loss_cls": 0.04926, "s1.acc": 96.75653, "s1.loss_bbox": 0.06336, "s2.loss_cls": 0.02333, "s2.acc": 96.79421, "s2.loss_bbox": 0.03781, "loss": 0.39002, "time": 1.55768}
{"mode": "train", "epoch": 29, "iter": 400, "lr": 0.0, "memory": 28856, "data_time": 0.02183, "loss_rpn_cls": 0.01834, "loss_rpn_bbox": 0.02247, "s0.loss_cls": 0.12172, "s0.acc": 95.8208, "s0.loss_bbox": 0.07509, "s1.loss_cls": 0.055, "s1.acc": 96.34245, "s1.loss_bbox": 0.07256, "s2.loss_cls": 0.02696, "s2.acc": 96.31773, "s2.loss_bbox": 0.04321, "loss": 0.43535, "time": 1.56865}
{"mode": "train", "epoch": 29, "iter": 450, "lr": 0.0, "memory": 28856, "data_time": 0.02213, "loss_rpn_cls": 0.01712, "loss_rpn_bbox": 0.02205, "s0.loss_cls": 0.12417, "s0.acc": 95.74707, "s0.loss_bbox": 0.07651, "s1.loss_cls": 0.05509, "s1.acc": 96.25613, "s1.loss_bbox": 0.07138, "s2.loss_cls": 0.02632, "s2.acc": 96.29559, "s2.loss_bbox": 0.04381, "loss": 0.43645, "time": 1.55849}
{"mode": "train", "epoch": 29, "iter": 500, "lr": 0.0, "memory": 28856, "data_time": 0.02242, "loss_rpn_cls": 0.01557, "loss_rpn_bbox": 0.01901, "s0.loss_cls": 0.12387, "s0.acc": 95.81885, "s0.loss_bbox": 0.07041, "s1.loss_cls": 0.05581, "s1.acc": 96.28517, "s1.loss_bbox": 0.06799, "s2.loss_cls": 0.02641, "s2.acc": 96.44463, "s2.loss_bbox": 0.04077, "loss": 0.41984, "time": 1.56947}
{"mode": "train", "epoch": 29, "iter": 550, "lr": 0.0, "memory": 28856, "data_time": 0.02178, "loss_rpn_cls": 0.01908, "loss_rpn_bbox": 0.02235, "s0.loss_cls": 0.12225, "s0.acc": 95.77588, "s0.loss_bbox": 0.07638, "s1.loss_cls": 0.05352, "s1.acc": 96.40285, "s1.loss_bbox": 0.07291, "s2.loss_cls": 0.02568, "s2.acc": 96.39309, "s2.loss_bbox": 0.04329, "loss": 0.43546, "time": 1.56811}
{"mode": "train", "epoch": 29, "iter": 600, "lr": 0.0, "memory": 28856, "data_time": 0.02247, "loss_rpn_cls": 0.01651, "loss_rpn_bbox": 0.01944, "s0.loss_cls": 0.1159, "s0.acc": 96.10498, "s0.loss_bbox": 0.06791, "s1.loss_cls": 0.05138, "s1.acc": 96.60362, "s1.loss_bbox": 0.06303, "s2.loss_cls": 0.02435, "s2.acc": 96.81303, "s2.loss_bbox": 0.03834, "loss": 0.39688, "time": 1.57077}
{"mode": "val", "epoch": 29, "iter": 982, "lr": 0.0, "bbox_mAP": 0.549, "bbox_mAP_50": 0.719, "bbox_mAP_75": 0.582, "bbox_mAP_s": 0.025, "bbox_mAP_m": 0.233, "bbox_mAP_l": 0.616, "bbox_mAP_copypaste": "0.549 0.719 0.582 0.025 0.233 0.616"}
{"mode": "train", "epoch": 30, "iter": 50, "lr": 0.0, "memory": 28856, "data_time": 0.08591, "loss_rpn_cls": 0.01905, "loss_rpn_bbox": 0.02092, "s0.loss_cls": 0.12065, "s0.acc": 95.84277, "s0.loss_bbox": 0.07522, "s1.loss_cls": 0.05433, "s1.acc": 96.27875, "s1.loss_bbox": 0.07176, "s2.loss_cls": 0.02701, "s2.acc": 96.29176, "s2.loss_bbox": 0.04313, "loss": 0.43206, "time": 1.65031}
{"mode": "train", "epoch": 30, "iter": 100, "lr": 0.0, "memory": 28856, "data_time": 0.02172, "loss_rpn_cls": 0.01747, "loss_rpn_bbox": 0.01962, "s0.loss_cls": 0.11815, "s0.acc": 95.98389, "s0.loss_bbox": 0.07337, "s1.loss_cls": 0.05172, "s1.acc": 96.56813, "s1.loss_bbox": 0.06873, "s2.loss_cls": 0.02463, "s2.acc": 96.65991, "s2.loss_bbox": 0.04187, "loss": 0.41557, "time": 1.56174}
{"mode": "train", "epoch": 30, "iter": 150, "lr": 0.0, "memory": 28856, "data_time": 0.02147, "loss_rpn_cls": 0.01522, "loss_rpn_bbox": 0.01966, "s0.loss_cls": 0.11141, "s0.acc": 96.11279, "s0.loss_bbox": 0.06927, "s1.loss_cls": 0.05078, "s1.acc": 96.49157, "s1.loss_bbox": 0.0656, "s2.loss_cls": 0.02436, "s2.acc": 96.58406, "s2.loss_bbox": 0.03972, "loss": 0.39602, "time": 1.54946}
{"mode": "train", "epoch": 30, "iter": 200, "lr": 0.0, "memory": 28856, "data_time": 0.02194, "loss_rpn_cls": 0.016, "loss_rpn_bbox": 0.01944, "s0.loss_cls": 0.10967, "s0.acc": 96.11426, "s0.loss_bbox": 0.06982, "s1.loss_cls": 0.04791, "s1.acc": 96.64484, "s1.loss_bbox": 0.06492, "s2.loss_cls": 0.02315, "s2.acc": 96.86233, "s2.loss_bbox": 0.0386, "loss": 0.3895, "time": 1.55634}
{"mode": "train", "epoch": 30, "iter": 250, "lr": 0.0, "memory": 28856, "data_time": 0.02167, "loss_rpn_cls": 0.01561, "loss_rpn_bbox": 0.01749, "s0.loss_cls": 0.10711, "s0.acc": 96.28125, "s0.loss_bbox": 0.06656, "s1.loss_cls": 0.04592, "s1.acc": 96.98903, "s1.loss_bbox": 0.06634, "s2.loss_cls": 0.02212, "s2.acc": 96.95035, "s2.loss_bbox": 0.04064, "loss": 0.3818, "time": 1.5647}
{"mode": "train", "epoch": 30, "iter": 300, "lr": 0.0, "memory": 28856, "data_time": 0.02154, "loss_rpn_cls": 0.01796, "loss_rpn_bbox": 0.02207, "s0.loss_cls": 0.13171, "s0.acc": 95.40479, "s0.loss_bbox": 0.08391, "s1.loss_cls": 0.0584, "s1.acc": 95.98619, "s1.loss_bbox": 0.0787, "s2.loss_cls": 0.02781, "s2.acc": 96.09588, "s2.loss_bbox": 0.04752, "loss": 0.46806, "time": 1.55001}
{"mode": "train", "epoch": 30, "iter": 350, "lr": 0.0, "memory": 28856, "data_time": 0.0221, "loss_rpn_cls": 0.01816, "loss_rpn_bbox": 0.02247, "s0.loss_cls": 0.13751, "s0.acc": 95.28857, "s0.loss_bbox": 0.08475, "s1.loss_cls": 0.06137, "s1.acc": 95.82796, "s1.loss_bbox": 0.079, "s2.loss_cls": 0.0296, "s2.acc": 95.95222, "s2.loss_bbox": 0.04692, "loss": 0.4798, "time": 1.56816}
{"mode": "train", "epoch": 30, "iter": 400, "lr": 0.0, "memory": 28856, "data_time": 0.02196, "loss_rpn_cls": 0.01501, "loss_rpn_bbox": 0.01893, "s0.loss_cls": 0.11448, "s0.acc": 96.15771, "s0.loss_bbox": 0.07105, "s1.loss_cls": 0.05051, "s1.acc": 96.73569, "s1.loss_bbox": 0.06735, "s2.loss_cls": 0.02412, "s2.acc": 96.8118, "s2.loss_bbox": 0.03982, "loss": 0.40127, "time": 1.55881}
{"mode": "train", "epoch": 30, "iter": 450, "lr": 0.0, "memory": 28856, "data_time": 0.02227, "loss_rpn_cls": 0.01433, "loss_rpn_bbox": 0.01894, "s0.loss_cls": 0.1177, "s0.acc": 95.94873, "s0.loss_bbox": 0.07226, "s1.loss_cls": 0.0529, "s1.acc": 96.30353, "s1.loss_bbox": 0.07, "s2.loss_cls": 0.02514, "s2.acc": 96.47337, "s2.loss_bbox": 0.04171, "loss": 0.41297, "time": 1.55326}
{"mode": "train", "epoch": 30, "iter": 500, "lr": 0.0, "memory": 28856, "data_time": 0.02227, "loss_rpn_cls": 0.01631, "loss_rpn_bbox": 0.02137, "s0.loss_cls": 0.11597, "s0.acc": 95.96436, "s0.loss_bbox": 0.07215, "s1.loss_cls": 0.05202, "s1.acc": 96.39589, "s1.loss_bbox": 0.07065, "s2.loss_cls": 0.02572, "s2.acc": 96.46488, "s2.loss_bbox": 0.04164, "loss": 0.41582, "time": 1.56294}
{"mode": "train", "epoch": 30, "iter": 550, "lr": 0.0, "memory": 28856, "data_time": 0.02184, "loss_rpn_cls": 0.01623, "loss_rpn_bbox": 0.01976, "s0.loss_cls": 0.11644, "s0.acc": 96.02979, "s0.loss_bbox": 0.06783, "s1.loss_cls": 0.0522, "s1.acc": 96.50124, "s1.loss_bbox": 0.06553, "s2.loss_cls": 0.02505, "s2.acc": 96.54355, "s2.loss_bbox": 0.04005, "loss": 0.4031, "time": 1.54665}
{"mode": "train", "epoch": 30, "iter": 600, "lr": 0.0, "memory": 28856, "data_time": 0.022, "loss_rpn_cls": 0.02085, "loss_rpn_bbox": 0.02186, "s0.loss_cls": 0.12096, "s0.acc": 95.9458, "s0.loss_bbox": 0.07017, "s1.loss_cls": 0.05303, "s1.acc": 96.48808, "s1.loss_bbox": 0.0667, "s2.loss_cls": 0.02584, "s2.acc": 96.54804, "s2.loss_bbox": 0.04067, "loss": 0.42008, "time": 1.55658}
{"mode": "val", "epoch": 30, "iter": 982, "lr": 0.0, "bbox_mAP": 0.554, "bbox_mAP_50": 0.723, "bbox_mAP_75": 0.587, "bbox_mAP_s": 0.026, "bbox_mAP_m": 0.239, "bbox_mAP_l": 0.62, "bbox_mAP_copypaste": "0.554 0.723 0.587 0.026 0.239 0.620"}
