{"mmdet_version": "2.22.0", "CLASSES": ["General trash", "Paper", "Paper pack", "Metal", "Glass", "Plastic", "Styrofoam", "Plastic bag", "Battery", "Clothing"], "env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-PCIE-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.5\nMMCV: 1.4.6\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.22.0+", "config": "model = dict(\n    type='HybridTaskCascade',\n    backbone=dict(\n        type='SwinTransformer',\n        embed_dims=128,\n        depths=[2, 2, 18, 2],\n        num_heads=[4, 8, 16, 32],\n        window_size=7,\n        mlp_ratio=4,\n        qkv_bias=True,\n        qk_scale=None,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.2,\n        patch_norm=True,\n        out_indices=(0, 1, 2, 3),\n        with_cp=False,\n        convert_weights=True,\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_base_patch4_window7_224_22k.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[128, 256, 512, 1024],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[2, 4],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='HybridTaskCascadeRoIHead',\n        interleaved=True,\n        mask_info_flow=True,\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.001,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = '/opt/ml/detection/dataset/'\nclasses = ('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n           'Styrofoam', 'Plastic bag', 'Battery', 'Clothing')\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\nimg_scale = (1024, 1024)\nalbu_train_transforms = [\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Flip', p=1.0),\n            dict(type='RandomRotate90', p=1.0)\n        ],\n        p=0.5),\n    dict(\n        type='RandomResizedCrop',\n        height=1024,\n        width=1024,\n        scale=(0.5, 1.0),\n        p=0.5),\n    dict(\n        type='RandomBrightnessContrast',\n        brightness_limit=0.1,\n        contrast_limit=0.15,\n        p=0.5),\n    dict(\n        type='HueSaturationValue',\n        hue_shift_limit=15,\n        sat_shift_limit=25,\n        val_shift_limit=10,\n        p=0.5),\n    dict(type='GaussNoise', p=0.3),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Blur', p=1.0),\n            dict(type='GaussianBlur', p=1.0),\n            dict(type='MedianBlur', blur_limit=5, p=1.0),\n            dict(type='MotionBlur', p=1.0)\n        ],\n        p=0.1)\n]\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1024, 1024), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.0),\n    dict(\n        type='Albu',\n        transforms=[\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Flip', p=1.0),\n                    dict(type='RandomRotate90', p=1.0)\n                ],\n                p=0.5),\n            dict(\n                type='RandomResizedCrop',\n                height=1024,\n                width=1024,\n                scale=(0.5, 1.0),\n                p=0.5),\n            dict(\n                type='RandomBrightnessContrast',\n                brightness_limit=0.1,\n                contrast_limit=0.15,\n                p=0.5),\n            dict(\n                type='HueSaturationValue',\n                hue_shift_limit=15,\n                sat_shift_limit=25,\n                val_shift_limit=10,\n                p=0.5),\n            dict(type='GaussNoise', p=0.3),\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Blur', p=1.0),\n                    dict(type='GaussianBlur', p=1.0),\n                    dict(type='MedianBlur', blur_limit=5, p=1.0),\n                    dict(type='MotionBlur', p=1.0)\n                ],\n                p=0.1)\n        ],\n        bbox_params=dict(\n            type='BboxParams',\n            format='pascal_voc',\n            label_fields=['gt_labels'],\n            min_visibility=0.0,\n            filter_lost_elements=True),\n        keymap=dict(img='image', gt_bboxes='bboxes'),\n        update_pad_shape=False,\n        skip_img_without_anno=True),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\nval_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        ann_file=\n        '/opt/ml/detection/dataset/stratified_kfold/basic_v2/cv_train_3.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1024, 1024), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.0),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Flip', p=1.0),\n                            dict(type='RandomRotate90', p=1.0)\n                        ],\n                        p=0.5),\n                    dict(\n                        type='RandomResizedCrop',\n                        height=1024,\n                        width=1024,\n                        scale=(0.5, 1.0),\n                        p=0.5),\n                    dict(\n                        type='RandomBrightnessContrast',\n                        brightness_limit=0.1,\n                        contrast_limit=0.15,\n                        p=0.5),\n                    dict(\n                        type='HueSaturationValue',\n                        hue_shift_limit=15,\n                        sat_shift_limit=25,\n                        val_shift_limit=10,\n                        p=0.5),\n                    dict(type='GaussNoise', p=0.3),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(type='Blur', p=1.0),\n                            dict(type='GaussianBlur', p=1.0),\n                            dict(type='MedianBlur', blur_limit=5, p=1.0),\n                            dict(type='MotionBlur', p=1.0)\n                        ],\n                        p=0.1)\n                ],\n                bbox_params=dict(\n                    type='BboxParams',\n                    format='pascal_voc',\n                    label_fields=['gt_labels'],\n                    min_visibility=0.0,\n                    filter_lost_elements=True),\n                keymap=dict(img='image', gt_bboxes='bboxes'),\n                update_pad_shape=False,\n                skip_img_without_anno=True),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        ann_file=\n        '/opt/ml/detection/dataset/stratified_kfold/basic_v2/cv_val_3.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        classes=('General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n                 'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'),\n        ann_file='/opt/ml/detection/dataset/test.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox', classwise=True)\noptimizer = dict(\n    type='AdamW',\n    lr=0.0001,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='CosineAnnealing',\n    warmup='linear',\n    warmup_iters=976,\n    warmup_ratio=0.001,\n    min_lr=1e-06)\nrunner = dict(type='EpochBasedRunner', max_epochs=36)\ncheckpoint_config = dict(max_keep_ckpts=5, interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(\n            type='WandbLoggerHook',\n            interval=1000,\n            init_kwargs=dict(\n                project='two-stage-model',\n                entity='canvas11',\n                name='LEE_SwinB_HTC_RPN_CHANGED'))\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\npretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_base_patch4_window7_224_22k.pth'\nwork_dir = 'work_dirs/swinb_htc_rpn_changed'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1546523882, "exp_name": "htc_swin_b.py", "epoch": 32, "iter": 31232, "mmcv_version": "1.4.6", "time": "Tue Apr  5 01:35:15 2022", "hook_msgs": {"last_ckpt": "/opt/ml/detection/SEUNGHYUN_WORKSPACE/my_mmdetection/work_dirs/swinb_htc_rpn_changed/epoch_31.pth"}}
{"mode": "train", "epoch": 33, "iter": 50, "lr": 0.0, "memory": 25346, "data_time": 0.06313, "loss_rpn_cls": 0.00852, "loss_rpn_bbox": 0.0084, "s0.loss_cls": 0.0835, "s0.acc": 97.34082, "s0.loss_bbox": 0.04906, "s1.loss_cls": 0.02705, "s1.acc": 98.33984, "s1.loss_bbox": 0.02879, "s2.loss_cls": 0.00795, "s2.acc": 99.1416, "s2.loss_bbox": 0.00702, "loss": 0.22028, "time": 1.67395}
{"mode": "train", "epoch": 33, "iter": 100, "lr": 0.0, "memory": 25346, "data_time": 0.01249, "loss_rpn_cls": 0.0041, "loss_rpn_bbox": 0.00553, "s0.loss_cls": 0.06883, "s0.acc": 97.7793, "s0.loss_bbox": 0.0385, "s1.loss_cls": 0.02026, "s1.acc": 98.7168, "s1.loss_bbox": 0.02085, "s2.loss_cls": 0.00526, "s2.acc": 99.38086, "s2.loss_bbox": 0.00576, "loss": 0.1691, "time": 1.61994}
{"mode": "train", "epoch": 33, "iter": 150, "lr": 0.0, "memory": 25346, "data_time": 0.01235, "loss_rpn_cls": 0.00488, "loss_rpn_bbox": 0.00665, "s0.loss_cls": 0.06999, "s0.acc": 97.75488, "s0.loss_bbox": 0.0423, "s1.loss_cls": 0.02259, "s1.acc": 98.53418, "s1.loss_bbox": 0.0255, "s2.loss_cls": 0.00598, "s2.acc": 99.23145, "s2.loss_bbox": 0.00669, "loss": 0.18458, "time": 1.6309}
{"mode": "train", "epoch": 33, "iter": 200, "lr": 0.0, "memory": 25346, "data_time": 0.0121, "loss_rpn_cls": 0.01105, "loss_rpn_bbox": 0.00856, "s0.loss_cls": 0.07548, "s0.acc": 97.64941, "s0.loss_bbox": 0.0421, "s1.loss_cls": 0.02589, "s1.acc": 98.40137, "s1.loss_bbox": 0.02642, "s2.loss_cls": 0.00732, "s2.acc": 99.16992, "s2.loss_bbox": 0.00724, "loss": 0.20406, "time": 1.62258}
{"mode": "train", "epoch": 33, "iter": 250, "lr": 0.0, "memory": 25346, "data_time": 0.01237, "loss_rpn_cls": 0.00422, "loss_rpn_bbox": 0.00914, "s0.loss_cls": 0.09039, "s0.acc": 97.36719, "s0.loss_bbox": 0.04937, "s1.loss_cls": 0.0275, "s1.acc": 98.35059, "s1.loss_bbox": 0.0285, "s2.loss_cls": 0.00714, "s2.acc": 99.17871, "s2.loss_bbox": 0.00736, "loss": 0.22363, "time": 1.63626}
{"mode": "train", "epoch": 33, "iter": 300, "lr": 0.0, "memory": 25346, "data_time": 0.01232, "loss_rpn_cls": 0.00462, "loss_rpn_bbox": 0.00673, "s0.loss_cls": 0.09157, "s0.acc": 97.19531, "s0.loss_bbox": 0.04647, "s1.loss_cls": 0.02673, "s1.acc": 98.35645, "s1.loss_bbox": 0.02737, "s2.loss_cls": 0.00673, "s2.acc": 99.17969, "s2.loss_bbox": 0.00728, "loss": 0.2175, "time": 1.6329}
{"mode": "train", "epoch": 33, "iter": 350, "lr": 0.0, "memory": 25346, "data_time": 0.01253, "loss_rpn_cls": 0.00364, "loss_rpn_bbox": 0.00874, "s0.loss_cls": 0.0872, "s0.acc": 97.18555, "s0.loss_bbox": 0.05138, "s1.loss_cls": 0.02625, "s1.acc": 98.35059, "s1.loss_bbox": 0.02849, "s2.loss_cls": 0.00696, "s2.acc": 99.14453, "s2.loss_bbox": 0.00774, "loss": 0.22039, "time": 1.63081}
{"mode": "train", "epoch": 33, "iter": 400, "lr": 0.0, "memory": 25346, "data_time": 0.01241, "loss_rpn_cls": 0.00376, "loss_rpn_bbox": 0.00725, "s0.loss_cls": 0.07908, "s0.acc": 97.56836, "s0.loss_bbox": 0.04329, "s1.loss_cls": 0.02483, "s1.acc": 98.5293, "s1.loss_bbox": 0.02635, "s2.loss_cls": 0.00628, "s2.acc": 99.24219, "s2.loss_bbox": 0.0068, "loss": 0.19764, "time": 1.62878}
{"mode": "train", "epoch": 33, "iter": 450, "lr": 0.0, "memory": 25591, "data_time": 0.01294, "loss_rpn_cls": 0.00346, "loss_rpn_bbox": 0.00793, "s0.loss_cls": 0.08944, "s0.acc": 97.31055, "s0.loss_bbox": 0.04886, "s1.loss_cls": 0.02679, "s1.acc": 98.34668, "s1.loss_bbox": 0.02827, "s2.loss_cls": 0.00738, "s2.acc": 99.0918, "s2.loss_bbox": 0.00812, "loss": 0.22025, "time": 1.6288}
{"mode": "train", "epoch": 33, "iter": 500, "lr": 0.0, "memory": 25591, "data_time": 0.01199, "loss_rpn_cls": 0.00339, "loss_rpn_bbox": 0.00692, "s0.loss_cls": 0.06139, "s0.acc": 97.94238, "s0.loss_bbox": 0.03811, "s1.loss_cls": 0.01934, "s1.acc": 98.68652, "s1.loss_bbox": 0.02394, "s2.loss_cls": 0.00511, "s2.acc": 99.31543, "s2.loss_bbox": 0.00697, "loss": 0.16517, "time": 1.62529}
{"mode": "train", "epoch": 33, "iter": 550, "lr": 0.0, "memory": 25591, "data_time": 0.01222, "loss_rpn_cls": 0.00396, "loss_rpn_bbox": 0.00671, "s0.loss_cls": 0.06632, "s0.acc": 97.80371, "s0.loss_bbox": 0.04127, "s1.loss_cls": 0.01997, "s1.acc": 98.75195, "s1.loss_bbox": 0.02373, "s2.loss_cls": 0.00571, "s2.acc": 99.30273, "s2.loss_bbox": 0.00672, "loss": 0.17438, "time": 1.62934}
{"mode": "train", "epoch": 33, "iter": 600, "lr": 0.0, "memory": 25591, "data_time": 0.01245, "loss_rpn_cls": 0.00337, "loss_rpn_bbox": 0.0067, "s0.loss_cls": 0.07884, "s0.acc": 97.3623, "s0.loss_bbox": 0.04821, "s1.loss_cls": 0.02511, "s1.acc": 98.375, "s1.loss_bbox": 0.02846, "s2.loss_cls": 0.00668, "s2.acc": 99.14551, "s2.loss_bbox": 0.0076, "loss": 0.20496, "time": 1.63472}
{"mode": "train", "epoch": 33, "iter": 650, "lr": 0.0, "memory": 25591, "data_time": 0.01237, "loss_rpn_cls": 0.00339, "loss_rpn_bbox": 0.00631, "s0.loss_cls": 0.07227, "s0.acc": 97.61328, "s0.loss_bbox": 0.04136, "s1.loss_cls": 0.0217, "s1.acc": 98.56543, "s1.loss_bbox": 0.02468, "s2.loss_cls": 0.00613, "s2.acc": 99.24121, "s2.loss_bbox": 0.00731, "loss": 0.18314, "time": 1.62873}
{"mode": "train", "epoch": 33, "iter": 700, "lr": 0.0, "memory": 25591, "data_time": 0.0119, "loss_rpn_cls": 0.0052, "loss_rpn_bbox": 0.00938, "s0.loss_cls": 0.09304, "s0.acc": 96.92676, "s0.loss_bbox": 0.0556, "s1.loss_cls": 0.02866, "s1.acc": 98.11914, "s1.loss_bbox": 0.03225, "s2.loss_cls": 0.0077, "s2.acc": 98.99707, "s2.loss_bbox": 0.00874, "loss": 0.24058, "time": 1.62587}
{"mode": "train", "epoch": 33, "iter": 750, "lr": 0.0, "memory": 25591, "data_time": 0.01208, "loss_rpn_cls": 0.00377, "loss_rpn_bbox": 0.00773, "s0.loss_cls": 0.08049, "s0.acc": 97.375, "s0.loss_bbox": 0.0523, "s1.loss_cls": 0.0254, "s1.acc": 98.33105, "s1.loss_bbox": 0.03103, "s2.loss_cls": 0.00656, "s2.acc": 99.17969, "s2.loss_bbox": 0.00781, "loss": 0.21508, "time": 1.63358}
{"mode": "train", "epoch": 33, "iter": 800, "lr": 0.0, "memory": 25591, "data_time": 0.0125, "loss_rpn_cls": 0.00581, "loss_rpn_bbox": 0.00801, "s0.loss_cls": 0.08322, "s0.acc": 97.4043, "s0.loss_bbox": 0.04811, "s1.loss_cls": 0.02528, "s1.acc": 98.40625, "s1.loss_bbox": 0.02742, "s2.loss_cls": 0.00656, "s2.acc": 99.23242, "s2.loss_bbox": 0.00761, "loss": 0.21204, "time": 1.63614}
{"mode": "train", "epoch": 33, "iter": 850, "lr": 0.0, "memory": 25591, "data_time": 0.01262, "loss_rpn_cls": 0.00335, "loss_rpn_bbox": 0.00732, "s0.loss_cls": 0.08734, "s0.acc": 97.36426, "s0.loss_bbox": 0.04613, "s1.loss_cls": 0.02714, "s1.acc": 98.38184, "s1.loss_bbox": 0.02738, "s2.loss_cls": 0.00713, "s2.acc": 99.1709, "s2.loss_bbox": 0.00722, "loss": 0.21301, "time": 1.62868}
{"mode": "train", "epoch": 33, "iter": 900, "lr": 0.0, "memory": 25591, "data_time": 0.01225, "loss_rpn_cls": 0.00515, "loss_rpn_bbox": 0.00887, "s0.loss_cls": 0.09354, "s0.acc": 97.05566, "s0.loss_bbox": 0.05134, "s1.loss_cls": 0.02811, "s1.acc": 98.19336, "s1.loss_bbox": 0.03045, "s2.loss_cls": 0.00741, "s2.acc": 99.10254, "s2.loss_bbox": 0.00806, "loss": 0.23294, "time": 1.6231}
{"mode": "train", "epoch": 33, "iter": 950, "lr": 0.0, "memory": 25591, "data_time": 0.01304, "loss_rpn_cls": 0.00775, "loss_rpn_bbox": 0.00774, "s0.loss_cls": 0.08292, "s0.acc": 97.38965, "s0.loss_bbox": 0.04806, "s1.loss_cls": 0.02624, "s1.acc": 98.3291, "s1.loss_bbox": 0.02835, "s2.loss_cls": 0.0066, "s2.acc": 99.22949, "s2.loss_bbox": 0.00689, "loss": 0.21457, "time": 1.63239}
{"mode": "train", "epoch": 33, "iter": 1000, "lr": 0.0, "memory": 25591, "data_time": 0.01273, "loss_rpn_cls": 0.0049, "loss_rpn_bbox": 0.00824, "s0.loss_cls": 0.08509, "s0.acc": 97.18555, "s0.loss_bbox": 0.05019, "s1.loss_cls": 0.02795, "s1.acc": 98.16113, "s1.loss_bbox": 0.02972, "s2.loss_cls": 0.00734, "s2.acc": 99.07715, "s2.loss_bbox": 0.00806, "loss": 0.22149, "time": 1.62823}
{"mode": "train", "epoch": 33, "iter": 1050, "lr": 0.0, "memory": 25591, "data_time": 0.01255, "loss_rpn_cls": 0.00319, "loss_rpn_bbox": 0.00854, "s0.loss_cls": 0.08013, "s0.acc": 97.28418, "s0.loss_bbox": 0.04701, "s1.loss_cls": 0.02739, "s1.acc": 98.15234, "s1.loss_bbox": 0.0304, "s2.loss_cls": 0.00727, "s2.acc": 99.06836, "s2.loss_bbox": 0.00828, "loss": 0.21221, "time": 1.63265}
{"mode": "train", "epoch": 33, "iter": 1100, "lr": 0.0, "memory": 25591, "data_time": 0.01237, "loss_rpn_cls": 0.00261, "loss_rpn_bbox": 0.00852, "s0.loss_cls": 0.07256, "s0.acc": 97.42285, "s0.loss_bbox": 0.04477, "s1.loss_cls": 0.02434, "s1.acc": 98.32617, "s1.loss_bbox": 0.02978, "s2.loss_cls": 0.00662, "s2.acc": 99.0957, "s2.loss_bbox": 0.00823, "loss": 0.19743, "time": 1.62885}
{"mode": "train", "epoch": 33, "iter": 1150, "lr": 0.0, "memory": 25591, "data_time": 0.01219, "loss_rpn_cls": 0.0037, "loss_rpn_bbox": 0.00757, "s0.loss_cls": 0.0789, "s0.acc": 97.5166, "s0.loss_bbox": 0.04341, "s1.loss_cls": 0.02537, "s1.acc": 98.42285, "s1.loss_bbox": 0.02627, "s2.loss_cls": 0.00641, "s2.acc": 99.21875, "s2.loss_bbox": 0.00719, "loss": 0.19881, "time": 1.61699}
{"mode": "train", "epoch": 33, "iter": 1200, "lr": 0.0, "memory": 25591, "data_time": 0.0125, "loss_rpn_cls": 0.00283, "loss_rpn_bbox": 0.00676, "s0.loss_cls": 0.06148, "s0.acc": 97.97168, "s0.loss_bbox": 0.0374, "s1.loss_cls": 0.02034, "s1.acc": 98.63477, "s1.loss_bbox": 0.02438, "s2.loss_cls": 0.00522, "s2.acc": 99.28516, "s2.loss_bbox": 0.00732, "loss": 0.16572, "time": 1.61616}
{"mode": "val", "epoch": 33, "iter": 982, "lr": 0.0, "bbox_mAP": 0.499, "bbox_mAP_50": 0.673, "bbox_mAP_75": 0.541, "bbox_mAP_s": 0.027, "bbox_mAP_m": 0.196, "bbox_mAP_l": 0.562, "bbox_mAP_copypaste": "0.499 0.673 0.541 0.027 0.196 0.562"}
{"mode": "train", "epoch": 34, "iter": 50, "lr": 0.0, "memory": 25591, "data_time": 0.06377, "loss_rpn_cls": 0.00296, "loss_rpn_bbox": 0.00715, "s0.loss_cls": 0.05991, "s0.acc": 97.86719, "s0.loss_bbox": 0.03947, "s1.loss_cls": 0.0197, "s1.acc": 98.58691, "s1.loss_bbox": 0.02575, "s2.loss_cls": 0.00493, "s2.acc": 99.31641, "s2.loss_bbox": 0.00729, "loss": 0.16715, "time": 1.67861}
{"mode": "train", "epoch": 34, "iter": 100, "lr": 0.0, "memory": 25591, "data_time": 0.01264, "loss_rpn_cls": 0.00322, "loss_rpn_bbox": 0.00667, "s0.loss_cls": 0.06926, "s0.acc": 97.67773, "s0.loss_bbox": 0.03999, "s1.loss_cls": 0.02146, "s1.acc": 98.58105, "s1.loss_bbox": 0.02299, "s2.loss_cls": 0.00529, "s2.acc": 99.32617, "s2.loss_bbox": 0.00588, "loss": 0.17477, "time": 1.62527}
{"mode": "train", "epoch": 34, "iter": 150, "lr": 0.0, "memory": 25591, "data_time": 0.01283, "loss_rpn_cls": 0.00291, "loss_rpn_bbox": 0.00881, "s0.loss_cls": 0.07855, "s0.acc": 97.30859, "s0.loss_bbox": 0.04986, "s1.loss_cls": 0.02574, "s1.acc": 98.24219, "s1.loss_bbox": 0.0335, "s2.loss_cls": 0.0071, "s2.acc": 99.04102, "s2.loss_bbox": 0.00971, "loss": 0.21618, "time": 1.63027}
{"mode": "train", "epoch": 34, "iter": 200, "lr": 0.0, "memory": 25591, "data_time": 0.0128, "loss_rpn_cls": 0.00351, "loss_rpn_bbox": 0.00612, "s0.loss_cls": 0.07227, "s0.acc": 97.66406, "s0.loss_bbox": 0.0416, "s1.loss_cls": 0.02251, "s1.acc": 98.56836, "s1.loss_bbox": 0.02427, "s2.loss_cls": 0.0059, "s2.acc": 99.29102, "s2.loss_bbox": 0.00647, "loss": 0.18265, "time": 1.62891}
{"mode": "train", "epoch": 34, "iter": 250, "lr": 0.0, "memory": 25591, "data_time": 0.01271, "loss_rpn_cls": 0.00401, "loss_rpn_bbox": 0.00807, "s0.loss_cls": 0.08234, "s0.acc": 97.20508, "s0.loss_bbox": 0.04637, "s1.loss_cls": 0.02526, "s1.acc": 98.33984, "s1.loss_bbox": 0.02921, "s2.loss_cls": 0.0065, "s2.acc": 99.21094, "s2.loss_bbox": 0.00771, "loss": 0.20947, "time": 1.63017}
{"mode": "train", "epoch": 34, "iter": 300, "lr": 0.0, "memory": 25591, "data_time": 0.01315, "loss_rpn_cls": 0.00529, "loss_rpn_bbox": 0.00885, "s0.loss_cls": 0.08363, "s0.acc": 97.37891, "s0.loss_bbox": 0.05001, "s1.loss_cls": 0.02747, "s1.acc": 98.30957, "s1.loss_bbox": 0.03059, "s2.loss_cls": 0.00731, "s2.acc": 99.11328, "s2.loss_bbox": 0.00853, "loss": 0.22169, "time": 1.65062}
{"mode": "train", "epoch": 34, "iter": 350, "lr": 0.0, "memory": 25591, "data_time": 0.01309, "loss_rpn_cls": 0.00411, "loss_rpn_bbox": 0.00946, "s0.loss_cls": 0.08322, "s0.acc": 97.24219, "s0.loss_bbox": 0.05112, "s1.loss_cls": 0.02778, "s1.acc": 98.20312, "s1.loss_bbox": 0.03282, "s2.loss_cls": 0.00787, "s2.acc": 99.05078, "s2.loss_bbox": 0.00876, "loss": 0.22515, "time": 1.64382}
{"mode": "train", "epoch": 34, "iter": 400, "lr": 0.0, "memory": 25591, "data_time": 0.01259, "loss_rpn_cls": 0.0037, "loss_rpn_bbox": 0.0064, "s0.loss_cls": 0.07942, "s0.acc": 97.40918, "s0.loss_bbox": 0.04421, "s1.loss_cls": 0.02405, "s1.acc": 98.51367, "s1.loss_bbox": 0.02504, "s2.loss_cls": 0.00613, "s2.acc": 99.25293, "s2.loss_bbox": 0.00671, "loss": 0.19564, "time": 1.63332}
{"mode": "train", "epoch": 34, "iter": 450, "lr": 0.0, "memory": 25591, "data_time": 0.01252, "loss_rpn_cls": 0.00352, "loss_rpn_bbox": 0.00784, "s0.loss_cls": 0.09443, "s0.acc": 96.93359, "s0.loss_bbox": 0.05261, "s1.loss_cls": 0.02962, "s1.acc": 98.12695, "s1.loss_bbox": 0.03152, "s2.loss_cls": 0.00771, "s2.acc": 99.01758, "s2.loss_bbox": 0.00827, "loss": 0.23553, "time": 1.63162}
{"mode": "train", "epoch": 34, "iter": 500, "lr": 0.0, "memory": 25591, "data_time": 0.01285, "loss_rpn_cls": 0.00681, "loss_rpn_bbox": 0.00955, "s0.loss_cls": 0.08627, "s0.acc": 97.16016, "s0.loss_bbox": 0.05114, "s1.loss_cls": 0.02829, "s1.acc": 98.14648, "s1.loss_bbox": 0.03286, "s2.loss_cls": 0.00782, "s2.acc": 99.00977, "s2.loss_bbox": 0.00855, "loss": 0.23128, "time": 1.64764}
{"mode": "train", "epoch": 34, "iter": 550, "lr": 0.0, "memory": 25591, "data_time": 0.01265, "loss_rpn_cls": 0.00257, "loss_rpn_bbox": 0.00555, "s0.loss_cls": 0.06735, "s0.acc": 97.68457, "s0.loss_bbox": 0.039, "s1.loss_cls": 0.02051, "s1.acc": 98.60059, "s1.loss_bbox": 0.02281, "s2.loss_cls": 0.00512, "s2.acc": 99.33105, "s2.loss_bbox": 0.00583, "loss": 0.16875, "time": 1.6383}
{"mode": "train", "epoch": 34, "iter": 600, "lr": 0.0, "memory": 25591, "data_time": 0.01267, "loss_rpn_cls": 0.00266, "loss_rpn_bbox": 0.00597, "s0.loss_cls": 0.06775, "s0.acc": 97.7373, "s0.loss_bbox": 0.04111, "s1.loss_cls": 0.02088, "s1.acc": 98.6123, "s1.loss_bbox": 0.02556, "s2.loss_cls": 0.00529, "s2.acc": 99.31348, "s2.loss_bbox": 0.00646, "loss": 0.17568, "time": 1.64045}
{"mode": "train", "epoch": 34, "iter": 650, "lr": 0.0, "memory": 25591, "data_time": 0.01242, "loss_rpn_cls": 0.00318, "loss_rpn_bbox": 0.0068, "s0.loss_cls": 0.07003, "s0.acc": 97.60254, "s0.loss_bbox": 0.03981, "s1.loss_cls": 0.0211, "s1.acc": 98.57324, "s1.loss_bbox": 0.02426, "s2.loss_cls": 0.00545, "s2.acc": 99.28418, "s2.loss_bbox": 0.00729, "loss": 0.17792, "time": 1.62828}
{"mode": "train", "epoch": 34, "iter": 700, "lr": 0.0, "memory": 25591, "data_time": 0.01282, "loss_rpn_cls": 0.00805, "loss_rpn_bbox": 0.00951, "s0.loss_cls": 0.09539, "s0.acc": 96.9248, "s0.loss_bbox": 0.05677, "s1.loss_cls": 0.02941, "s1.acc": 98.15137, "s1.loss_bbox": 0.03385, "s2.loss_cls": 0.00842, "s2.acc": 99.00195, "s2.loss_bbox": 0.00951, "loss": 0.25092, "time": 1.63424}
{"mode": "train", "epoch": 34, "iter": 750, "lr": 0.0, "memory": 25591, "data_time": 0.01293, "loss_rpn_cls": 0.00522, "loss_rpn_bbox": 0.00774, "s0.loss_cls": 0.07203, "s0.acc": 97.64355, "s0.loss_bbox": 0.04378, "s1.loss_cls": 0.02283, "s1.acc": 98.55273, "s1.loss_bbox": 0.02614, "s2.loss_cls": 0.00637, "s2.acc": 99.18848, "s2.loss_bbox": 0.00725, "loss": 0.19135, "time": 1.62538}
{"mode": "train", "epoch": 34, "iter": 800, "lr": 0.0, "memory": 25591, "data_time": 0.01254, "loss_rpn_cls": 0.00756, "loss_rpn_bbox": 0.00795, "s0.loss_cls": 0.07875, "s0.acc": 97.48633, "s0.loss_bbox": 0.04378, "s1.loss_cls": 0.02599, "s1.acc": 98.375, "s1.loss_bbox": 0.02729, "s2.loss_cls": 0.00722, "s2.acc": 99.1377, "s2.loss_bbox": 0.00773, "loss": 0.20627, "time": 1.66195}
{"mode": "train", "epoch": 34, "iter": 850, "lr": 0.0, "memory": 25591, "data_time": 0.01305, "loss_rpn_cls": 0.00426, "loss_rpn_bbox": 0.00679, "s0.loss_cls": 0.08114, "s0.acc": 97.4707, "s0.loss_bbox": 0.04382, "s1.loss_cls": 0.0231, "s1.acc": 98.56641, "s1.loss_bbox": 0.02368, "s2.loss_cls": 0.00613, "s2.acc": 99.25977, "s2.loss_bbox": 0.00624, "loss": 0.19515, "time": 1.63696}
{"mode": "train", "epoch": 34, "iter": 900, "lr": 0.0, "memory": 25591, "data_time": 0.01279, "loss_rpn_cls": 0.00258, "loss_rpn_bbox": 0.00641, "s0.loss_cls": 0.06238, "s0.acc": 97.94824, "s0.loss_bbox": 0.03564, "s1.loss_cls": 0.02043, "s1.acc": 98.7041, "s1.loss_bbox": 0.02246, "s2.loss_cls": 0.00544, "s2.acc": 99.35254, "s2.loss_bbox": 0.00584, "loss": 0.16116, "time": 1.62758}
{"mode": "train", "epoch": 34, "iter": 950, "lr": 0.0, "memory": 25591, "data_time": 0.01309, "loss_rpn_cls": 0.00397, "loss_rpn_bbox": 0.00636, "s0.loss_cls": 0.05561, "s0.acc": 98.10449, "s0.loss_bbox": 0.03492, "s1.loss_cls": 0.01715, "s1.acc": 98.83594, "s1.loss_bbox": 0.01931, "s2.loss_cls": 0.00486, "s2.acc": 99.37012, "s2.loss_bbox": 0.00581, "loss": 0.14799, "time": 1.63453}
{"mode": "train", "epoch": 34, "iter": 1000, "lr": 0.0, "memory": 25591, "data_time": 0.01363, "loss_rpn_cls": 0.00559, "loss_rpn_bbox": 0.0075, "s0.loss_cls": 0.07219, "s0.acc": 97.70703, "s0.loss_bbox": 0.04249, "s1.loss_cls": 0.02283, "s1.acc": 98.50293, "s1.loss_bbox": 0.02563, "s2.loss_cls": 0.00626, "s2.acc": 99.23047, "s2.loss_bbox": 0.00706, "loss": 0.18954, "time": 1.64156}
{"mode": "train", "epoch": 34, "iter": 1050, "lr": 0.0, "memory": 25591, "data_time": 0.01303, "loss_rpn_cls": 0.00279, "loss_rpn_bbox": 0.00699, "s0.loss_cls": 0.07722, "s0.acc": 97.44043, "s0.loss_bbox": 0.04417, "s1.loss_cls": 0.02556, "s1.acc": 98.32129, "s1.loss_bbox": 0.02875, "s2.loss_cls": 0.00659, "s2.acc": 99.16016, "s2.loss_bbox": 0.00777, "loss": 0.19985, "time": 1.63407}
{"mode": "train", "epoch": 34, "iter": 1100, "lr": 0.0, "memory": 25591, "data_time": 0.0126, "loss_rpn_cls": 0.00536, "loss_rpn_bbox": 0.01038, "s0.loss_cls": 0.09733, "s0.acc": 96.74902, "s0.loss_bbox": 0.05773, "s1.loss_cls": 0.03265, "s1.acc": 97.86035, "s1.loss_bbox": 0.03687, "s2.loss_cls": 0.0088, "s2.acc": 98.85742, "s2.loss_bbox": 0.01041, "loss": 0.25953, "time": 1.64275}
{"mode": "train", "epoch": 34, "iter": 1150, "lr": 0.0, "memory": 25591, "data_time": 0.0131, "loss_rpn_cls": 0.00309, "loss_rpn_bbox": 0.00544, "s0.loss_cls": 0.07154, "s0.acc": 97.70996, "s0.loss_bbox": 0.03904, "s1.loss_cls": 0.02171, "s1.acc": 98.62988, "s1.loss_bbox": 0.02278, "s2.loss_cls": 0.00538, "s2.acc": 99.36133, "s2.loss_bbox": 0.00584, "loss": 0.17482, "time": 1.63293}
{"mode": "train", "epoch": 34, "iter": 1200, "lr": 0.0, "memory": 25591, "data_time": 0.01272, "loss_rpn_cls": 0.00274, "loss_rpn_bbox": 0.00831, "s0.loss_cls": 0.07593, "s0.acc": 97.41992, "s0.loss_bbox": 0.04861, "s1.loss_cls": 0.0258, "s1.acc": 98.22754, "s1.loss_bbox": 0.03091, "s2.loss_cls": 0.00717, "s2.acc": 99.05273, "s2.loss_bbox": 0.00865, "loss": 0.20811, "time": 1.63292}
{"mode": "val", "epoch": 34, "iter": 982, "lr": 0.0, "bbox_mAP": 0.514, "bbox_mAP_50": 0.692, "bbox_mAP_75": 0.559, "bbox_mAP_s": 0.04, "bbox_mAP_m": 0.218, "bbox_mAP_l": 0.576, "bbox_mAP_copypaste": "0.514 0.692 0.559 0.040 0.218 0.576"}
{"mode": "train", "epoch": 35, "iter": 50, "lr": 0.0, "memory": 25591, "data_time": 0.06334, "loss_rpn_cls": 0.00347, "loss_rpn_bbox": 0.00603, "s0.loss_cls": 0.06441, "s0.acc": 97.94824, "s0.loss_bbox": 0.0402, "s1.loss_cls": 0.0205, "s1.acc": 98.68652, "s1.loss_bbox": 0.02343, "s2.loss_cls": 0.0056, "s2.acc": 99.30957, "s2.loss_bbox": 0.00659, "loss": 0.17023, "time": 1.67896}
{"mode": "train", "epoch": 35, "iter": 100, "lr": 0.0, "memory": 25591, "data_time": 0.01297, "loss_rpn_cls": 0.00418, "loss_rpn_bbox": 0.00995, "s0.loss_cls": 0.09197, "s0.acc": 96.97656, "s0.loss_bbox": 0.05644, "s1.loss_cls": 0.02936, "s1.acc": 98.0459, "s1.loss_bbox": 0.03459, "s2.loss_cls": 0.00855, "s2.acc": 98.91602, "s2.loss_bbox": 0.01034, "loss": 0.24537, "time": 1.6228}
{"mode": "train", "epoch": 35, "iter": 150, "lr": 0.0, "memory": 25591, "data_time": 0.01393, "loss_rpn_cls": 0.00422, "loss_rpn_bbox": 0.00835, "s0.loss_cls": 0.08489, "s0.acc": 97.2041, "s0.loss_bbox": 0.04929, "s1.loss_cls": 0.02527, "s1.acc": 98.33984, "s1.loss_bbox": 0.02893, "s2.loss_cls": 0.00729, "s2.acc": 99.09277, "s2.loss_bbox": 0.00828, "loss": 0.21651, "time": 1.63349}
{"mode": "train", "epoch": 35, "iter": 200, "lr": 0.0, "memory": 25591, "data_time": 0.01298, "loss_rpn_cls": 0.00447, "loss_rpn_bbox": 0.00784, "s0.loss_cls": 0.07537, "s0.acc": 97.44629, "s0.loss_bbox": 0.04911, "s1.loss_cls": 0.02327, "s1.acc": 98.45215, "s1.loss_bbox": 0.02828, "s2.loss_cls": 0.00606, "s2.acc": 99.22949, "s2.loss_bbox": 0.00768, "loss": 0.20209, "time": 1.63382}
{"mode": "train", "epoch": 35, "iter": 250, "lr": 0.0, "memory": 25591, "data_time": 0.01302, "loss_rpn_cls": 0.0065, "loss_rpn_bbox": 0.01011, "s0.loss_cls": 0.08658, "s0.acc": 97.12598, "s0.loss_bbox": 0.05154, "s1.loss_cls": 0.02856, "s1.acc": 98.20117, "s1.loss_bbox": 0.03093, "s2.loss_cls": 0.00807, "s2.acc": 99.00098, "s2.loss_bbox": 0.00829, "loss": 0.23057, "time": 1.62284}
{"mode": "train", "epoch": 35, "iter": 300, "lr": 0.0, "memory": 25591, "data_time": 0.01301, "loss_rpn_cls": 0.00436, "loss_rpn_bbox": 0.00802, "s0.loss_cls": 0.07059, "s0.acc": 97.69336, "s0.loss_bbox": 0.04203, "s1.loss_cls": 0.02355, "s1.acc": 98.47266, "s1.loss_bbox": 0.02585, "s2.loss_cls": 0.00665, "s2.acc": 99.18457, "s2.loss_bbox": 0.00746, "loss": 0.18852, "time": 1.63566}
{"mode": "train", "epoch": 35, "iter": 350, "lr": 0.0, "memory": 25591, "data_time": 0.01258, "loss_rpn_cls": 0.00248, "loss_rpn_bbox": 0.00699, "s0.loss_cls": 0.06789, "s0.acc": 97.71582, "s0.loss_bbox": 0.03915, "s1.loss_cls": 0.02175, "s1.acc": 98.5498, "s1.loss_bbox": 0.02506, "s2.loss_cls": 0.00566, "s2.acc": 99.30469, "s2.loss_bbox": 0.00628, "loss": 0.17526, "time": 1.62964}
{"mode": "train", "epoch": 35, "iter": 400, "lr": 0.0, "memory": 25591, "data_time": 0.01276, "loss_rpn_cls": 0.00253, "loss_rpn_bbox": 0.00615, "s0.loss_cls": 0.07104, "s0.acc": 97.69434, "s0.loss_bbox": 0.04086, "s1.loss_cls": 0.02219, "s1.acc": 98.58008, "s1.loss_bbox": 0.02347, "s2.loss_cls": 0.00546, "s2.acc": 99.3125, "s2.loss_bbox": 0.00646, "loss": 0.17815, "time": 1.62223}
{"mode": "train", "epoch": 35, "iter": 450, "lr": 0.0, "memory": 25591, "data_time": 0.01325, "loss_rpn_cls": 0.00207, "loss_rpn_bbox": 0.00615, "s0.loss_cls": 0.05939, "s0.acc": 98.00879, "s0.loss_bbox": 0.03664, "s1.loss_cls": 0.01931, "s1.acc": 98.69434, "s1.loss_bbox": 0.0227, "s2.loss_cls": 0.00477, "s2.acc": 99.38086, "s2.loss_bbox": 0.00574, "loss": 0.15678, "time": 1.62817}
{"mode": "train", "epoch": 35, "iter": 500, "lr": 0.0, "memory": 25591, "data_time": 0.0132, "loss_rpn_cls": 0.00429, "loss_rpn_bbox": 0.00622, "s0.loss_cls": 0.07711, "s0.acc": 97.41992, "s0.loss_bbox": 0.04533, "s1.loss_cls": 0.02422, "s1.acc": 98.44336, "s1.loss_bbox": 0.02778, "s2.loss_cls": 0.00633, "s2.acc": 99.18555, "s2.loss_bbox": 0.00778, "loss": 0.19906, "time": 1.62423}
{"mode": "train", "epoch": 35, "iter": 550, "lr": 0.0, "memory": 25591, "data_time": 0.01341, "loss_rpn_cls": 0.00436, "loss_rpn_bbox": 0.01, "s0.loss_cls": 0.08976, "s0.acc": 96.92383, "s0.loss_bbox": 0.05562, "s1.loss_cls": 0.02871, "s1.acc": 98.06543, "s1.loss_bbox": 0.03378, "s2.loss_cls": 0.00782, "s2.acc": 98.9873, "s2.loss_bbox": 0.00878, "loss": 0.23884, "time": 1.62721}
{"mode": "train", "epoch": 35, "iter": 600, "lr": 0.0, "memory": 25591, "data_time": 0.01323, "loss_rpn_cls": 0.00483, "loss_rpn_bbox": 0.00943, "s0.loss_cls": 0.09177, "s0.acc": 96.93652, "s0.loss_bbox": 0.05343, "s1.loss_cls": 0.02947, "s1.acc": 98.03906, "s1.loss_bbox": 0.03183, "s2.loss_cls": 0.00764, "s2.acc": 99.00098, "s2.loss_bbox": 0.00935, "loss": 0.23775, "time": 1.63135}
{"mode": "train", "epoch": 35, "iter": 650, "lr": 0.0, "memory": 25591, "data_time": 0.01293, "loss_rpn_cls": 0.00278, "loss_rpn_bbox": 0.00597, "s0.loss_cls": 0.08183, "s0.acc": 97.40527, "s0.loss_bbox": 0.04561, "s1.loss_cls": 0.02425, "s1.acc": 98.48145, "s1.loss_bbox": 0.02649, "s2.loss_cls": 0.00615, "s2.acc": 99.25391, "s2.loss_bbox": 0.00682, "loss": 0.19991, "time": 1.63469}
{"mode": "train", "epoch": 35, "iter": 700, "lr": 0.0, "memory": 25591, "data_time": 0.01276, "loss_rpn_cls": 0.0034, "loss_rpn_bbox": 0.00663, "s0.loss_cls": 0.06557, "s0.acc": 97.69629, "s0.loss_bbox": 0.03825, "s1.loss_cls": 0.02123, "s1.acc": 98.54688, "s1.loss_bbox": 0.02537, "s2.loss_cls": 0.00567, "s2.acc": 99.24316, "s2.loss_bbox": 0.00676, "loss": 0.17288, "time": 1.62391}
{"mode": "train", "epoch": 35, "iter": 750, "lr": 0.0, "memory": 25591, "data_time": 0.01294, "loss_rpn_cls": 0.0026, "loss_rpn_bbox": 0.00865, "s0.loss_cls": 0.07177, "s0.acc": 97.43359, "s0.loss_bbox": 0.04913, "s1.loss_cls": 0.02422, "s1.acc": 98.29004, "s1.loss_bbox": 0.03102, "s2.loss_cls": 0.0065, "s2.acc": 99.12891, "s2.loss_bbox": 0.00831, "loss": 0.20221, "time": 1.62926}
{"mode": "train", "epoch": 35, "iter": 800, "lr": 0.0, "memory": 25591, "data_time": 0.01285, "loss_rpn_cls": 0.00353, "loss_rpn_bbox": 0.00801, "s0.loss_cls": 0.07581, "s0.acc": 97.40723, "s0.loss_bbox": 0.04876, "s1.loss_cls": 0.02404, "s1.acc": 98.38281, "s1.loss_bbox": 0.02979, "s2.loss_cls": 0.00637, "s2.acc": 99.14941, "s2.loss_bbox": 0.00803, "loss": 0.20435, "time": 1.63714}
{"mode": "train", "epoch": 35, "iter": 850, "lr": 0.0, "memory": 25591, "data_time": 0.01333, "loss_rpn_cls": 0.00322, "loss_rpn_bbox": 0.00693, "s0.loss_cls": 0.07269, "s0.acc": 97.59375, "s0.loss_bbox": 0.04397, "s1.loss_cls": 0.02366, "s1.acc": 98.41797, "s1.loss_bbox": 0.02898, "s2.loss_cls": 0.00644, "s2.acc": 99.13477, "s2.loss_bbox": 0.00781, "loss": 0.1937, "time": 1.61715}
{"mode": "train", "epoch": 35, "iter": 900, "lr": 0.0, "memory": 25591, "data_time": 0.01282, "loss_rpn_cls": 0.00781, "loss_rpn_bbox": 0.00785, "s0.loss_cls": 0.07005, "s0.acc": 97.70996, "s0.loss_bbox": 0.04034, "s1.loss_cls": 0.02285, "s1.acc": 98.52734, "s1.loss_bbox": 0.02437, "s2.loss_cls": 0.0065, "s2.acc": 99.22852, "s2.loss_bbox": 0.00685, "loss": 0.18661, "time": 1.62992}
{"mode": "train", "epoch": 35, "iter": 950, "lr": 0.0, "memory": 25591, "data_time": 0.01314, "loss_rpn_cls": 0.00411, "loss_rpn_bbox": 0.00934, "s0.loss_cls": 0.08276, "s0.acc": 97.29102, "s0.loss_bbox": 0.0501, "s1.loss_cls": 0.02726, "s1.acc": 98.22559, "s1.loss_bbox": 0.02921, "s2.loss_cls": 0.00717, "s2.acc": 99.12305, "s2.loss_bbox": 0.00765, "loss": 0.2176, "time": 1.62175}
{"mode": "train", "epoch": 35, "iter": 1000, "lr": 0.0, "memory": 25591, "data_time": 0.01297, "loss_rpn_cls": 0.00243, "loss_rpn_bbox": 0.00507, "s0.loss_cls": 0.06314, "s0.acc": 97.96875, "s0.loss_bbox": 0.03448, "s1.loss_cls": 0.01849, "s1.acc": 98.7998, "s1.loss_bbox": 0.01994, "s2.loss_cls": 0.00499, "s2.acc": 99.34863, "s2.loss_bbox": 0.00562, "loss": 0.15415, "time": 1.62704}
{"mode": "train", "epoch": 35, "iter": 1050, "lr": 0.0, "memory": 25591, "data_time": 0.0134, "loss_rpn_cls": 0.00583, "loss_rpn_bbox": 0.00875, "s0.loss_cls": 0.08739, "s0.acc": 97.23633, "s0.loss_bbox": 0.05071, "s1.loss_cls": 0.02874, "s1.acc": 98.20215, "s1.loss_bbox": 0.03177, "s2.loss_cls": 0.00778, "s2.acc": 99.0459, "s2.loss_bbox": 0.00895, "loss": 0.22992, "time": 1.62638}
{"mode": "train", "epoch": 35, "iter": 1100, "lr": 0.0, "memory": 25591, "data_time": 0.01294, "loss_rpn_cls": 0.0032, "loss_rpn_bbox": 0.00799, "s0.loss_cls": 0.07957, "s0.acc": 97.32227, "s0.loss_bbox": 0.04878, "s1.loss_cls": 0.02417, "s1.acc": 98.40039, "s1.loss_bbox": 0.02888, "s2.loss_cls": 0.0064, "s2.acc": 99.18652, "s2.loss_bbox": 0.00767, "loss": 0.20665, "time": 1.63138}
{"mode": "train", "epoch": 35, "iter": 1150, "lr": 0.0, "memory": 25591, "data_time": 0.01372, "loss_rpn_cls": 0.00277, "loss_rpn_bbox": 0.00576, "s0.loss_cls": 0.0702, "s0.acc": 97.84375, "s0.loss_bbox": 0.03857, "s1.loss_cls": 0.02145, "s1.acc": 98.66797, "s1.loss_bbox": 0.02252, "s2.loss_cls": 0.00561, "s2.acc": 99.31934, "s2.loss_bbox": 0.0067, "loss": 0.17357, "time": 1.63904}
{"mode": "train", "epoch": 35, "iter": 1200, "lr": 0.0, "memory": 25591, "data_time": 0.01362, "loss_rpn_cls": 0.00288, "loss_rpn_bbox": 0.00584, "s0.loss_cls": 0.07641, "s0.acc": 97.40137, "s0.loss_bbox": 0.04387, "s1.loss_cls": 0.02329, "s1.acc": 98.47656, "s1.loss_bbox": 0.02501, "s2.loss_cls": 0.00637, "s2.acc": 99.15625, "s2.loss_bbox": 0.00677, "loss": 0.19044, "time": 1.62795}
{"mode": "val", "epoch": 35, "iter": 982, "lr": 0.0, "bbox_mAP": 0.519, "bbox_mAP_50": 0.699, "bbox_mAP_75": 0.563, "bbox_mAP_s": 0.042, "bbox_mAP_m": 0.222, "bbox_mAP_l": 0.58, "bbox_mAP_copypaste": "0.519 0.699 0.563 0.042 0.222 0.580"}
{"mode": "train", "epoch": 36, "iter": 50, "lr": 0.0, "memory": 25591, "data_time": 0.0639, "loss_rpn_cls": 0.00405, "loss_rpn_bbox": 0.00926, "s0.loss_cls": 0.09339, "s0.acc": 96.98828, "s0.loss_bbox": 0.05569, "s1.loss_cls": 0.03094, "s1.acc": 98.03223, "s1.loss_bbox": 0.03502, "s2.loss_cls": 0.008, "s2.acc": 98.9668, "s2.loss_bbox": 0.00996, "loss": 0.24631, "time": 1.69229}
{"mode": "train", "epoch": 36, "iter": 100, "lr": 0.0, "memory": 25591, "data_time": 0.01274, "loss_rpn_cls": 0.00355, "loss_rpn_bbox": 0.00789, "s0.loss_cls": 0.08168, "s0.acc": 97.34766, "s0.loss_bbox": 0.04628, "s1.loss_cls": 0.02544, "s1.acc": 98.4375, "s1.loss_bbox": 0.02781, "s2.loss_cls": 0.00657, "s2.acc": 99.20703, "s2.loss_bbox": 0.00677, "loss": 0.20599, "time": 1.62092}
{"mode": "train", "epoch": 36, "iter": 150, "lr": 0.0, "memory": 25591, "data_time": 0.01276, "loss_rpn_cls": 0.00415, "loss_rpn_bbox": 0.00772, "s0.loss_cls": 0.07068, "s0.acc": 97.58984, "s0.loss_bbox": 0.04507, "s1.loss_cls": 0.02262, "s1.acc": 98.47852, "s1.loss_bbox": 0.02589, "s2.loss_cls": 0.00622, "s2.acc": 99.24219, "s2.loss_bbox": 0.00693, "loss": 0.18931, "time": 1.63935}
{"mode": "train", "epoch": 36, "iter": 200, "lr": 0.0, "memory": 25591, "data_time": 0.01325, "loss_rpn_cls": 0.00253, "loss_rpn_bbox": 0.00581, "s0.loss_cls": 0.06922, "s0.acc": 97.7959, "s0.loss_bbox": 0.0387, "s1.loss_cls": 0.02043, "s1.acc": 98.65137, "s1.loss_bbox": 0.0231, "s2.loss_cls": 0.00528, "s2.acc": 99.32715, "s2.loss_bbox": 0.00626, "loss": 0.17133, "time": 1.63511}
{"mode": "train", "epoch": 36, "iter": 250, "lr": 0.0, "memory": 25591, "data_time": 0.01245, "loss_rpn_cls": 0.00469, "loss_rpn_bbox": 0.00816, "s0.loss_cls": 0.07407, "s0.acc": 97.39844, "s0.loss_bbox": 0.04699, "s1.loss_cls": 0.02456, "s1.acc": 98.35254, "s1.loss_bbox": 0.02852, "s2.loss_cls": 0.00673, "s2.acc": 99.15723, "s2.loss_bbox": 0.00783, "loss": 0.20155, "time": 1.63246}
{"mode": "train", "epoch": 36, "iter": 300, "lr": 0.0, "memory": 25591, "data_time": 0.01273, "loss_rpn_cls": 0.00322, "loss_rpn_bbox": 0.00799, "s0.loss_cls": 0.07765, "s0.acc": 97.37402, "s0.loss_bbox": 0.05044, "s1.loss_cls": 0.02599, "s1.acc": 98.23535, "s1.loss_bbox": 0.03042, "s2.loss_cls": 0.00772, "s2.acc": 98.99414, "s2.loss_bbox": 0.00907, "loss": 0.21251, "time": 1.64836}
{"mode": "train", "epoch": 36, "iter": 350, "lr": 0.0, "memory": 25591, "data_time": 0.0124, "loss_rpn_cls": 0.00353, "loss_rpn_bbox": 0.00777, "s0.loss_cls": 0.07035, "s0.acc": 97.63379, "s0.loss_bbox": 0.04053, "s1.loss_cls": 0.02144, "s1.acc": 98.58203, "s1.loss_bbox": 0.02386, "s2.loss_cls": 0.00593, "s2.acc": 99.24023, "s2.loss_bbox": 0.00704, "loss": 0.18045, "time": 1.62714}
{"mode": "train", "epoch": 36, "iter": 400, "lr": 0.0, "memory": 25591, "data_time": 0.01291, "loss_rpn_cls": 0.00376, "loss_rpn_bbox": 0.0073, "s0.loss_cls": 0.06473, "s0.acc": 97.90625, "s0.loss_bbox": 0.03576, "s1.loss_cls": 0.01984, "s1.acc": 98.72754, "s1.loss_bbox": 0.02278, "s2.loss_cls": 0.005, "s2.acc": 99.36035, "s2.loss_bbox": 0.0058, "loss": 0.16497, "time": 1.61639}
{"mode": "train", "epoch": 36, "iter": 450, "lr": 0.0, "memory": 25591, "data_time": 0.0126, "loss_rpn_cls": 0.00576, "loss_rpn_bbox": 0.01019, "s0.loss_cls": 0.09478, "s0.acc": 96.82617, "s0.loss_bbox": 0.05707, "s1.loss_cls": 0.02964, "s1.acc": 98.02637, "s1.loss_bbox": 0.03405, "s2.loss_cls": 0.00812, "s2.acc": 98.92871, "s2.loss_bbox": 0.00967, "loss": 0.24928, "time": 1.62775}
{"mode": "train", "epoch": 36, "iter": 500, "lr": 0.0, "memory": 25591, "data_time": 0.01224, "loss_rpn_cls": 0.00341, "loss_rpn_bbox": 0.00794, "s0.loss_cls": 0.07327, "s0.acc": 97.56934, "s0.loss_bbox": 0.04598, "s1.loss_cls": 0.02325, "s1.acc": 98.52051, "s1.loss_bbox": 0.0261, "s2.loss_cls": 0.00617, "s2.acc": 99.25781, "s2.loss_bbox": 0.00713, "loss": 0.19325, "time": 1.62394}
{"mode": "train", "epoch": 36, "iter": 550, "lr": 0.0, "memory": 25591, "data_time": 0.01287, "loss_rpn_cls": 0.00337, "loss_rpn_bbox": 0.00765, "s0.loss_cls": 0.08346, "s0.acc": 97.29883, "s0.loss_bbox": 0.04762, "s1.loss_cls": 0.02736, "s1.acc": 98.18848, "s1.loss_bbox": 0.03, "s2.loss_cls": 0.0073, "s2.acc": 99.04688, "s2.loss_bbox": 0.00797, "loss": 0.21473, "time": 1.62788}
{"mode": "train", "epoch": 36, "iter": 600, "lr": 0.0, "memory": 25591, "data_time": 0.01327, "loss_rpn_cls": 0.00294, "loss_rpn_bbox": 0.00749, "s0.loss_cls": 0.07389, "s0.acc": 97.48926, "s0.loss_bbox": 0.04088, "s1.loss_cls": 0.02311, "s1.acc": 98.40137, "s1.loss_bbox": 0.02576, "s2.loss_cls": 0.00598, "s2.acc": 99.20801, "s2.loss_bbox": 0.00727, "loss": 0.18732, "time": 1.61637}
{"mode": "train", "epoch": 36, "iter": 650, "lr": 0.0, "memory": 25591, "data_time": 0.01231, "loss_rpn_cls": 0.00272, "loss_rpn_bbox": 0.00795, "s0.loss_cls": 0.07698, "s0.acc": 97.31836, "s0.loss_bbox": 0.04751, "s1.loss_cls": 0.02411, "s1.acc": 98.27832, "s1.loss_bbox": 0.02818, "s2.loss_cls": 0.00627, "s2.acc": 99.12988, "s2.loss_bbox": 0.00825, "loss": 0.20197, "time": 1.62449}
{"mode": "train", "epoch": 36, "iter": 700, "lr": 0.0, "memory": 25591, "data_time": 0.01268, "loss_rpn_cls": 0.00348, "loss_rpn_bbox": 0.00611, "s0.loss_cls": 0.06657, "s0.acc": 97.67773, "s0.loss_bbox": 0.03982, "s1.loss_cls": 0.02196, "s1.acc": 98.5, "s1.loss_bbox": 0.02494, "s2.loss_cls": 0.00537, "s2.acc": 99.31055, "s2.loss_bbox": 0.00663, "loss": 0.17489, "time": 1.63123}
{"mode": "train", "epoch": 36, "iter": 750, "lr": 0.0, "memory": 25591, "data_time": 0.01266, "loss_rpn_cls": 0.00461, "loss_rpn_bbox": 0.01008, "s0.loss_cls": 0.08939, "s0.acc": 96.87988, "s0.loss_bbox": 0.05526, "s1.loss_cls": 0.02955, "s1.acc": 97.95508, "s1.loss_bbox": 0.03585, "s2.loss_cls": 0.00833, "s2.acc": 98.89551, "s2.loss_bbox": 0.01052, "loss": 0.24361, "time": 1.62613}
{"mode": "train", "epoch": 36, "iter": 800, "lr": 0.0, "memory": 25591, "data_time": 0.01213, "loss_rpn_cls": 0.00657, "loss_rpn_bbox": 0.00651, "s0.loss_cls": 0.06934, "s0.acc": 97.75879, "s0.loss_bbox": 0.03901, "s1.loss_cls": 0.02328, "s1.acc": 98.49219, "s1.loss_bbox": 0.0244, "s2.loss_cls": 0.00616, "s2.acc": 99.26465, "s2.loss_bbox": 0.00622, "loss": 0.18149, "time": 1.61623}
{"mode": "train", "epoch": 36, "iter": 850, "lr": 0.0, "memory": 25591, "data_time": 0.0129, "loss_rpn_cls": 0.00224, "loss_rpn_bbox": 0.00609, "s0.loss_cls": 0.05518, "s0.acc": 98.07227, "s0.loss_bbox": 0.03495, "s1.loss_cls": 0.0178, "s1.acc": 98.79883, "s1.loss_bbox": 0.02264, "s2.loss_cls": 0.00476, "s2.acc": 99.33691, "s2.loss_bbox": 0.00623, "loss": 0.14989, "time": 1.62566}
{"mode": "train", "epoch": 36, "iter": 900, "lr": 0.0, "memory": 25591, "data_time": 0.01278, "loss_rpn_cls": 0.00416, "loss_rpn_bbox": 0.00842, "s0.loss_cls": 0.0846, "s0.acc": 97.26562, "s0.loss_bbox": 0.05304, "s1.loss_cls": 0.02731, "s1.acc": 98.24902, "s1.loss_bbox": 0.03189, "s2.loss_cls": 0.00727, "s2.acc": 99.08398, "s2.loss_bbox": 0.00854, "loss": 0.22524, "time": 1.62507}
{"mode": "train", "epoch": 36, "iter": 950, "lr": 0.0, "memory": 25591, "data_time": 0.0125, "loss_rpn_cls": 0.00404, "loss_rpn_bbox": 0.00802, "s0.loss_cls": 0.07606, "s0.acc": 97.39062, "s0.loss_bbox": 0.04834, "s1.loss_cls": 0.0246, "s1.acc": 98.35352, "s1.loss_bbox": 0.02832, "s2.loss_cls": 0.00636, "s2.acc": 99.13867, "s2.loss_bbox": 0.00736, "loss": 0.20309, "time": 1.62244}
{"mode": "train", "epoch": 36, "iter": 1000, "lr": 0.0, "memory": 25591, "data_time": 0.01273, "loss_rpn_cls": 0.00405, "loss_rpn_bbox": 0.00632, "s0.loss_cls": 0.07757, "s0.acc": 97.55859, "s0.loss_bbox": 0.04296, "s1.loss_cls": 0.02416, "s1.acc": 98.50293, "s1.loss_bbox": 0.02379, "s2.loss_cls": 0.00621, "s2.acc": 99.26367, "s2.loss_bbox": 0.00681, "loss": 0.19188, "time": 1.63569}
{"mode": "train", "epoch": 36, "iter": 1050, "lr": 0.0, "memory": 25591, "data_time": 0.01268, "loss_rpn_cls": 0.00412, "loss_rpn_bbox": 0.00776, "s0.loss_cls": 0.07772, "s0.acc": 97.34863, "s0.loss_bbox": 0.04754, "s1.loss_cls": 0.0252, "s1.acc": 98.35254, "s1.loss_bbox": 0.02869, "s2.loss_cls": 0.00662, "s2.acc": 99.16504, "s2.loss_bbox": 0.00774, "loss": 0.20538, "time": 1.6209}
{"mode": "train", "epoch": 36, "iter": 1100, "lr": 0.0, "memory": 25591, "data_time": 0.01275, "loss_rpn_cls": 0.00355, "loss_rpn_bbox": 0.00566, "s0.loss_cls": 0.07057, "s0.acc": 97.66992, "s0.loss_bbox": 0.04153, "s1.loss_cls": 0.02233, "s1.acc": 98.50488, "s1.loss_bbox": 0.02316, "s2.loss_cls": 0.00549, "s2.acc": 99.28906, "s2.loss_bbox": 0.00581, "loss": 0.17809, "time": 1.63292}
{"mode": "train", "epoch": 36, "iter": 1150, "lr": 0.0, "memory": 25591, "data_time": 0.01252, "loss_rpn_cls": 0.00546, "loss_rpn_bbox": 0.00794, "s0.loss_cls": 0.06595, "s0.acc": 97.81836, "s0.loss_bbox": 0.04137, "s1.loss_cls": 0.0205, "s1.acc": 98.62695, "s1.loss_bbox": 0.02413, "s2.loss_cls": 0.00557, "s2.acc": 99.28613, "s2.loss_bbox": 0.00653, "loss": 0.17743, "time": 1.62157}
{"mode": "train", "epoch": 36, "iter": 1200, "lr": 0.0, "memory": 25591, "data_time": 0.01261, "loss_rpn_cls": 0.00297, "loss_rpn_bbox": 0.0069, "s0.loss_cls": 0.06498, "s0.acc": 97.66797, "s0.loss_bbox": 0.04435, "s1.loss_cls": 0.02124, "s1.acc": 98.47559, "s1.loss_bbox": 0.02705, "s2.loss_cls": 0.00574, "s2.acc": 99.21777, "s2.loss_bbox": 0.00729, "loss": 0.18052, "time": 1.62695}
{"mode": "val", "epoch": 36, "iter": 982, "lr": 0.0, "bbox_mAP": 0.528, "bbox_mAP_50": 0.707, "bbox_mAP_75": 0.574, "bbox_mAP_s": 0.047, "bbox_mAP_m": 0.227, "bbox_mAP_l": 0.589, "bbox_mAP_copypaste": "0.528 0.707 0.574 0.047 0.227 0.589"}
